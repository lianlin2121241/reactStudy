'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

'use strict';

/**
 * 规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file 数值检验
 *       对于处于 (0, 1) 范围内的数值，小数点前的 0 可以（MAY）省略，同一项目中必须（MUST）保持一致。
 *       https://github.com/ecomfe/spec/blob/master/less-code-style.md#%E6%95%B0%E5%80%BC
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'leading-zero';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'When value is between 0 - 1 decimal, omitting the integer part of the `0`';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkDecls(function (decl) {
            var parts = _postcss2.default.list.space(decl.value);
            var source = decl.source;
            var lineNum = source.start.line;
            for (var i = 0, len = parts.length; i < len; i++) {
                var part = parts[i];
                var numericVal = parseFloat(part);
                if (numericVal < 1 && numericVal > 0) {
                    if (part.slice(0, 2) === '0.') {
                        var lineContent = (0, _util.getLineContent)(lineNum, source.input.css, true);
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: lineNum,
                            col: lineContent.indexOf(part) + 1,
                            message: MSG,
                            colorMessage: '`' + (0, _util.changeColorByIndex)(lineContent, lineContent.indexOf(part), part) + '` ' + _chalk2.default.grey(MSG)
                        });
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2xlYWRpbmctemVyby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBRUE7Ozs7OztBQWJBOzs7Ozs7O0FBbUJBLElBQU0sV0FBVyxjQUFqQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTSxNQUFNLDJFQUFaOztBQUVBOzs7Ozs7OztBQVFPLElBQU0sd0JBQVEsa0JBQVEsTUFBUixDQUFlLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDLEdBQUQsRUFBTSxNQUFOLEVBQWlCO0FBQ2IsWUFBSSxDQUFDLEtBQUssT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBRUQsWUFBSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQU0sUUFBUSxrQkFBUSxJQUFSLENBQWEsS0FBYixDQUFtQixLQUFLLEtBQXhCLENBQWQ7QUFDQSxnQkFBTSxTQUFTLEtBQUssTUFBcEI7QUFDQSxnQkFBTSxVQUFVLE9BQU8sS0FBUCxDQUFhLElBQTdCO0FBQ0EsaUJBQUssSUFBSSxJQUFJLENBQVIsRUFBVyxNQUFNLE1BQU0sTUFBNUIsRUFBb0MsSUFBSSxHQUF4QyxFQUE2QyxHQUE3QyxFQUFrRDtBQUM5QyxvQkFBTSxPQUFPLE1BQU0sQ0FBTixDQUFiO0FBQ0Esb0JBQU0sYUFBYSxXQUFXLElBQVgsQ0FBbkI7QUFDQSxvQkFBSSxhQUFhLENBQWIsSUFBa0IsYUFBYSxDQUFuQyxFQUFzQztBQUNsQyx3QkFBSSxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxNQUFxQixJQUF6QixFQUErQjtBQUMzQiw0QkFBTSxjQUFjLDBCQUFlLE9BQWYsRUFBd0IsT0FBTyxLQUFQLENBQWEsR0FBckMsRUFBMEMsSUFBMUMsQ0FBcEI7QUFDQSwrQkFBTyxJQUFQLENBQVksUUFBWixFQUFzQjtBQUNsQixrQ0FBTSxJQURZO0FBRWxCLHNDQUFVLFFBRlE7QUFHbEIsa0NBQU0sT0FIWTtBQUlsQixpQ0FBSyxZQUFZLE9BQVosQ0FBb0IsSUFBcEIsSUFBNEIsQ0FKZjtBQUtsQixxQ0FBUyxHQUxTO0FBTWxCLDBDQUFjLE1BQ1IsOEJBQW1CLFdBQW5CLEVBQWdDLFlBQVksT0FBWixDQUFvQixJQUFwQixDQUFoQyxFQUEyRCxJQUEzRCxDQURRLEdBRVIsSUFGUSxHQUdSLGdCQUFNLElBQU4sQ0FBVyxHQUFYO0FBVFkseUJBQXRCO0FBV0g7QUFDSjtBQUNKO0FBQ0osU0F4QkQ7QUF5QkgsS0EvQnlDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJsZWFkaW5nLXplcm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIOaVsOWAvOajgOmqjFxuICogICAgICAg5a+55LqO5aSE5LqOICgwLCAxKSDojIPlm7TlhoXnmoTmlbDlgLzvvIzlsI/mlbDngrnliY3nmoQgMCDlj6/ku6XvvIhNQVnvvInnnIHnlaXvvIzlkIzkuIDpobnnm67kuK3lv4XpobvvvIhNVVNU77yJ5L+d5oyB5LiA6Ie044CCXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vZWNvbWZlL3NwZWMvYmxvYi9tYXN0ZXIvbGVzcy1jb2RlLXN0eWxlLm1kIyVFNiU5NSVCMCVFNSU4MCVCQ1xuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5pbXBvcnQge2dldExpbmVDb250ZW50LCBjaGFuZ2VDb2xvckJ5SW5kZXh9IGZyb20gJy4uL3V0aWwnO1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICog6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdsZWFkaW5nLXplcm8nO1xuXG4vKipcbiAqIOmUmeivr+S/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ1doZW4gdmFsdWUgaXMgYmV0d2VlbiAwIC0gMSBkZWNpbWFsLCBvbWl0dGluZyB0aGUgaW50ZWdlciBwYXJ0IG9mIHRoZSBgMGAnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLndhbGtEZWNscyhkZWNsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gcG9zdGNzcy5saXN0LnNwYWNlKGRlY2wudmFsdWUpO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gZGVjbC5zb3VyY2U7XG4gICAgICAgICAgICBjb25zdCBsaW5lTnVtID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtZXJpY1ZhbCA9IHBhcnNlRmxvYXQocGFydCk7XG4gICAgICAgICAgICAgICAgaWYgKG51bWVyaWNWYWwgPCAxICYmIG51bWVyaWNWYWwgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnNsaWNlKDAsIDIpID09PSAnMC4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmVOdW0sIHNvdXJjZS5pbnB1dC5jc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lTnVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogbGluZUNvbnRlbnQuaW5kZXhPZihwYXJ0KSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbmdlQ29sb3JCeUluZGV4KGxpbmVDb250ZW50LCBsaW5lQ29udGVudC5pbmRleE9mKHBhcnQpLCBwYXJ0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4pO1xuIl19