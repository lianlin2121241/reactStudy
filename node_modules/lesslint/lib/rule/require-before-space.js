'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

'use strict';

/**
 * 规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file 选择器和 { 之间必须（MUST）保留一个空格。
 *       https://github.com/ecomfe/spec/blob/master/less-code-style.md#%E5%B1%9E%E6%80%A7%E5%8F%98%E9%87%8F
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'require-before-space';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Must contain spaces before the `{`';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        Array.prototype.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {
            css.walkRules(function (rule) {
                // 只有 { 时，才能用 between 处理，其他符号的 require-before-space 规则还未实现
                if (!rule.ruleWithoutBody // 排除 mixin 调用
                && rule.raws.between === '' && realRuleVal.indexOf('{') !== -1) {
                    var source = rule.source;
                    var line = source.start.line;
                    var col = source.start.column + rule.selector.length;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';
                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: MSG,
                        colorMessage: '`' + lineContent.replace('{', _chalk2.default.magenta('{')) + '` ' + _chalk2.default.grey(MSG)
                    });
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3JlcXVpcmUtYmVmb3JlLXNwYWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFNQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFFQTs7Ozs7O0FBWkE7Ozs7OztBQWtCQSxJQUFNLFdBQVcsc0JBQWpCOztBQUVBOzs7Ozs7QUFNQSxJQUFNLE1BQU0sb0NBQVo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTSx3QkFBUSxrQkFBUSxNQUFSLENBQWUsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUMsR0FBRCxFQUFNLE1BQU4sRUFBaUI7QUFDYixZQUFNLFVBQVUsS0FBSyxPQUFyQjtBQUNBLFlBQU0sY0FBYyxFQUFwQjtBQUNBLGNBQU0sU0FBTixDQUFnQixJQUFoQixDQUFxQixNQUFNLE9BQU4sQ0FBYyxPQUFkLElBQXlCLE9BQXpCLEdBQW1DLE1BQXhELEVBQWdFLFdBQWhFLEVBQTZFLE9BQTdFOztBQUVBLFlBQUksWUFBWSxNQUFoQixFQUF3QjtBQUNwQixnQkFBSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEI7QUFDQSxvQkFDSSxDQUFDLEtBQUssZUFBTixDQUFzQjtBQUF0QixtQkFDTyxLQUFLLElBQUwsQ0FBVSxPQUFWLEtBQXNCLEVBRDdCLElBQ21DLFlBQVksT0FBWixDQUFvQixHQUFwQixNQUE2QixDQUFDLENBRnJFLEVBR007QUFDRix3QkFBTSxTQUFTLEtBQUssTUFBcEI7QUFDQSx3QkFBTSxPQUFPLE9BQU8sS0FBUCxDQUFhLElBQTFCO0FBQ0Esd0JBQU0sTUFBTSxPQUFPLEtBQVAsQ0FBYSxNQUFiLEdBQXNCLEtBQUssUUFBTCxDQUFjLE1BQWhEO0FBQ0Esd0JBQU0sY0FBYywwQkFBZSxJQUFmLEVBQXFCLE9BQU8sS0FBUCxDQUFhLEdBQWxDLEtBQTBDLEVBQTlEO0FBQ0EsMkJBQU8sSUFBUCxDQUFZLFFBQVosRUFBc0I7QUFDbEIsOEJBQU0sSUFEWTtBQUVsQixrQ0FBVSxRQUZRO0FBR2xCLDhCQUFNLElBSFk7QUFJbEIsNkJBQUssR0FKYTtBQUtsQixpQ0FBUyxHQUxTO0FBTWxCLHNDQUFjLE1BQ1IsWUFBWSxPQUFaLENBQ0UsR0FERixFQUVFLGdCQUFNLE9BQU4sQ0FBYyxHQUFkLENBRkYsQ0FEUSxHQUtSLElBTFEsR0FNUixnQkFBTSxJQUFOLENBQVcsR0FBWDtBQVpZLHFCQUF0QjtBQWNIO0FBQ0osYUF6QkQ7QUEwQkg7QUFDSixLQWxDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6InJlcXVpcmUtYmVmb3JlLXNwYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSDpgInmi6nlmajlkowgeyDkuYvpl7Tlv4XpobvvvIhNVVNU77yJ5L+d55WZ5LiA5Liq56m65qC844CCXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vZWNvbWZlL3NwZWMvYmxvYi9tYXN0ZXIvbGVzcy1jb2RlLXN0eWxlLm1kIyVFNSVCMSU5RSVFNiU4MCVBNyVFNSU4RiU5OCVFOSU4NyU4RlxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAncmVxdWlyZS1iZWZvcmUtc3BhY2UnO1xuXG4vKipcbiAqIOmUmeivr+S/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ011c3QgY29udGFpbiBzcGFjZXMgYmVmb3JlIHRoZSBge2AnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCBydWxlVmFsID0gb3B0cy5ydWxlVmFsO1xuICAgICAgICBjb25zdCByZWFsUnVsZVZhbCA9IFtdO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaFtBcnJheS5pc0FycmF5KHJ1bGVWYWwpID8gJ2FwcGx5JyA6ICdjYWxsJ10ocmVhbFJ1bGVWYWwsIHJ1bGVWYWwpO1xuXG4gICAgICAgIGlmIChyZWFsUnVsZVZhbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgLy8g5Y+q5pyJIHsg5pe277yM5omN6IO955SoIGJldHdlZW4g5aSE55CG77yM5YW25LuW56ym5Y+355qEIHJlcXVpcmUtYmVmb3JlLXNwYWNlIOinhOWImei/mOacquWunueOsFxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgIXJ1bGUucnVsZVdpdGhvdXRCb2R5IC8vIOaOkumZpCBtaXhpbiDosIPnlKhcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHJ1bGUucmF3cy5iZXR3ZWVuID09PSAnJyAmJiByZWFsUnVsZVZhbC5pbmRleE9mKCd7JykgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBydWxlLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uICsgcnVsZS5zZWxlY3Rvci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcykgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBydWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGsubWFnZW50YSgneycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==