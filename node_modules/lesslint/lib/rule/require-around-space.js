'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _postcssValuesParser = require('postcss-values-parser');

var _postcssValuesParser2 = _interopRequireDefault(_postcssValuesParser);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file 运算符检验
 *       + / - / * / / 四个运算符两侧必须（MUST）保留一个空格。
 *       https://github.com/ecomfe/spec/blob/master/less-code-style.md#%E8%BF%90%E7%AE%97
 * @author ielgnaw(wuji0223@gmail.com)
 */

'use strict';

/**
 * 规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'require-around-space';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = '`+`、`-`、`*`、`/` four operators on both sides must keep a space';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        /* jshint maxcomplexity:false */
        css.walkDecls(function (decl) {
            var valueAst = (0, _postcssValuesParser2.default)(decl.value).parse();

            valueAst.walk(function (child) {
                if (child.type !== 'operator') {
                    return;
                }

                var parent = child.parent;

                // 当前 child 的索引

                var index = parent.index(child);

                // child 的后一个元素
                var nextElem = parent.nodes[index + 1];

                // child 的前一个元素
                var prevElem = parent.nodes[index - 1];

                // 忽略负数 -1
                if (child.value === '-' && (child.raws.before || decl.raws.between) && nextElem.type === 'number' && !nextElem.raws.before) {
                    return;
                }

                // 忽略变量 -@foo
                if (child.value === '-' && (child.raws.before || decl.raws.between) && nextElem.type === 'atword' && !nextElem.raws.before) {
                    return;
                }

                // 忽略 font-size/line-height 简写定义
                if (decl.prop === 'font' && child.value === '/' && prevElem.type === 'number' && nextElem.type === 'number') {
                    return;
                }

                // 判断 operator 前面是否有空格
                var isBeforeValid = child.raws.before === ' ' || /^\s/.test(child.raws.before);

                // 判断 operator 后面是否有空格
                var isAfterValid = nextElem.raws.before === ' ' || /\s$/.test(nextElem.raws.before);

                if (!isBeforeValid || !isAfterValid) {
                    var problemElem = !/\s$/.test(child.raws.before) ? child : nextElem;
                    var source = decl.source;
                    var prop = decl.prop;
                    var raws = decl.raws;

                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css, true);
                    var col = 0 + source.start.column + prop.length + raws.between.length + problemElem.source.start.column - 1 - (isBeforeValid ? child.value.length : 0);

                    result.warn(RULENAME, {
                        node: decl,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: '`' + lineContent + '` ' + MSG,
                        colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, col + child.value.length) + '` ' + _chalk2.default.grey(MSG)
                    });
                }
            });
        });
    };
});
//# sourceMappingURL=data:application/json;base64,