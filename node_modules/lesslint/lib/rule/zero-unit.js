'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

'use strict';

/**
 * 规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file 0 值检验
 *       属性值为 0 时，必须省略可省的单位（长度单位如 px、em，不包括时间、角度等如 s、deg）
 *       https://github.com/ecomfe/spec/blob/master/less-code-style.md#0-%E5%80%BC
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'zero-unit';

/**
 * css 长度单位集合
 * https://developer.mozilla.org/en-US/docs/Web/CSS/length
 *
 * @const
 * @type {Array}
 */
var LENGTH_UNITS = [
// Relative length units
'em', 'ex', 'ch', 'rem', // Font-relative lengths
'vh', 'vw', 'vmin', 'vmax', // Viewport-percentage lengths

// Absolute length units
'px', 'mm', 'cm', 'in', 'pt', 'pc'];

/**
 * 数字正则
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_NUMERIC = /\d+[\.\d]*/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Values of 0 shouldn\'t have units specified';

/**
 * 行号的缓存，防止同一行多次报错
 *
 * @type {number}
 */
var lineCache = 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        lineCache = 0;

        css.walkDecls(function (decl) {
            var parts = _postcss2.default.list.space(decl.value);
            for (var i = 0, len = parts.length; i < len; i++) {
                var part = parts[i];
                var numericVal = parseFloat(part);

                // TODO: background-color: darken(#fff, 0px);
                if (numericVal === 0) {
                    var unit = part.replace(PATTERN_NUMERIC, '');
                    var source = decl.source;
                    var line = source.start.line;
                    if (LENGTH_UNITS.indexOf(unit) > -1 && lineCache !== line) {
                        lineCache = line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: source.start.column + decl.prop.length + decl.raws.between.length,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(decl.value, _chalk2.default.magenta(decl.value)) + '` ' + _chalk2.default.grey(MSG)
                        });
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3plcm8tdW5pdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBRUE7Ozs7OztBQWJBOzs7Ozs7O0FBbUJBLElBQU0sV0FBVyxXQUFqQjs7QUFFQTs7Ozs7OztBQU9BLElBQU0sZUFBZTtBQUNqQjtBQUNBLElBRmlCLEVBRVgsSUFGVyxFQUVMLElBRkssRUFFQyxLQUZELEVBRVE7QUFDekIsSUFIaUIsRUFHWCxJQUhXLEVBR0wsTUFISyxFQUdHLE1BSEgsRUFHVzs7QUFFNUI7QUFDQSxJQU5pQixFQU1YLElBTlcsRUFNTCxJQU5LLEVBTUMsSUFORCxFQU1PLElBTlAsRUFNYSxJQU5iLENBQXJCOztBQVNBOzs7Ozs7QUFNQSxJQUFNLGtCQUFrQixZQUF4Qjs7QUFFQTs7Ozs7O0FBTUEsSUFBTSxNQUFNLDZDQUFaOztBQUVBOzs7OztBQUtBLElBQUksWUFBWSxDQUFoQjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNLHdCQUFRLGtCQUFRLE1BQVIsQ0FBZSxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQyxHQUFELEVBQU0sTUFBTixFQUFpQjtBQUNiLFlBQUksQ0FBQyxLQUFLLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVELG9CQUFZLENBQVo7O0FBRUEsWUFBSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQU0sUUFBUSxrQkFBUSxJQUFSLENBQWEsS0FBYixDQUFtQixLQUFLLEtBQXhCLENBQWQ7QUFDQSxpQkFBSyxJQUFJLElBQUksQ0FBUixFQUFXLE1BQU0sTUFBTSxNQUE1QixFQUFvQyxJQUFJLEdBQXhDLEVBQTZDLEdBQTdDLEVBQWtEO0FBQzlDLG9CQUFNLE9BQU8sTUFBTSxDQUFOLENBQWI7QUFDQSxvQkFBTSxhQUFhLFdBQVcsSUFBWCxDQUFuQjs7QUFFQTtBQUNBLG9CQUFJLGVBQWUsQ0FBbkIsRUFBc0I7QUFDbEIsd0JBQU0sT0FBTyxLQUFLLE9BQUwsQ0FBYSxlQUFiLEVBQThCLEVBQTlCLENBQWI7QUFDQSx3QkFBTSxTQUFTLEtBQUssTUFBcEI7QUFDQSx3QkFBTSxPQUFPLE9BQU8sS0FBUCxDQUFhLElBQTFCO0FBQ0Esd0JBQUksYUFBYSxPQUFiLENBQXFCLElBQXJCLElBQTZCLENBQUMsQ0FBOUIsSUFBbUMsY0FBYyxJQUFyRCxFQUEyRDtBQUN2RCxvQ0FBWSxJQUFaO0FBQ0EsNEJBQU0sY0FBYywwQkFBZSxJQUFmLEVBQXFCLE9BQU8sS0FBUCxDQUFhLEdBQWxDLENBQXBCO0FBQ0EsK0JBQU8sSUFBUCxDQUFZLFFBQVosRUFBc0I7QUFDbEIsa0NBQU0sSUFEWTtBQUVsQixzQ0FBVSxRQUZRO0FBR2xCLGtDQUFNLElBSFk7QUFJbEIsaUNBQUssT0FBTyxLQUFQLENBQWEsTUFBYixHQUFzQixLQUFLLElBQUwsQ0FBVSxNQUFoQyxHQUF5QyxLQUFLLElBQUwsQ0FBVSxPQUFWLENBQWtCLE1BSjlDO0FBS2xCLHFDQUFTLEdBTFM7QUFNbEIsMENBQWMsTUFDUixZQUFZLE9BQVosQ0FDRSxLQUFLLEtBRFAsRUFFRSxnQkFBTSxPQUFOLENBQWMsS0FBSyxLQUFuQixDQUZGLENBRFEsR0FLUixJQUxRLEdBTVIsZ0JBQU0sSUFBTixDQUFXLEdBQVg7QUFaWSx5QkFBdEI7QUFjSDtBQUNKO0FBQ0o7QUFDSixTQS9CRDtBQWdDSCxLQXhDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6Inplcm8tdW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgMCDlgLzmo4DpqoxcbiAqICAgICAgIOWxnuaAp+WAvOS4uiAwIOaXtu+8jOW/hemhu+ecgeeVpeWPr+ecgeeahOWNleS9je+8iOmVv+W6puWNleS9jeWmgiBweOOAgWVt77yM5LiN5YyF5ous5pe26Ze044CB6KeS5bqm562J5aaCIHPjgIFkZWfvvIlcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9lY29tZmUvc3BlYy9ibG9iL21hc3Rlci9sZXNzLWNvZGUtc3R5bGUubWQjMC0lRTUlODAlQkNcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiDop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ3plcm8tdW5pdCc7XG5cbi8qKlxuICogY3NzIOmVv+W6puWNleS9jembhuWQiFxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xlbmd0aFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge0FycmF5fVxuICovXG5jb25zdCBMRU5HVEhfVU5JVFMgPSBbXG4gICAgLy8gUmVsYXRpdmUgbGVuZ3RoIHVuaXRzXG4gICAgJ2VtJywgJ2V4JywgJ2NoJywgJ3JlbScsIC8vIEZvbnQtcmVsYXRpdmUgbGVuZ3Roc1xuICAgICd2aCcsICd2dycsICd2bWluJywgJ3ZtYXgnLCAvLyBWaWV3cG9ydC1wZXJjZW50YWdlIGxlbmd0aHNcblxuICAgIC8vIEFic29sdXRlIGxlbmd0aCB1bml0c1xuICAgICdweCcsICdtbScsICdjbScsICdpbicsICdwdCcsICdwYydcbl07XG5cbi8qKlxuICog5pWw5a2X5q2j5YiZXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCBQQVRURVJOX05VTUVSSUMgPSAvXFxkK1tcXC5cXGRdKi87XG5cbi8qKlxuICog6ZSZ6K+v5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnVmFsdWVzIG9mIDAgc2hvdWxkblxcJ3QgaGF2ZSB1bml0cyBzcGVjaWZpZWQnO1xuXG4vKipcbiAqIOihjOWPt+eahOe8k+WtmO+8jOmYsuatouWQjOS4gOihjOWkmuasoeaKpemUmVxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmxldCBsaW5lQ2FjaGUgPSAwO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGluZUNhY2hlID0gMDtcblxuICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBwb3N0Y3NzLmxpc3Quc3BhY2UoZGVjbC52YWx1ZSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtZXJpY1ZhbCA9IHBhcnNlRmxvYXQocGFydCk7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZW4oI2ZmZiwgMHB4KTtcbiAgICAgICAgICAgICAgICBpZiAobnVtZXJpY1ZhbCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bml0ID0gcGFydC5yZXBsYWNlKFBBVFRFUk5fTlVNRVJJQywgJycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTEVOR1RIX1VOSVRTLmluZGV4T2YodW5pdCkgPiAtMSAmJiBsaW5lQ2FjaGUgIT09IGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDYWNoZSA9IGxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogc291cmNlLnN0YXJ0LmNvbHVtbiArIGRlY2wucHJvcC5sZW5ndGggKyBkZWNsLnJhd3MuYmV0d2Vlbi5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2wudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFsay5tYWdlbnRhKGRlY2wudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==