'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _less = require('less');

var _less2 = _interopRequireDefault(_less);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file 颜色检验
 *       颜色定义必须（MUST）使用 #RRGGBB 格式定义，并在可能时尽量（SHOULD）缩写为 #RGB 形式，且避免直接使用颜色名称与 rgb() 表达式。
 *       https://github.com/ecomfe/spec/blob/master/less-code-style.md#%E9%A2%9C%E8%89%B2
 * @author ielgnaw(wuji0223@gmail.com)
 */

'use strict';

/**
 * 规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'hex-color';

/**
 * Less 中的所有颜色值
 *
 * @const
 * @type {Object}
 */
var LESS_COLORS = _less2.default.data.colors;

/**
 * 对 Less 中的所有颜色值做处理，便于之后正则
 *
 * @const
 * @return {string} 字符串
 */
// const namedColors = (function () {
//     let ret = '';
//     for (let key of Object.keys(LESS_COLORS)) {
//         ret += key + '|';
//     }
//     return ret.slice(0, -1); // 去掉最后一个 |
// })();

/**
 * 匹配颜色名的正则
 *
 * @const
 * @type {RegExp}
 */
// const PATTERN_NAMED_COLOR_EXP = new RegExp('\\b\\s?:\\s*(' + namedColors + ')', 'g');
// console.log(PATTERN_NAMED_COLOR_EXP);
// console.log();

/**
 * 匹配 rgb, hsl 颜色表达式的正则
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_COLOR_EXP = /(\brgb\b|\bhsl\b)/gi;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = '' + 'Color value must use the hexadecimal mark forms such as `#RRGGBB`.' + ' Don\'t use RGB、HSL expression';

/**
 * 添加报错信息
 *
 * @param {Object} node decl 对象
 * @param {Object} result postcss 转换的结果对象
 */
var addWarn = function addWarn(decl, result) {
    var source = decl.source;
    var prop = decl.prop;
    var raws = decl.raws;

    var line = source.start.line;
    var lineContent = (0, _util.getLineContent)(line, source.input.css, true);
    var col = source.start.column + prop.length + raws.between.length;
    result.warn(RULENAME, {
        node: decl,
        ruleName: RULENAME,
        line: line,
        col: col,
        message: MSG,
        colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(MSG)
    });
};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkDecls(function (decl) {
            var value = decl.value;
            if (LESS_COLORS[value]) {
                addWarn(decl, result);
            } else {
                var match = null;
                /* eslint-disable no-extra-boolean-cast */
                while (!!(match = PATTERN_COLOR_EXP.exec(value))) {
                    addWarn(decl, result);
                }
                /* eslint-enable no-extra-boolean-cast */
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2hleC1jb2xvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFWQTs7Ozs7OztBQVlBOztBQUVBOzs7Ozs7QUFNQSxJQUFNLFdBQVcsV0FBakI7O0FBRUE7Ozs7OztBQU1BLElBQU0sY0FBYyxlQUFLLElBQUwsQ0FBVSxNQUE5Qjs7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7O0FBTUEsSUFBTSxvQkFBb0IscUJBQTFCOztBQUVBOzs7Ozs7QUFNQSxJQUFNLE1BQU0sS0FDTixvRUFETSxHQUVOLGdDQUZOOztBQUlBOzs7Ozs7QUFNQSxJQUFNLFVBQVUsU0FBVixPQUFVLENBQUMsSUFBRCxFQUFPLE1BQVAsRUFBa0I7QUFBQSxRQUN2QixNQUR1QixHQUNELElBREMsQ0FDdkIsTUFEdUI7QUFBQSxRQUNmLElBRGUsR0FDRCxJQURDLENBQ2YsSUFEZTtBQUFBLFFBQ1QsSUFEUyxHQUNELElBREMsQ0FDVCxJQURTOztBQUU5QixRQUFNLE9BQU8sT0FBTyxLQUFQLENBQWEsSUFBMUI7QUFDQSxRQUFNLGNBQWMsMEJBQWUsSUFBZixFQUFxQixPQUFPLEtBQVAsQ0FBYSxHQUFsQyxFQUF1QyxJQUF2QyxDQUFwQjtBQUNBLFFBQU0sTUFBTSxPQUFPLEtBQVAsQ0FBYSxNQUFiLEdBQXNCLEtBQUssTUFBM0IsR0FBb0MsS0FBSyxPQUFMLENBQWEsTUFBN0Q7QUFDQSxXQUFPLElBQVAsQ0FBWSxRQUFaLEVBQXNCO0FBQ2xCLGNBQU0sSUFEWTtBQUVsQixrQkFBVSxRQUZRO0FBR2xCLGNBQU0sSUFIWTtBQUlsQixhQUFLLEdBSmE7QUFLbEIsaUJBQVMsR0FMUztBQU1sQixzQkFBYyxNQUNSLHlDQUNFLFdBREYsRUFDZSxHQURmLEVBQ29CLE9BQU8sR0FBUCxDQUFXLE1BRC9CLENBRFEsR0FJUixJQUpRLEdBS1IsZ0JBQU0sSUFBTixDQUFXLEdBQVg7QUFYWSxLQUF0QjtBQWFILENBbEJEOztBQW9CQTs7Ozs7Ozs7QUFRTyxJQUFNLHdCQUFRLGtCQUFRLE1BQVIsQ0FBZSxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQyxHQUFELEVBQU0sTUFBTixFQUFpQjtBQUNiLFlBQUksQ0FBQyxLQUFLLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVELFlBQUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCLGdCQUFNLFFBQVEsS0FBSyxLQUFuQjtBQUNBLGdCQUFJLFlBQVksS0FBWixDQUFKLEVBQXdCO0FBQ3BCLHdCQUFRLElBQVIsRUFBYyxNQUFkO0FBQ0gsYUFGRCxNQUdLO0FBQ0Qsb0JBQUksUUFBUSxJQUFaO0FBQ0E7QUFDQSx1QkFBTyxDQUFDLEVBQUUsUUFBUSxrQkFBa0IsSUFBbEIsQ0FBdUIsS0FBdkIsQ0FBVixDQUFSLEVBQWtEO0FBQzlDLDRCQUFRLElBQVIsRUFBYyxNQUFkO0FBQ0g7QUFDRDtBQUNIO0FBQ0osU0FiRDtBQWNILEtBcEJ5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiaGV4LWNvbG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSDpopzoibLmo4DpqoxcbiAqICAgICAgIOminOiJsuWumuS5ieW/hemhu++8iE1VU1TvvInkvb/nlKggI1JSR0dCQiDmoLzlvI/lrprkuYnvvIzlubblnKjlj6/og73ml7blsL3ph4/vvIhTSE9VTETvvInnvKnlhpnkuLogI1JHQiDlvaLlvI/vvIzkuJTpgb/lhY3nm7TmjqXkvb/nlKjpopzoibLlkI3np7DkuI4gcmdiKCkg6KGo6L6+5byP44CCXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vZWNvbWZlL3NwZWMvYmxvYi9tYXN0ZXIvbGVzcy1jb2RlLXN0eWxlLm1kIyVFOSVBMiU5QyVFOCU4OSVCMlxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5pbXBvcnQgbGVzcyBmcm9tICdsZXNzJztcbmltcG9ydCB7Z2V0TGluZUNvbnRlbnQsIGNoYW5nZUNvbG9yQnlTdGFydEFuZEVuZEluZGV4fSBmcm9tICcuLi91dGlsJztcblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnaGV4LWNvbG9yJztcblxuLyoqXG4gKiBMZXNzIOS4reeahOaJgOacieminOiJsuWAvFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgTEVTU19DT0xPUlMgPSBsZXNzLmRhdGEuY29sb3JzO1xuXG4vKipcbiAqIOWvuSBMZXNzIOS4reeahOaJgOacieminOiJsuWAvOWBmuWkhOeQhu+8jOS+v+S6juS5i+WQjuato+WImVxuICpcbiAqIEBjb25zdFxuICogQHJldHVybiB7c3RyaW5nfSDlrZfnrKbkuLJcbiAqL1xuLy8gY29uc3QgbmFtZWRDb2xvcnMgPSAoZnVuY3Rpb24gKCkge1xuLy8gICAgIGxldCByZXQgPSAnJztcbi8vICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoTEVTU19DT0xPUlMpKSB7XG4vLyAgICAgICAgIHJldCArPSBrZXkgKyAnfCc7XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiByZXQuc2xpY2UoMCwgLTEpOyAvLyDljrvmjonmnIDlkI7kuIDkuKogfFxuLy8gfSkoKTtcblxuLyoqXG4gKiDljLnphY3popzoibLlkI3nmoTmraPliJlcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbi8vIGNvbnN0IFBBVFRFUk5fTkFNRURfQ09MT1JfRVhQID0gbmV3IFJlZ0V4cCgnXFxcXGJcXFxccz86XFxcXHMqKCcgKyBuYW1lZENvbG9ycyArICcpJywgJ2cnKTtcbi8vIGNvbnNvbGUubG9nKFBBVFRFUk5fTkFNRURfQ09MT1JfRVhQKTtcbi8vIGNvbnNvbGUubG9nKCk7XG5cbi8qKlxuICog5Yy56YWNIHJnYiwgaHNsIOminOiJsuihqOi+vuW8j+eahOato+WImVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT0xPUl9FWFAgPSAvKFxcYnJnYlxcYnxcXGJoc2xcXGIpL2dpO1xuXG4vKipcbiAqIOmUmeivr+S/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJydcbiAgICArICdDb2xvciB2YWx1ZSBtdXN0IHVzZSB0aGUgaGV4YWRlY2ltYWwgbWFyayBmb3JtcyBzdWNoIGFzIGAjUlJHR0JCYC4nXG4gICAgKyAnIERvblxcJ3QgdXNlIFJHQuOAgUhTTCBleHByZXNzaW9uJztcblxuLyoqXG4gKiDmt7vliqDmiqXplJnkv6Hmga9cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBkZWNsIOWvueixoVxuICogQHBhcmFtIHtPYmplY3R9IHJlc3VsdCBwb3N0Y3NzIOi9rOaNoueahOe7k+aenOWvueixoVxuICovXG5jb25zdCBhZGRXYXJuID0gKGRlY2wsIHJlc3VsdCkgPT4ge1xuICAgIGNvbnN0IHtzb3VyY2UsIHByb3AsIHJhd3N9ID0gZGVjbDtcbiAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzLCB0cnVlKTtcbiAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uICsgcHJvcC5sZW5ndGggKyByYXdzLmJldHdlZW4ubGVuZ3RoO1xuICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgY29sOiBjb2wsXG4gICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICsgY2hhbmdlQ29sb3JCeVN0YXJ0QW5kRW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgbGluZUNvbnRlbnQsIGNvbCwgc291cmNlLmVuZC5jb2x1bW5cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICB9KTtcbn07XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZWNsLnZhbHVlO1xuICAgICAgICAgICAgaWYgKExFU1NfQ09MT1JTW3ZhbHVlXSkge1xuICAgICAgICAgICAgICAgIGFkZFdhcm4oZGVjbCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0ICovXG4gICAgICAgICAgICAgICAgd2hpbGUgKCEhKG1hdGNoID0gUEFUVEVSTl9DT0xPUl9FWFAuZXhlYyh2YWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFdhcm4oZGVjbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1leHRyYS1ib29sZWFuLWNhc3QgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==