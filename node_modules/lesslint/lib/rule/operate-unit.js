'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _postcssValuesParser = require('postcss-values-parser');

var _postcssValuesParser2 = _interopRequireDefault(_postcssValuesParser);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file 运算符检验
 *       + / - 两侧的操作数必须（MUST）有相同的单位，如果其中一个是变量，另一个数值必须（MUST）书写单位。
 *       https://github.com/ecomfe/spec/blob/master/less-code-style.md#%E8%BF%90%E7%AE%97
 * @author ielgnaw(wuji0223@gmail.com)
 */

'use strict';

/**
 * 规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'operate-unit';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = '' + '`+`、`-` on both sides of the operand must have the same unit, ' + 'if one side has unit, the other side must has unit';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        // TODO:
        // `@a: 1 + 2;` is walkDecls
        // `@a : 1 + 2;` is walkAtRules 这种情况还未处理

        /* jshint maxcomplexity:false */
        css.walkDecls(function (decl) {
            var valueAst = (0, _postcssValuesParser2.default)(decl.value).parse();

            valueAst.walk(function (child) {
                if (child.type !== 'operator' || child.value !== '+' && child.value !== '-') {
                    return;
                }

                var parent = child.parent;

                // 当前 child 的索引

                var index = parent.index(child);

                // child 的后一个元素
                var nextElem = parent.nodes[index + 1];

                // child 的前一个元素
                var prevElem = parent.nodes[index - 1] || {};

                var problemElem = null;

                // 后一个是变量
                if (nextElem.type === 'atword' && prevElem.type !== 'atword') {
                    if (!prevElem.unit) {
                        problemElem = prevElem;
                    }
                }

                // 前一个是变量
                if (prevElem.type === 'atword' && nextElem.type !== 'atword') {
                    if (!nextElem.unit) {
                        problemElem = nextElem;
                    }
                }

                if (problemElem) {
                    var source = decl.source;
                    var prop = decl.prop;
                    var raws = decl.raws;

                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css, true);
                    var col = source.start.column + prop.length + raws.between.length + problemElem.source.start.column - 1;

                    result.warn(RULENAME, {
                        node: decl,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: '`' + lineContent + '` ' + MSG,
                        colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, col + problemElem.value.length) + '` ' + _chalk2.default.grey(MSG)
                    });
                }
            });
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL29wZXJhdGUtdW5pdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFYQTs7Ozs7OztBQWFBOztBQUVBOzs7Ozs7QUFNQSxJQUFNLFdBQVcsY0FBakI7O0FBRUE7Ozs7OztBQU1BLElBQU0sTUFBTSxLQUNOLGdFQURNLEdBRU4sb0RBRk47O0FBSUE7Ozs7Ozs7O0FBUU8sSUFBTSx3QkFBUSxrQkFBUSxNQUFSLENBQWUsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUMsR0FBRCxFQUFNLE1BQU4sRUFBaUI7QUFDYixZQUFJLENBQUMsS0FBSyxPQUFWLEVBQW1CO0FBQ2Y7QUFDSDs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFJLFNBQUosQ0FBYyxnQkFBUTtBQUNsQixnQkFBTSxXQUFXLG1DQUFPLEtBQUssS0FBWixFQUFtQixLQUFuQixFQUFqQjs7QUFFQSxxQkFBUyxJQUFULENBQWMsaUJBQVM7QUFDbkIsb0JBQUksTUFBTSxJQUFOLEtBQWUsVUFBZixJQUE4QixNQUFNLEtBQU4sS0FBZ0IsR0FBaEIsSUFBdUIsTUFBTSxLQUFOLEtBQWdCLEdBQXpFLEVBQStFO0FBQzNFO0FBQ0g7O0FBSGtCLG9CQUtaLE1BTFksR0FLRixLQUxFLENBS1osTUFMWTs7QUFPbkI7O0FBQ0Esb0JBQU0sUUFBUSxPQUFPLEtBQVAsQ0FBYSxLQUFiLENBQWQ7O0FBRUE7QUFDQSxvQkFBTSxXQUFXLE9BQU8sS0FBUCxDQUFhLFFBQVEsQ0FBckIsQ0FBakI7O0FBRUE7QUFDQSxvQkFBTSxXQUFXLE9BQU8sS0FBUCxDQUFhLFFBQVEsQ0FBckIsS0FBMkIsRUFBNUM7O0FBRUEsb0JBQUksY0FBYyxJQUFsQjs7QUFFQTtBQUNBLG9CQUFJLFNBQVMsSUFBVCxLQUFrQixRQUFsQixJQUE4QixTQUFTLElBQVQsS0FBa0IsUUFBcEQsRUFBOEQ7QUFDMUQsd0JBQUksQ0FBQyxTQUFTLElBQWQsRUFBb0I7QUFDaEIsc0NBQWMsUUFBZDtBQUNIO0FBQ0o7O0FBRUQ7QUFDQSxvQkFBSSxTQUFTLElBQVQsS0FBa0IsUUFBbEIsSUFBOEIsU0FBUyxJQUFULEtBQWtCLFFBQXBELEVBQThEO0FBQzFELHdCQUFJLENBQUMsU0FBUyxJQUFkLEVBQW9CO0FBQ2hCLHNDQUFjLFFBQWQ7QUFDSDtBQUNKOztBQUVELG9CQUFJLFdBQUosRUFBaUI7QUFBQSx3QkFDTixNQURNLEdBQ2dCLElBRGhCLENBQ04sTUFETTtBQUFBLHdCQUNFLElBREYsR0FDZ0IsSUFEaEIsQ0FDRSxJQURGO0FBQUEsd0JBQ1EsSUFEUixHQUNnQixJQURoQixDQUNRLElBRFI7O0FBRWIsd0JBQU0sT0FBTyxPQUFPLEtBQVAsQ0FBYSxJQUExQjtBQUNBLHdCQUFNLGNBQWMsMEJBQWUsSUFBZixFQUFxQixPQUFPLEtBQVAsQ0FBYSxHQUFsQyxFQUF1QyxJQUF2QyxDQUFwQjtBQUNBLHdCQUFNLE1BQ0EsT0FBTyxLQUFQLENBQWEsTUFBYixHQUFzQixLQUFLLE1BQTNCLEdBQW9DLEtBQUssT0FBTCxDQUFhLE1BQWpELEdBQTBELFlBQVksTUFBWixDQUFtQixLQUFuQixDQUF5QixNQUFuRixHQUE0RixDQURsRzs7QUFHQSwyQkFBTyxJQUFQLENBQVksUUFBWixFQUFzQjtBQUNsQiw4QkFBTSxJQURZO0FBRWxCLGtDQUFVLFFBRlE7QUFHbEIsOEJBQU0sSUFIWTtBQUlsQiw2QkFBSyxHQUphO0FBS2xCLGlDQUFTLE1BQU0sV0FBTixHQUFvQixJQUFwQixHQUEyQixHQUxsQjtBQU1sQixzQ0FBYyxNQUNSLHlDQUE4QixXQUE5QixFQUEyQyxHQUEzQyxFQUFnRCxNQUFNLFlBQVksS0FBWixDQUFrQixNQUF4RSxDQURRLEdBRVIsSUFGUSxHQUdSLGdCQUFNLElBQU4sQ0FBVyxHQUFYO0FBVFkscUJBQXRCO0FBV0g7QUFDSixhQW5ERDtBQW9ESCxTQXZERDtBQXdESCxLQW5FeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6Im9wZXJhdGUtdW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUg6L+Q566X56ym5qOA6aqMXG4gKiAgICAgICArIC8gLSDkuKTkvqfnmoTmk43kvZzmlbDlv4XpobvvvIhNVVNU77yJ5pyJ55u45ZCM55qE5Y2V5L2N77yM5aaC5p6c5YW25Lit5LiA5Liq5piv5Y+Y6YeP77yM5Y+m5LiA5Liq5pWw5YC85b+F6aG777yITVVTVO+8ieS5puWGmeWNleS9jeOAglxuICogICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2Vjb21mZS9zcGVjL2Jsb2IvbWFzdGVyL2xlc3MtY29kZS1zdHlsZS5tZCMlRTglQkYlOTAlRTclQUUlOTdcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuaW1wb3J0IHBhcnNlciBmcm9tICdwb3N0Y3NzLXZhbHVlcy1wYXJzZXInO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50LCBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleH0gZnJvbSAnLi4vdXRpbCc7XG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiDop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ29wZXJhdGUtdW5pdCc7XG5cbi8qKlxuICog6ZSZ6K+v5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnJ1xuICAgICsgJ2ArYOOAgWAtYCBvbiBib3RoIHNpZGVzIG9mIHRoZSBvcGVyYW5kIG11c3QgaGF2ZSB0aGUgc2FtZSB1bml0LCAnXG4gICAgKyAnaWYgb25lIHNpZGUgaGFzIHVuaXQsIHRoZSBvdGhlciBzaWRlIG11c3QgaGFzIHVuaXQnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzpcbiAgICAgICAgLy8gYEBhOiAxICsgMjtgIGlzIHdhbGtEZWNsc1xuICAgICAgICAvLyBgQGEgOiAxICsgMjtgIGlzIHdhbGtBdFJ1bGVzIOi/meenjeaDheWGtei/mOacquWkhOeQhlxuXG4gICAgICAgIC8qIGpzaGludCBtYXhjb21wbGV4aXR5OmZhbHNlICovXG4gICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUFzdCA9IHBhcnNlcihkZWNsLnZhbHVlKS5wYXJzZSgpO1xuXG4gICAgICAgICAgICB2YWx1ZUFzdC53YWxrKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQudHlwZSAhPT0gJ29wZXJhdG9yJyB8fCAoY2hpbGQudmFsdWUgIT09ICcrJyAmJiBjaGlsZC52YWx1ZSAhPT0gJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qge3BhcmVudH0gPSBjaGlsZDtcblxuICAgICAgICAgICAgICAgIC8vIOW9k+WJjSBjaGlsZCDnmoTntKLlvJVcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcmVudC5pbmRleChjaGlsZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGlsZCDnmoTlkI7kuIDkuKrlhYPntKBcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0RWxlbSA9IHBhcmVudC5ub2Rlc1tpbmRleCArIDFdO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hpbGQg55qE5YmN5LiA5Liq5YWD57SgXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkVsZW0gPSBwYXJlbnQubm9kZXNbaW5kZXggLSAxXSB8fCB7fTtcblxuICAgICAgICAgICAgICAgIGxldCBwcm9ibGVtRWxlbSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyDlkI7kuIDkuKrmmK/lj5jph49cbiAgICAgICAgICAgICAgICBpZiAobmV4dEVsZW0udHlwZSA9PT0gJ2F0d29yZCcgJiYgcHJldkVsZW0udHlwZSAhPT0gJ2F0d29yZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2RWxlbS51bml0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ibGVtRWxlbSA9IHByZXZFbGVtO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8g5YmN5LiA5Liq5piv5Y+Y6YePXG4gICAgICAgICAgICAgICAgaWYgKHByZXZFbGVtLnR5cGUgPT09ICdhdHdvcmQnICYmIG5leHRFbGVtLnR5cGUgIT09ICdhdHdvcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dEVsZW0udW5pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvYmxlbUVsZW0gPSBuZXh0RWxlbTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwcm9ibGVtRWxlbSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7c291cmNlLCBwcm9wLCByYXdzfSA9IGRlY2w7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sXG4gICAgICAgICAgICAgICAgICAgICAgICA9IHNvdXJjZS5zdGFydC5jb2x1bW4gKyBwcm9wLmxlbmd0aCArIHJhd3MuYmV0d2Vlbi5sZW5ndGggKyBwcm9ibGVtRWxlbS5zb3VyY2Uuc3RhcnQuY29sdW1uIC0gMTtcblxuICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdgJyArIGxpbmVDb250ZW50ICsgJ2AgJyArIE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleChsaW5lQ29udGVudCwgY29sLCBjb2wgKyBwcm9ibGVtRWxlbS52YWx1ZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbik7XG4iXX0=