'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.formatMsg = formatMsg;
exports.uniqueMsg = uniqueMsg;
exports.getCandidates = getCandidates;
exports.getIgnorePatterns = getIgnorePatterns;
exports.isIgnored = isIgnored;
exports.getLineContent = getLineContent;
exports.changeColorByIndex = changeColorByIndex;
exports.changeColorByStartAndEndIndex = changeColorByStartAndEndIndex;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _fs = require('fs');

var _edpCore = require('edp-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

'use strict';

/**
 * 调用给定的迭代函数 n 次,每一次传递 index 参数，调用迭代函数。
 * from underscore
 *
 * @param {number} n 迭代次数
 * @param {Function} iterator 处理函数
 * @param {Object} context 上下文
 *
 * @return {Array} 结果
 */
/**
 * @file 通用方法
 * @author ielgnaw(wuji0223@gmail.com)
 */

function times(n, iterator, context) {
    var accum = new Array(Math.max(0, n));
    for (var i = 0; i < n; i++) {
        accum[i] = iterator.call(context, i);
    }
    return accum;
}

/**
 * 格式化信息
 *
 * @param {string} msg 输出的信息
 * @param {number} spaceCount 信息前面空格的个数即缩进的长度
 *
 * @return {string} 格式化后的信息
 */
function formatMsg(msg) {
    var spaceCount = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

    var space = '';
    times(spaceCount, function () {
        space += ' ';
    });
    return space + msg;
}

/**
 * 去掉 error.messages 里面重复的信息
 *
 * @param {Array} msg error.messages
 *
 * @return {Array} 结果数组，是一个新数组
 */
function uniqueMsg(msg) {
    var ret = [];
    var tmp = [];
    for (var i = 0, j = 1, len = msg.length; i < len; i++, j++) {
        var cur = msg[i];
        if (!cur.uniqueFlag) {
            ret.push(cur);
        } else {
            if (tmp.indexOf(cur.uniqueFlag) === -1) {
                tmp.push(cur.uniqueFlag);
                ret.push(cur);
            }
        }
    }
    return ret;
}

/**
 * 根据参数以及模式匹配相应的文件
 *
 * @param {Array} args 文件
 * @param {Array} patterns minimatch 模式
 *
 * @return {Array.<string>} 匹配的文件集合
 */
function getCandidates(args, patterns) {
    var candidates = [];

    args = args.filter(function (item) {
        return item !== '.';
    });

    if (!args.length) {
        candidates = _edpCore.glob.sync(patterns);
    } else {
        var i = -1;
        var len = args.length;
        while (++i < len) {
            var target = args[i];
            if (!(0, _fs.existsSync)(target)) {
                _edpCore.log.warn('No such file or directory %s', target);
                continue;
            }

            var stat = (0, _fs.statSync)(target);
            if (stat.isDirectory()) {
                target = target.replace(/[\/|\\]+$/, '');
                candidates.push.apply(candidates, _edpCore.glob.sync(target + '/' + patterns[0]));
            }
            /* istanbul ignore else */
            else if (stat.isFile()) {
                    candidates.push(target);
                }
        }
    }

    return candidates;
}

/**
 * 获取忽略的 pattern
 *
 * @param {string} file 文件路径
 *
 * @return {Array.<string>} 结果
 */
function getIgnorePatterns(file) {
    if (!(0, _fs.existsSync)(file)) {
        return [];
    }

    var patterns = (0, _fs.readFileSync)(file, 'utf-8').split(/\r?\n/g);
    return patterns.filter(function (item) {
        return item.trim().length > 0 && item[0] !== '#';
    });
}

var _IGNORE_CACHE = {};

/**
 * 判断一下是否应该忽略这个文件.
 *
 * @param {string} file 需要检查的文件路径.
 * @param {string=} name ignore文件的名称.
 * @return {boolean}
 */
function isIgnored(file) {
    var name = arguments.length <= 1 || arguments[1] === undefined ? '.jshintignore' : arguments[1];

    var ignorePatterns = null;

    file = _edpCore.path.resolve(file);

    var key = name + '@' + _edpCore.path.dirname(file);
    if (_IGNORE_CACHE[key]) {
        ignorePatterns = _IGNORE_CACHE[key];
    } else {
        var options = {
            name: name,
            factory: function factory(item) {
                var config = {};
                getIgnorePatterns(item).forEach(function (line) {
                    config[line] = true;
                });
                return config;
            }
        };
        ignorePatterns = _edpCore.util.getConfig(_edpCore.path.dirname(file), options);

        _IGNORE_CACHE[key] = ignorePatterns;
    }

    var bizOrPkgRoot = process.cwd();

    try {
        bizOrPkgRoot = _edpCore.path.getRootDirectory();
    } catch (ex) {}

    var dirname = _edpCore.path.relative(bizOrPkgRoot, file);
    var isMatch = _edpCore.glob.match(dirname, Object.keys(ignorePatterns));

    return isMatch;
}

/**
 * 根据行号获取当前行的内容
 *
 * @param {number} line 行号
 * @param {string} fileData 文件内容
 * @param {boolean} notRemoveSpace 不去掉前面的空格，为 true，则不去掉，为 false 则去掉
 *                                 这是后加的参数，为了兼容之前的代码
 *
 * @return {string} 当前行内容
 */
function getLineContent(line, fileData, notRemoveSpace) {
    if (notRemoveSpace) {
        return fileData.split('\n')[line - 1];
    }
    // 去掉前面的缩进
    return fileData.split('\n')[line - 1].replace(/^\s*/, '');
}

/**
 * 根据索引把一行内容中的某个子串变色
 * 直接用正则匹配的话，可能会把这一行所有的 colorStr 给变色，所以要通过索引来判断
 *
 * @param {string} source 源字符串
 * @param {number} startIndex 开始的索引，通常是 col
 * @param {string} colorStr 要变色的字符串
 *
 * @return {string} 改变颜色后的字符串
 */
function changeColorByIndex(source, startIndex, colorStr) {
    var ret = '';
    if (source) {
        var colorStrLen = colorStr.length;
        var endIndex = startIndex + colorStrLen;
        ret = '' + source.slice(0, startIndex) // colorStr 前面的部分
        + _chalk2.default.magenta(source.slice(startIndex, endIndex)) // colorStr 的部分
        + source.slice(endIndex, source.length); // colorStr 后面的部分
    }
    return ret;
}

/**
 * 根据开始和结束的索引来高亮字符串的子串
 *
 * @param {string} source 源字符串
 * @param {number} startIndex 开始的索引
 * @param {number} endIndex 结束的索引
 *
 * @return {string} 改变颜色后的字符串
 */
function changeColorByStartAndEndIndex(source) {
    var startIndex = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
    var endIndex = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

    if (!source) {
        return '';
    }

    startIndex -= 1;
    endIndex -= 1;

    return '' + source.slice(0, startIndex) // colorStr 前面的部分
    + _chalk2.default.magenta(source.slice(startIndex, endIndex)) // colorStr 的部分
    + source.slice(endIndex, source.length); // colorStr 后面的部分
}

/**
 * 把错误信息放入 errors 数组中
 *
 * @param {string} ruleName 规则名称
 * @param {number} line 行号
 * @param {number} col 列号
 * @param {string} message 错误信息
 * @param {string} colorMessage 彩色错误信息
 */
// function addInvalidList(ruleName, line, col, message, colorMessage) {
//     this.push({
//         ruleName: ruleName,
//         line: line,
//         col: col,
//         message: message,
//         colorMessage: colorMessage
//     });
// }
//# sourceMappingURL=data:application/json;base64,