'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'unqualified-attributes';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file unqualified-attributes 的检测逻辑
 *       Unqualified attribute selectors are known to be slow
 *       https://github.com/CSSLint/csslint/wiki/Disallow-unqualified-attribute-selectors
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COMBINATORS = /[\s>+~]+/g;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Unqualified attribute selectors are known to be slow';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var selector = rule.selector,
                source = rule.source;

            var selectorGroup = selector.split(',');
            var line = source.start.line;
            var lineContent = (0, _util.getLineContent)(line, source.input.css);

            for (var i = 0, len = selectorGroup.length; i < len; i++) {
                var selectorInGroup = selectorGroup[i] || '';
                var segments = selectorInGroup.split(PATTERN_COMBINATORS);
                var l = segments.length;
                if (l) {
                    var last = segments[l - 1];
                    if (last.match(/\[.+?\](?::[^\s>+~\.#\[]+)?/g)) {
                        if (selectorInGroup.slice(0, 1) === '\n') {
                            line = line + 1;
                            lineContent = (0, _util.getLineContent)(line, source.input.css);
                        }
                        var col = lineContent.indexOf(segments[l - 1]) + 1;
                        result.warn(RULENAME, {
                            node: rule,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(segments[l - 1], _chalk2.default.magenta(segments[l - 1])) + '` ' + _chalk2.default.grey(MSG)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3VucXVhbGlmaWVkLWF0dHJpYnV0ZXMuanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJQQVRURVJOX0NPTUJJTkFUT1JTIiwiTVNHIiwiY2hlY2siLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtSdWxlcyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsInNlbGVjdG9yIiwicnVsZSIsInNvdXJjZSIsInNlbGVjdG9yR3JvdXAiLCJzcGxpdCIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJpIiwibGVuIiwibGVuZ3RoIiwic2VsZWN0b3JJbkdyb3VwIiwic2VnbWVudHMiLCJsIiwibGFzdCIsIm1hdGNoIiwic2xpY2UiLCJjb2wiLCJpbmRleE9mIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJyZXBsYWNlIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyx3QkFBakI7O0FBRUE7Ozs7OztBQXBCQTs7Ozs7OztBQTBCQSxJQUFNQyxzQkFBc0IsV0FBNUI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLE1BQU0sc0RBQVo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZUosUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNLLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFJLENBQUNDLEtBQUtDLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVESCxZQUFJSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUhpQixnQkFLWEMsUUFMVyxHQUtTQyxJQUxULENBS1hELFFBTFc7QUFBQSxnQkFLREUsTUFMQyxHQUtTRCxJQUxULENBS0RDLE1BTEM7O0FBTWxCLGdCQUFNQyxnQkFBZ0JILFNBQVNJLEtBQVQsQ0FBZSxHQUFmLENBQXRCO0FBQ0EsZ0JBQUlDLE9BQU9ILE9BQU9JLEtBQVAsQ0FBYUQsSUFBeEI7QUFDQSxnQkFBSUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkgsT0FBT00sS0FBUCxDQUFhaEIsR0FBbEMsQ0FBbEI7O0FBRUEsaUJBQUssSUFBSWlCLElBQUksQ0FBUixFQUFXQyxNQUFNUCxjQUFjUSxNQUFwQyxFQUE0Q0YsSUFBSUMsR0FBaEQsRUFBcURELEdBQXJELEVBQTBEO0FBQ3RELG9CQUFNRyxrQkFBa0JULGNBQWNNLENBQWQsS0FBb0IsRUFBNUM7QUFDQSxvQkFBTUksV0FBV0QsZ0JBQWdCUixLQUFoQixDQUFzQmhCLG1CQUF0QixDQUFqQjtBQUNBLG9CQUFNMEIsSUFBSUQsU0FBU0YsTUFBbkI7QUFDQSxvQkFBSUcsQ0FBSixFQUFPO0FBQ0gsd0JBQU1DLE9BQU9GLFNBQVNDLElBQUksQ0FBYixDQUFiO0FBQ0Esd0JBQUlDLEtBQUtDLEtBQUwsQ0FBVyw4QkFBWCxDQUFKLEVBQWdEO0FBQzVDLDRCQUFJSixnQkFBZ0JLLEtBQWhCLENBQXNCLENBQXRCLEVBQXlCLENBQXpCLE1BQWdDLElBQXBDLEVBQTBDO0FBQ3RDWixtQ0FBT0EsT0FBTyxDQUFkO0FBQ0FFLDBDQUFjLDBCQUFlRixJQUFmLEVBQXFCSCxPQUFPTSxLQUFQLENBQWFoQixHQUFsQyxDQUFkO0FBQ0g7QUFDRCw0QkFBTTBCLE1BQU1YLFlBQVlZLE9BQVosQ0FBb0JOLFNBQVNDLElBQUksQ0FBYixDQUFwQixJQUF1QyxDQUFuRDtBQUNBckIsK0JBQU8yQixJQUFQLENBQVlqQyxRQUFaLEVBQXNCO0FBQ2xCa0Msa0NBQU1wQixJQURZO0FBRWxCcUIsc0NBQVVuQyxRQUZRO0FBR2xCa0Isa0NBQU1BLElBSFk7QUFJbEJhLGlDQUFLQSxHQUphO0FBS2xCSyxxQ0FBU2xDLEdBTFM7QUFNbEJtQywwQ0FBYyxNQUNSakIsWUFBWWtCLE9BQVosQ0FBb0JaLFNBQVNDLElBQUksQ0FBYixDQUFwQixFQUFxQyxnQkFBTVksT0FBTixDQUFjYixTQUFTQyxJQUFJLENBQWIsQ0FBZCxDQUFyQyxDQURRLEdBRVIsSUFGUSxHQUdSLGdCQUFNYSxJQUFOLENBQVd0QyxHQUFYO0FBVFkseUJBQXRCOztBQVlBUSwrQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0o7QUFDSixTQXRDRDtBQXVDSCxLQTlDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6InVucXVhbGlmaWVkLWF0dHJpYnV0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHVucXVhbGlmaWVkLWF0dHJpYnV0ZXMg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBVbnF1YWxpZmllZCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBrbm93biB0byBiZSBzbG93XG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctdW5xdWFsaWZpZWQtYXR0cmlidXRlLXNlbGVjdG9yc1xuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAndW5xdWFsaWZpZWQtYXR0cmlidXRlcyc7XG5cbi8qKlxuICogY3NzIOe7hOWQiOeahOato+WImeWMuemFjVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT01CSU5BVE9SUyA9IC9bXFxzPit+XSsvZztcblxuLyoqXG4gKiDplJnor6/nmoTkv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdVbnF1YWxpZmllZCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBrbm93biB0byBiZSBzbG93JztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLndhbGtSdWxlcyhydWxlID0+IHtcbiAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7c2VsZWN0b3IsIHNvdXJjZX0gPSBydWxlO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3JHcm91cCA9IHNlbGVjdG9yLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBsZXQgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgbGV0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3Rvckdyb3VwLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3JJbkdyb3VwID0gc2VsZWN0b3JHcm91cFtpXSB8fCAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50cyA9IHNlbGVjdG9ySW5Hcm91cC5zcGxpdChQQVRURVJOX0NPTUJJTkFUT1JTKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsID0gc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSBzZWdtZW50c1tsIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0Lm1hdGNoKC9cXFsuKz9cXF0oPzo6W15cXHM+K35cXC4jXFxbXSspPy9nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9ySW5Hcm91cC5zbGljZSgwLCAxKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lID0gbGluZSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGxpbmVDb250ZW50LmluZGV4T2Yoc2VnbWVudHNbbCAtIDFdKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShzZWdtZW50c1tsIC0gMV0sIGNoYWxrLm1hZ2VudGEoc2VnbWVudHNbbCAtIDFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==