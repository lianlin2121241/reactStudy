'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'leading-zero';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file leading-zero 的检测逻辑
 *       025: [强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 `0`。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'When value is between 0 - 1 decimal, omitting the integer part of the `0`';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            css.walkDecls(function (decl) {
                var parts = _postcss2.default.list.space(decl.value);
                var source = decl.source;
                var line = source.start.line;
                for (var i = 0, len = parts.length; i < len; i++) {
                    var part = parts[i];
                    var numericVal = parseFloat(part);
                    if (numericVal < 1 && numericVal > 0) {
                        if (part.slice(0, 2) === '0.') {
                            var lineContent = (0, _util.getLineContent)(line, source.input.css);
                            result.warn(RULENAME, {
                                node: decl,
                                ruleName: RULENAME,
                                line: line,
                                col: lineContent.indexOf(part) + 1,
                                message: MSG,
                                colorMessage: '`' + (0, _util.changeColorByIndex)(lineContent, lineContent.indexOf(part), part) + '` ' + _chalk2.default.grey(MSG)
                            });
                            global.CSSHINT_INVALID_ALL_COUNT++;
                        }
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2xlYWRpbmctemVyby5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJ3YWxrRGVjbHMiLCJwYXJ0cyIsImxpc3QiLCJzcGFjZSIsImRlY2wiLCJ2YWx1ZSIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImkiLCJsZW4iLCJsZW5ndGgiLCJwYXJ0IiwibnVtZXJpY1ZhbCIsInBhcnNlRmxvYXQiLCJzbGljZSIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwiY29sIiwiaW5kZXhPZiIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsY0FBakI7O0FBR0E7Ozs7OztBQXBCQTs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sMkVBQVo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZUgsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNJLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUlDLEtBQUtDLE9BQVQsRUFBa0I7O0FBRWQsZ0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSCxLQUFLSSxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVETixnQkFBSU8sU0FBSixDQUFjLGdCQUFRO0FBQ2xCLG9CQUFNQyxRQUFRLGtCQUFRQyxJQUFSLENBQWFDLEtBQWIsQ0FBbUJDLEtBQUtDLEtBQXhCLENBQWQ7QUFDQSxvQkFBTUMsU0FBU0YsS0FBS0UsTUFBcEI7QUFDQSxvQkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjtBQUNBLHFCQUFLLElBQUlFLElBQUksQ0FBUixFQUFXQyxNQUFNVCxNQUFNVSxNQUE1QixFQUFvQ0YsSUFBSUMsR0FBeEMsRUFBNkNELEdBQTdDLEVBQWtEO0FBQzlDLHdCQUFNRyxPQUFPWCxNQUFNUSxDQUFOLENBQWI7QUFDQSx3QkFBTUksYUFBYUMsV0FBV0YsSUFBWCxDQUFuQjtBQUNBLHdCQUFJQyxhQUFhLENBQWIsSUFBa0JBLGFBQWEsQ0FBbkMsRUFBc0M7QUFDbEMsNEJBQUlELEtBQUtHLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxNQUFxQixJQUF6QixFQUErQjtBQUMzQixnQ0FBTUMsY0FBYywwQkFBZVQsSUFBZixFQUFxQkQsT0FBT1csS0FBUCxDQUFheEIsR0FBbEMsQ0FBcEI7QUFDQUMsbUNBQU93QixJQUFQLENBQVk3QixRQUFaLEVBQXNCO0FBQ2xCOEIsc0NBQU1mLElBRFk7QUFFbEJnQiwwQ0FBVS9CLFFBRlE7QUFHbEJrQixzQ0FBTUEsSUFIWTtBQUlsQmMscUNBQUtMLFlBQVlNLE9BQVosQ0FBb0JWLElBQXBCLElBQTRCLENBSmY7QUFLbEJXLHlDQUFTakMsR0FMUztBQU1sQmtDLDhDQUFjLE1BQ1IsOEJBQW1CUixXQUFuQixFQUFnQ0EsWUFBWU0sT0FBWixDQUFvQlYsSUFBcEIsQ0FBaEMsRUFBMkRBLElBQTNELENBRFEsR0FFUixJQUZRLEdBR1IsZ0JBQU1hLElBQU4sQ0FBV25DLEdBQVg7QUFUWSw2QkFBdEI7QUFXQU8sbUNBQU9DLHlCQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0osYUF6QkQ7QUEwQkg7QUFDSixLQW5DeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6ImxlYWRpbmctemVyby5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgbGVhZGluZy16ZXJvIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgMDI1OiBb5by65Yi2XSDlvZPmlbDlgLzkuLogMCAtIDEg5LmL6Ze055qE5bCP5pWw5pe277yM55yB55Wl5pW05pWw6YOo5YiG55qEIGAwYOOAglxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnQsIGNoYW5nZUNvbG9yQnlJbmRleH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdsZWFkaW5nLXplcm8nO1xuXG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnV2hlbiB2YWx1ZSBpcyBiZXR3ZWVuIDAgLSAxIGRlY2ltYWwsIG9taXR0aW5nIHRoZSBpbnRlZ2VyIHBhcnQgb2YgdGhlIGAwYCc7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChvcHRzLnJ1bGVWYWwpIHtcblxuICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBwb3N0Y3NzLmxpc3Quc3BhY2UoZGVjbC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gZGVjbC5zb3VyY2U7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG51bWVyaWNWYWwgPSBwYXJzZUZsb2F0KHBhcnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVtZXJpY1ZhbCA8IDEgJiYgbnVtZXJpY1ZhbCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnNsaWNlKDAsIDIpID09PSAnMC4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogbGluZUNvbnRlbnQuaW5kZXhPZihwYXJ0KSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbmdlQ29sb3JCeUluZGV4KGxpbmVDb250ZW50LCBsaW5lQ29udGVudC5pbmRleE9mKHBhcnQpLCBwYXJ0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=