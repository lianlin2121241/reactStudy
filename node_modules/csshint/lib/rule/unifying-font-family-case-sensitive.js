'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'unifying-font-family-case-sensitive';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file unifying-font-family-case-sensitive 的检测逻辑
 *       036: [强制] `font-family` 不区分大小写，但在同一个项目中，同样的 `Family Name` 大小写必须统一。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = '`font-family` case insensitive, but in the same project, the same` Family Name` case must be unified.';

/**
 * 获取错误信息
 *
 * @param {string} curFontFamily 当前检测的这个 font-family 值
 * @param {string} projFontFamily 项目级别对应的这个 font-family 值
 *
 * @return {Object} 错误信息
 */
var getMsg = function getMsg(curFontFamily, projFontFamily) {
    return {
        msg: MSG + ' In currently project, ' + '`' + curFontFamily + '` should be `' + projFontFamily + '`.',
        colorMsg: MSG + ' In currently project, ' + '`' + _chalk2.default.magenta(curFontFamily) + '` should be `' + _chalk2.default.magenta(projFontFamily) + '`.'
    };
};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkDecls(function (decl) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var prop = decl.prop;

            if (prop === 'font-family') {
                var parts = _postcss2.default.list.space(decl.value);
                for (var i = 0, len = parts.length; i < len; i++) {
                    var part = parts[i].replace(/['",]/g, '');
                    var partLowerCase = part.toLowerCase();

                    if (!global.CSSHINT_FONTFAMILY_CASE_FLAG[partLowerCase]) {
                        global.CSSHINT_FONTFAMILY_CASE_FLAG[partLowerCase] = part;
                    } else {
                        if (global.CSSHINT_FONTFAMILY_CASE_FLAG[partLowerCase] !== part) {
                            var source = decl.source;
                            var line = source.start.line;
                            var lineContent = (0, _util.getLineContent)(line, source.input.css);
                            var col = lineContent.indexOf(part) + 1;

                            var m = getMsg(part, global.CSSHINT_FONTFAMILY_CASE_FLAG[partLowerCase]);

                            result.warn(RULENAME, {
                                node: decl,
                                ruleName: RULENAME,
                                line: line,
                                col: col,
                                message: m.msg,
                                colorMessage: '`' + lineContent.replace(part, _chalk2.default.magenta(part)) + '` ' + _chalk2.default.grey(m.colorMsg)
                            });
                            global.CSSHINT_INVALID_ALL_COUNT++;
                        }
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,