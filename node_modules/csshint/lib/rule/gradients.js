'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'gradients';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file gradients 的检测逻辑
 *       When using a vendor-prefixed gradient, make sure to use them all
 *       https://github.com/CSSLint/csslint/wiki/Require-all-gradient-definitions
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Missing vendor-prefixed CSS gradients for ';

var gradients = {};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {

            gradients = {
                moz: 0,
                webkit: 0,
                oldWebkit: 0,
                o: 0
            };

            rule.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var value = decl.value;
                if (/\-(moz|o|webkit)(?:\-(?:linear|radial))\-gradient/i.test(value)) {
                    gradients[RegExp.$1] = 1;
                } else if (/\-webkit\-gradient/i.test(value)) {
                    gradients.oldWebkit = 1;
                }
            });

            var missing = [];

            if (!gradients.moz) {
                missing.push('Firefox 3.6+: -moz-linear-gradient');
            }

            if (!gradients.webkit) {
                missing.push('Webkit (Safari 5+, Chrome): -webkit-linear-gradient');
            }

            if (!gradients.oldWebkit) {
                missing.push('Old Webkit (Safari 4+, Chrome): -webkit-gradient');
            }

            if (!gradients.o) {
                missing.push('Opera 11.1+: -o-linear-gradient');
            }

            if (missing.length && missing.length < 4) {
                var source = rule.source;
                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);
                var col = source.start.column;
                var str = MSG + missing.join(', ');
                result.warn(RULENAME, {
                    node: rule,
                    ruleName: RULENAME,
                    line: line,
                    col: col,
                    message: str,
                    colorMessage: '`' + lineContent.replace(rule.selector, _chalk2.default.magenta(rule.selector)) + '` ' + _chalk2.default.grey(str)
                });
                global.CSSHINT_INVALID_ALL_COUNT++;
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2dyYWRpZW50cy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImdyYWRpZW50cyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrUnVsZXMiLCJtb3oiLCJ3ZWJraXQiLCJvbGRXZWJraXQiLCJvIiwicnVsZSIsIndhbGtEZWNscyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsInZhbHVlIiwiZGVjbCIsInRlc3QiLCJSZWdFeHAiLCIkMSIsIm1pc3NpbmciLCJwdXNoIiwibGVuZ3RoIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsImNvbCIsImNvbHVtbiIsInN0ciIsImpvaW4iLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsInJlcGxhY2UiLCJzZWxlY3RvciIsIm1hZ2VudGEiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsV0FBakI7O0FBRUE7Ozs7OztBQXBCQTs7Ozs7OztBQTBCQSxJQUFNQyxNQUFNLDRDQUFaOztBQUVBLElBQUlDLFlBQVksRUFBaEI7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZUosUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNLLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUksQ0FBQ0MsS0FBS0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBRURILFlBQUlJLFNBQUosQ0FBYyxnQkFBUTs7QUFFbEJQLHdCQUFZO0FBQ1JRLHFCQUFLLENBREc7QUFFUkMsd0JBQVEsQ0FGQTtBQUdSQywyQkFBVyxDQUhIO0FBSVJDLG1CQUFHO0FBSkssYUFBWjs7QUFPQUMsaUJBQUtDLFNBQUwsQ0FBZSxnQkFBUTtBQUNuQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NWLEtBQUtXLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBRUQsb0JBQU1DLFFBQVFDLEtBQUtELEtBQW5CO0FBQ0Esb0JBQUkscURBQXFERSxJQUFyRCxDQUEwREYsS0FBMUQsQ0FBSixFQUFzRTtBQUNsRWpCLDhCQUFVb0IsT0FBT0MsRUFBakIsSUFBdUIsQ0FBdkI7QUFDSCxpQkFGRCxNQUdLLElBQUksc0JBQXNCRixJQUF0QixDQUEyQkYsS0FBM0IsQ0FBSixFQUF1QztBQUN4Q2pCLDhCQUFVVSxTQUFWLEdBQXNCLENBQXRCO0FBQ0g7QUFDSixhQVpEOztBQWNBLGdCQUFNWSxVQUFVLEVBQWhCOztBQUVBLGdCQUFJLENBQUN0QixVQUFVUSxHQUFmLEVBQW9CO0FBQ2hCYyx3QkFBUUMsSUFBUixDQUFhLG9DQUFiO0FBQ0g7O0FBRUQsZ0JBQUksQ0FBQ3ZCLFVBQVVTLE1BQWYsRUFBdUI7QUFDbkJhLHdCQUFRQyxJQUFSLENBQWEscURBQWI7QUFDSDs7QUFFRCxnQkFBSSxDQUFDdkIsVUFBVVUsU0FBZixFQUEwQjtBQUN0Qlksd0JBQVFDLElBQVIsQ0FBYSxrREFBYjtBQUNIOztBQUVELGdCQUFJLENBQUN2QixVQUFVVyxDQUFmLEVBQWtCO0FBQ2RXLHdCQUFRQyxJQUFSLENBQWEsaUNBQWI7QUFDSDs7QUFFRCxnQkFBSUQsUUFBUUUsTUFBUixJQUFrQkYsUUFBUUUsTUFBUixHQUFpQixDQUF2QyxFQUEwQztBQUN0QyxvQkFBTUMsU0FBU2IsS0FBS2EsTUFBcEI7QUFDQSxvQkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjtBQUNBLG9CQUFNRSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCRCxPQUFPSSxLQUFQLENBQWExQixHQUFsQyxDQUFwQjtBQUNBLG9CQUFNMkIsTUFBTUwsT0FBT0UsS0FBUCxDQUFhSSxNQUF6QjtBQUNBLG9CQUFNQyxNQUFNakMsTUFBTXVCLFFBQVFXLElBQVIsQ0FBYSxJQUFiLENBQWxCO0FBQ0E3Qix1QkFBTzhCLElBQVAsQ0FBWXBDLFFBQVosRUFBc0I7QUFDbEJxQywwQkFBTXZCLElBRFk7QUFFbEJ3Qiw4QkFBVXRDLFFBRlE7QUFHbEI0QiwwQkFBTUEsSUFIWTtBQUlsQkkseUJBQUtBLEdBSmE7QUFLbEJPLDZCQUFTTCxHQUxTO0FBTWxCTSxrQ0FBYyxNQUNSVixZQUFZVyxPQUFaLENBQ0UzQixLQUFLNEIsUUFEUCxFQUVFLGdCQUFNQyxPQUFOLENBQWM3QixLQUFLNEIsUUFBbkIsQ0FGRixDQURRLEdBS1IsSUFMUSxHQU1SLGdCQUFNRSxJQUFOLENBQVdWLEdBQVg7QUFaWSxpQkFBdEI7QUFjQWxCLHVCQUFPQyx5QkFBUDtBQUNIO0FBQ0osU0EvREQ7QUFnRUgsS0F0RXlDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJncmFkaWVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGdyYWRpZW50cyDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIFdoZW4gdXNpbmcgYSB2ZW5kb3ItcHJlZml4ZWQgZ3JhZGllbnQsIG1ha2Ugc3VyZSB0byB1c2UgdGhlbSBhbGxcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9DU1NMaW50L2Nzc2xpbnQvd2lraS9SZXF1aXJlLWFsbC1ncmFkaWVudC1kZWZpbml0aW9uc1xuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnZ3JhZGllbnRzJztcblxuLyoqXG4gKiDplJnor6/nmoTkv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdNaXNzaW5nIHZlbmRvci1wcmVmaXhlZCBDU1MgZ3JhZGllbnRzIGZvciAnO1xuXG5sZXQgZ3JhZGllbnRzID0ge307XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjc3Mud2Fsa1J1bGVzKHJ1bGUgPT4ge1xuXG4gICAgICAgICAgICBncmFkaWVudHMgPSB7XG4gICAgICAgICAgICAgICAgbW96OiAwLFxuICAgICAgICAgICAgICAgIHdlYmtpdDogMCxcbiAgICAgICAgICAgICAgICBvbGRXZWJraXQ6IDAsXG4gICAgICAgICAgICAgICAgbzogMFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcnVsZS53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZGVjbC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoL1xcLShtb3p8b3x3ZWJraXQpKD86XFwtKD86bGluZWFyfHJhZGlhbCkpXFwtZ3JhZGllbnQvaS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBncmFkaWVudHNbUmVnRXhwLiQxXSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKC9cXC13ZWJraXRcXC1ncmFkaWVudC9pLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50cy5vbGRXZWJraXQgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nID0gW107XG5cbiAgICAgICAgICAgIGlmICghZ3JhZGllbnRzLm1veikge1xuICAgICAgICAgICAgICAgIG1pc3NpbmcucHVzaCgnRmlyZWZveCAzLjYrOiAtbW96LWxpbmVhci1ncmFkaWVudCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWdyYWRpZW50cy53ZWJraXQpIHtcbiAgICAgICAgICAgICAgICBtaXNzaW5nLnB1c2goJ1dlYmtpdCAoU2FmYXJpIDUrLCBDaHJvbWUpOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWdyYWRpZW50cy5vbGRXZWJraXQpIHtcbiAgICAgICAgICAgICAgICBtaXNzaW5nLnB1c2goJ09sZCBXZWJraXQgKFNhZmFyaSA0KywgQ2hyb21lKTogLXdlYmtpdC1ncmFkaWVudCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWdyYWRpZW50cy5vKSB7XG4gICAgICAgICAgICAgICAgbWlzc2luZy5wdXNoKCdPcGVyYSAxMS4xKzogLW8tbGluZWFyLWdyYWRpZW50Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtaXNzaW5nLmxlbmd0aCAmJiBtaXNzaW5nLmxlbmd0aCA8IDQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBydWxlLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ciA9IE1TRyArIG1pc3Npbmcuam9pbignLCAnKTtcbiAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiBydWxlLFxuICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5zZWxlY3RvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFsay5tYWdlbnRhKHJ1bGUuc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShzdHIpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==