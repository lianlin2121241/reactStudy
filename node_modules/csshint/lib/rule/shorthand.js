'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'shorthand';

/**
 * 匹配 #aaccaa 之类的颜色值
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file shorthand 的检测逻辑
 *       `property` 对应 015: [建议] 在可以使用缩写的情况下，尽量使用属性缩写。
 *       `color` 对应 030: [强制] 颜色值可以缩写时，必须使用缩写形式。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COLOR = /^#([\da-f])\1([\da-f])\2([\da-f])\3$/i;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var COLOR_MSG = 'Color value can be abbreviated, must use the abbreviation form';

var arrayProto = Array.prototype;

var propertiesToCheck = {};

var mapping = {
    margin: ['margin-top', 'margin-bottom', 'margin-left', 'margin-right'],
    padding: ['padding-top', 'padding-bottom', 'padding-left', 'padding-right'],
    font: ['font-family', 'font-size', 'line-height']
};

(function () {
    /* eslint-disable fecs-use-for-of, fecs-valid-map-set */
    for (var prop in mapping) {
        if (mapping.hasOwnProperty(prop)) {
            for (var i = 0, len = mapping[prop].length; i < len; i++) {
                propertiesToCheck[mapping[prop][i]] = prop;
            }
        }
    }
    /* eslint-enable fecs-use-for-of, fecs-valid-map-set */
})();

/**
 * 获取 property 的错误信息
 *
 * @param {string} propertyStr 出错的属性字符串
 * @param {string} selector 这些出错的属性所在的选择器的名称
 * @param {string} replaceProperty 应该要替换的属性
 *
 * @return {Object} 包含 msg 和 colorMsg 属性的对象
 */
var getPropertyMsg = function getPropertyMsg(propertyStr, selector, replaceProperty) {
    return {
        msg: '' + 'The properties `' + propertyStr + '` in the selector `' + selector + '` can be replaced by ' + replaceProperty + '.',
        colorMsg: _chalk2.default.grey('' + 'The properties `' + _chalk2.default.magenta(propertyStr) + '` in the selector `' + _chalk2.default.magenta(selector) + '` can be replaced by ' + _chalk2.default.magenta(replaceProperty) + '.')
    };
};

var lineCache = 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        arrayProto.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {
            if (realRuleVal.indexOf('color') > -1) {

                lineCache = 0;

                css.walkDecls(function (decl) {
                    var parts = _postcss2.default.list.space(decl.value);
                    for (var i = 0, len = parts.length; i < len; i++) {
                        var part = parts[i];
                        if (PATTERN_COLOR.test(part)) {
                            var source = decl.source;
                            if (lineCache !== source.start.line) {
                                lineCache = source.start.line;
                                var line = source.start.line;
                                var lineContent = (0, _util.getLineContent)(line, source.input.css);
                                var col = source.start.column + decl.prop.length + decl.raws.between.length;
                                result.warn(RULENAME, {
                                    node: decl,
                                    ruleName: RULENAME,
                                    errorChar: 'color',
                                    line: line,
                                    col: col,
                                    message: COLOR_MSG,
                                    colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(COLOR_MSG)
                                });
                                global.CSSHINT_INVALID_ALL_COUNT++;
                            }
                        }
                    }
                });
            }

            if (realRuleVal.indexOf('property') > -1) {
                (function () {
                    var tmp = {};
                    css.walkRules(function (rule) {
                        tmp = {};
                        var nodes = rule.nodes,
                            selector = rule.selector;

                        for (var i = 0, len = nodes.length; i < len; i++) {
                            var decl = nodes[i];
                            if (decl.type === 'decl') {
                                var prop = decl.prop;
                                var v = propertiesToCheck[prop];
                                if (!v) {
                                    continue;
                                }

                                if (!tmp[v]) {
                                    tmp[v] = 1;
                                } else {
                                    tmp[v] += 1;
                                }

                                if (tmp[v] >= mapping[v].length) {
                                    var source = decl.source;
                                    var line = source.start.line;
                                    var col = source.start.column;

                                    var msg = getPropertyMsg(mapping[v].join(', '), selector, v);

                                    result.warn(RULENAME, {
                                        node: decl,
                                        ruleName: RULENAME,
                                        errorChar: 'property',
                                        line: line,
                                        col: col,
                                        message: msg.msg,
                                        colorMessage: msg.colorMsg
                                    });
                                    global.CSSHINT_INVALID_ALL_COUNT++;
                                    break;
                                }
                            }
                        }
                    });
                })();
            }
        }
    };
});
//# sourceMappingURL=data:application/json;base64,