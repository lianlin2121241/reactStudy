'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'duplicate-properties'; /**
                                        * @file duplicate-properties 的检测逻辑
                                        *       Duplicate properties must appear one after the other
                                        *       https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-properties
                                        * @author ielgnaw(wuji0223@gmail.com)
                                        */

var MSG = 'Duplicate properties must appear one after the other';

var properties = {};
var lastProperty = '';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            properties = {};

            rule.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var prop = decl.prop,
                    value = decl.value;

                if (properties[prop] && (lastProperty !== prop || properties[prop] === value)) {
                    var source = decl.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);
                    var col = source.start.column;
                    result.warn(RULENAME, {
                        node: decl,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: MSG,
                        colorMessage: '`' + _chalk2.default.magenta(lineContent) + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }

                properties[prop] = value;
                lastProperty = prop;
            });
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2R1cGxpY2F0ZS1wcm9wZXJ0aWVzLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiTVNHIiwicHJvcGVydGllcyIsImxhc3RQcm9wZXJ0eSIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrUnVsZXMiLCJydWxlIiwid2Fsa0RlY2xzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwicHJvcCIsImRlY2wiLCJ2YWx1ZSIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJjb2wiLCJjb2x1bW4iLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsIm1hZ2VudGEiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsc0JBQWpCLEMsQ0FsQkE7Ozs7Ozs7QUFvQkEsSUFBTUMsTUFBTSxzREFBWjs7QUFFQSxJQUFJQyxhQUFhLEVBQWpCO0FBQ0EsSUFBSUMsZUFBZSxFQUFuQjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlTCxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ00sR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSSxDQUFDQyxLQUFLQyxPQUFWLEVBQW1CO0FBQ2Y7QUFDSDs7QUFFREgsWUFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCUix5QkFBYSxFQUFiOztBQUVBUyxpQkFBS0MsU0FBTCxDQUFlLGdCQUFRO0FBQ25CLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ04sS0FBS08sUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFIa0Isb0JBS1pDLElBTFksR0FLR0MsSUFMSCxDQUtaRCxJQUxZO0FBQUEsb0JBS05FLEtBTE0sR0FLR0QsSUFMSCxDQUtOQyxLQUxNOztBQU1uQixvQkFBSWhCLFdBQVdjLElBQVgsTUFBcUJiLGlCQUFpQmEsSUFBakIsSUFBeUJkLFdBQVdjLElBQVgsTUFBcUJFLEtBQW5FLENBQUosRUFBK0U7QUFDM0Usd0JBQU1DLFNBQVNGLEtBQUtFLE1BQXBCO0FBQ0Esd0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSx3QkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhakIsR0FBbEMsQ0FBcEI7QUFDQSx3QkFBTWtCLE1BQU1MLE9BQU9FLEtBQVAsQ0FBYUksTUFBekI7QUFDQWxCLDJCQUFPbUIsSUFBUCxDQUFZMUIsUUFBWixFQUFzQjtBQUNsQjJCLDhCQUFNVixJQURZO0FBRWxCVyxrQ0FBVTVCLFFBRlE7QUFHbEJvQiw4QkFBTUEsSUFIWTtBQUlsQkksNkJBQUtBLEdBSmE7QUFLbEJLLGlDQUFTNUIsR0FMUztBQU1sQjZCLHNDQUFjLE1BQ1IsZ0JBQU1DLE9BQU4sQ0FBY1QsV0FBZCxDQURRLEdBRVIsSUFGUSxHQUdSLGdCQUFNVSxJQUFOLENBQVcvQixHQUFYO0FBVFkscUJBQXRCO0FBV0FZLDJCQUFPQyx5QkFBUDtBQUNIOztBQUVEWiwyQkFBV2MsSUFBWCxJQUFtQkUsS0FBbkI7QUFDQWYsK0JBQWVhLElBQWY7QUFDSCxhQTNCRDtBQTRCSCxTQS9CRDtBQWdDSCxLQXRDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6ImR1cGxpY2F0ZS1wcm9wZXJ0aWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBkdXBsaWNhdGUtcHJvcGVydGllcyDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIER1cGxpY2F0ZSBwcm9wZXJ0aWVzIG11c3QgYXBwZWFyIG9uZSBhZnRlciB0aGUgb3RoZXJcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9DU1NMaW50L2Nzc2xpbnQvd2lraS9EaXNhbGxvdy1kdXBsaWNhdGUtcHJvcGVydGllc1xuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnZHVwbGljYXRlLXByb3BlcnRpZXMnO1xuXG5jb25zdCBNU0cgPSAnRHVwbGljYXRlIHByb3BlcnRpZXMgbXVzdCBhcHBlYXIgb25lIGFmdGVyIHRoZSBvdGhlcic7XG5cbmxldCBwcm9wZXJ0aWVzID0ge307XG5sZXQgbGFzdFByb3BlcnR5ID0gJyc7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjc3Mud2Fsa1J1bGVzKHJ1bGUgPT4ge1xuICAgICAgICAgICAgcHJvcGVydGllcyA9IHt9O1xuXG4gICAgICAgICAgICBydWxlLndhbGtEZWNscyhkZWNsID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qge3Byb3AsIHZhbHVlfSA9IGRlY2w7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNbcHJvcF0gJiYgKGxhc3RQcm9wZXJ0eSAhPT0gcHJvcCB8fCBwcm9wZXJ0aWVzW3Byb3BdID09PSB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gZGVjbC5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbjtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsubWFnZW50YShsaW5lQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgbGFzdFByb3BlcnR5ID0gcHJvcDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4pO1xuIl19