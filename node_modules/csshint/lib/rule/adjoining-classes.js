'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

'use strict';

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file adjoining-classes 的检测逻辑
 *       Don't use adjoining classes 例如 .foo.bar
 *       https://github.com/CSSLint/csslint/wiki/Disallow-adjoining-classes
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'adjoining-classes';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_COMBINATORS = /[\s>+~,[]+/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Don\'t use adjoining classes';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var segments = rule.selector.split(PATTERN_COMBINATORS);

            for (var i = 0, len = segments.length; i < len; i++) {
                var segment = segments[i];
                if (segment.split('.').length > 2) {
                    var source = rule.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';
                    var colorStr = segment;
                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        line: line,
                        message: MSG,
                        colorMessage: '`' + lineContent.replace(colorStr, _chalk2.default.magenta(colorStr)) + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Fkam9pbmluZy1jbGFzc2VzLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiUEFUVEVSTl9DT01CSU5BVE9SUyIsIk1TRyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrUnVsZXMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJzZWdtZW50cyIsInJ1bGUiLCJzZWxlY3RvciIsInNwbGl0IiwiaSIsImxlbiIsImxlbmd0aCIsInNlZ21lbnQiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sb3JTdHIiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsInJlcGxhY2UiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOztBQUVBOzs7Ozs7QUFkQTs7Ozs7OztBQW9CQSxJQUFNQSxXQUFXLG1CQUFqQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsc0JBQXNCLFlBQTVCOztBQUVBOzs7Ozs7QUFNQSxJQUFNQyxNQUFNLDhCQUFaOztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRLGtCQUFRQyxNQUFSLENBQWVKLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDSyxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDYixZQUFJLENBQUNDLEtBQUtDLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVESCxZQUFJSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVELGdCQUFNQyxXQUFXQyxLQUFLQyxRQUFMLENBQWNDLEtBQWQsQ0FBb0JmLG1CQUFwQixDQUFqQjs7QUFFQSxpQkFBSyxJQUFJZ0IsSUFBSSxDQUFSLEVBQVdDLE1BQU1MLFNBQVNNLE1BQS9CLEVBQXVDRixJQUFJQyxHQUEzQyxFQUFnREQsR0FBaEQsRUFBcUQ7QUFDakQsb0JBQU1HLFVBQVVQLFNBQVNJLENBQVQsQ0FBaEI7QUFDQSxvQkFBSUcsUUFBUUosS0FBUixDQUFjLEdBQWQsRUFBbUJHLE1BQW5CLEdBQTRCLENBQWhDLEVBQW1DO0FBQy9CLHdCQUFNRSxTQUFTUCxLQUFLTyxNQUFwQjtBQUNBLHdCQUFNQyxPQUFPRCxPQUFPRSxLQUFQLENBQWFELElBQTFCO0FBQ0Esd0JBQU1FLGNBQWMsMEJBQWVGLElBQWYsRUFBcUJELE9BQU9JLEtBQVAsQ0FBYXBCLEdBQWxDLEtBQTBDLEVBQTlEO0FBQ0Esd0JBQU1xQixXQUFXTixPQUFqQjtBQUNBZCwyQkFBT3FCLElBQVAsQ0FBWTNCLFFBQVosRUFBc0I7QUFDbEI0Qiw4QkFBTWQsSUFEWTtBQUVsQmUsa0NBQVU3QixRQUZRO0FBR2xCc0IsOEJBQU1BLElBSFk7QUFJbEJRLGlDQUFTNUIsR0FKUztBQUtsQjZCLHNDQUFjLE1BQ1JQLFlBQVlRLE9BQVosQ0FDRU4sUUFERixFQUVFLGdCQUFNTyxPQUFOLENBQWNQLFFBQWQsQ0FGRixDQURRLEdBS1IsSUFMUSxHQU1SLGdCQUFNUSxJQUFOLENBQVdoQyxHQUFYO0FBWFkscUJBQXRCO0FBYUFRLDJCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSixTQTlCRDtBQStCSCxLQXJDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6ImFkam9pbmluZy1jbGFzc2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBhZGpvaW5pbmctY2xhc3NlcyDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIERvbid0IHVzZSBhZGpvaW5pbmcgY2xhc3NlcyDkvovlpoIgLmZvby5iYXJcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9DU1NMaW50L2Nzc2xpbnQvd2lraS9EaXNhbGxvdy1hZGpvaW5pbmctY2xhc3Nlc1xuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdhZGpvaW5pbmctY2xhc3Nlcyc7XG5cbi8qKlxuICogY3NzIOe7hOWQiOeahOato+WImeWMuemFjVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT01CSU5BVE9SUyA9IC9bXFxzPit+LFtdKy87XG5cbi8qKlxuICog6ZSZ6K+v5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnRG9uXFwndCB1c2UgYWRqb2luaW5nIGNsYXNzZXMnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLndhbGtSdWxlcyhydWxlID0+IHtcbiAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzZWdtZW50cyA9IHJ1bGUuc2VsZWN0b3Iuc3BsaXQoUEFUVEVSTl9DT01CSU5BVE9SUyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoc2VnbWVudC5zcGxpdCgnLicpLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gcnVsZS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3JTdHIgPSBzZWdtZW50O1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogcnVsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JTdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxrLm1hZ2VudGEoY29sb3JTdHIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==