'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'empty-rules'; /**
                               * @file empty-rules 的检测逻辑
                               *       Rules without any properties specified should be removed
                               *       https://github.com/CSSLint/csslint/wiki/Disallow-empty-rules
                               * @author ielgnaw(wuji0223@gmail.com)
                               */

var propertyCount = 0;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Rules without any properties specified should be removed';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            propertyCount = 0;

            rule.walkDecls(function () {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }
                propertyCount++;
            });

            if (propertyCount === 0) {
                var source = rule.source;
                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);
                var col = source.start.column;
                result.warn(RULENAME, {
                    node: rule,
                    ruleName: RULENAME,
                    line: line,
                    col: col,
                    message: MSG,
                    colorMessage: '`' + lineContent.replace(rule.selector, _chalk2.default.magenta(rule.selector)) + '` ' + _chalk2.default.grey(MSG)
                });
                global.CSSHINT_INVALID_ALL_COUNT++;
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2VtcHR5LXJ1bGVzLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwicHJvcGVydHlDb3VudCIsIk1TRyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrUnVsZXMiLCJydWxlIiwid2Fsa0RlY2xzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsImNvbCIsImNvbHVtbiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwicmVwbGFjZSIsInNlbGVjdG9yIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxhQUFqQixDLENBbEJBOzs7Ozs7O0FBb0JBLElBQUlDLGdCQUFnQixDQUFwQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSwwREFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSSxDQUFDQyxLQUFLQyxPQUFWLEVBQW1CO0FBQ2Y7QUFDSDs7QUFFREgsWUFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCUiw0QkFBZ0IsQ0FBaEI7O0FBRUFTLGlCQUFLQyxTQUFMLENBQWUsWUFBTTtBQUNqQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NOLEtBQUtPLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7QUFDRGI7QUFDSCxhQUxEOztBQU9BLGdCQUFJQSxrQkFBa0IsQ0FBdEIsRUFBeUI7QUFDckIsb0JBQU1jLFNBQVNMLEtBQUtLLE1BQXBCO0FBQ0Esb0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSxvQkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhZCxHQUFsQyxDQUFwQjtBQUNBLG9CQUFNZSxNQUFNTCxPQUFPRSxLQUFQLENBQWFJLE1BQXpCO0FBQ0FmLHVCQUFPZ0IsSUFBUCxDQUFZdEIsUUFBWixFQUFzQjtBQUNsQnVCLDBCQUFNYixJQURZO0FBRWxCYyw4QkFBVXhCLFFBRlE7QUFHbEJnQiwwQkFBTUEsSUFIWTtBQUlsQkkseUJBQUtBLEdBSmE7QUFLbEJLLDZCQUFTdkIsR0FMUztBQU1sQndCLGtDQUFjLE1BQ1JSLFlBQVlTLE9BQVosQ0FDRWpCLEtBQUtrQixRQURQLEVBRUUsZ0JBQU1DLE9BQU4sQ0FBY25CLEtBQUtrQixRQUFuQixDQUZGLENBRFEsR0FLUixJQUxRLEdBTVIsZ0JBQU1FLElBQU4sQ0FBVzVCLEdBQVg7QUFaWSxpQkFBdEI7QUFjQVUsdUJBQU9DLHlCQUFQO0FBQ0g7QUFDSixTQS9CRDtBQWdDSCxLQXRDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6ImVtcHR5LXJ1bGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBlbXB0eS1ydWxlcyDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIFJ1bGVzIHdpdGhvdXQgYW55IHByb3BlcnRpZXMgc3BlY2lmaWVkIHNob3VsZCBiZSByZW1vdmVkXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctZW1wdHktcnVsZXNcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ2VtcHR5LXJ1bGVzJztcblxubGV0IHByb3BlcnR5Q291bnQgPSAwO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ1J1bGVzIHdpdGhvdXQgYW55IHByb3BlcnRpZXMgc3BlY2lmaWVkIHNob3VsZCBiZSByZW1vdmVkJztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICBwcm9wZXJ0eUNvdW50ID0gMDtcblxuICAgICAgICAgICAgcnVsZS53YWxrRGVjbHMoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvcGVydHlDb3VudCsrO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gcnVsZS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbjtcbiAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiBydWxlLFxuICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5zZWxlY3RvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFsay5tYWdlbnRhKHJ1bGUuc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==