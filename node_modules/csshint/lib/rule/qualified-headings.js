'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'qualified-headings';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file qualified-headings 的检测逻辑
 *       Headings should not be qualified
 *       https://github.com/CSSLint/csslint/wiki/Disallow-qualified-headings
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Headings should not be qualified (namespaced)';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_COMBINATORS = /[\s>+~]+/g;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var selector = rule.selector,
                source = rule.source;

            var selectorGroup = selector.split(',');
            var line = source.start.line;
            var col = source.start.column;
            var lineContent = (0, _util.getLineContent)(line, source.input.css);

            for (var i = 0, len = selectorGroup.length; i < len; i++) {
                var selectorInGroup = selectorGroup[i] || '';
                var segments = selectorInGroup.split(PATTERN_COMBINATORS);

                // 跳过第一个，第一个是 h[1-6] 是合法的
                for (var j = 1, segmentLen = segments.length; j < segmentLen; j++) {
                    var segment = segments[j];
                    if (/h[1-6]/.test(segment)) {
                        if (selectorInGroup.slice(0, 1) === '\n') {
                            line = line + 1;
                            lineContent = (0, _util.getLineContent)(line, source.input.css);
                        }
                        result.warn(RULENAME, {
                            node: rule,
                            ruleName: RULENAME,
                            line: line,
                            col: col + lineContent.indexOf(segment),
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(segment, _chalk2.default.magenta(segment)) + '` ' + _chalk2.default.grey(MSG)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3F1YWxpZmllZC1oZWFkaW5ncy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsIlBBVFRFUk5fQ09NQklOQVRPUlMiLCJjaGVjayIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa1J1bGVzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwic2VsZWN0b3IiLCJydWxlIiwic291cmNlIiwic2VsZWN0b3JHcm91cCIsInNwbGl0IiwibGluZSIsInN0YXJ0IiwiY29sIiwiY29sdW1uIiwibGluZUNvbnRlbnQiLCJpbnB1dCIsImkiLCJsZW4iLCJsZW5ndGgiLCJzZWxlY3RvckluR3JvdXAiLCJzZWdtZW50cyIsImoiLCJzZWdtZW50TGVuIiwic2VnbWVudCIsInRlc3QiLCJzbGljZSIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJpbmRleE9mIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsInJlcGxhY2UiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLG9CQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sK0NBQVo7O0FBRUE7Ozs7OztBQU1BLElBQU1DLHNCQUFzQixXQUE1Qjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCOztBQUViLFlBQUksQ0FBQ0MsS0FBS0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBRURILFlBQUlJLFNBQUosQ0FBYyxnQkFBUTtBQUNsQixnQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NKLEtBQUtLLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBSGlCLGdCQUtYQyxRQUxXLEdBS1NDLElBTFQsQ0FLWEQsUUFMVztBQUFBLGdCQUtERSxNQUxDLEdBS1NELElBTFQsQ0FLREMsTUFMQzs7QUFNbEIsZ0JBQU1DLGdCQUFnQkgsU0FBU0ksS0FBVCxDQUFlLEdBQWYsQ0FBdEI7QUFDQSxnQkFBSUMsT0FBT0gsT0FBT0ksS0FBUCxDQUFhRCxJQUF4QjtBQUNBLGdCQUFNRSxNQUFNTCxPQUFPSSxLQUFQLENBQWFFLE1BQXpCO0FBQ0EsZ0JBQUlDLGNBQWMsMEJBQWVKLElBQWYsRUFBcUJILE9BQU9RLEtBQVAsQ0FBYWxCLEdBQWxDLENBQWxCOztBQUVBLGlCQUFLLElBQUltQixJQUFJLENBQVIsRUFBV0MsTUFBTVQsY0FBY1UsTUFBcEMsRUFBNENGLElBQUlDLEdBQWhELEVBQXFERCxHQUFyRCxFQUEwRDtBQUN0RCxvQkFBTUcsa0JBQWtCWCxjQUFjUSxDQUFkLEtBQW9CLEVBQTVDO0FBQ0Esb0JBQU1JLFdBQVdELGdCQUFnQlYsS0FBaEIsQ0FBc0JmLG1CQUF0QixDQUFqQjs7QUFFQTtBQUNBLHFCQUFLLElBQUkyQixJQUFJLENBQVIsRUFBV0MsYUFBYUYsU0FBU0YsTUFBdEMsRUFBOENHLElBQUlDLFVBQWxELEVBQThERCxHQUE5RCxFQUFtRTtBQUMvRCx3QkFBTUUsVUFBVUgsU0FBU0MsQ0FBVCxDQUFoQjtBQUNBLHdCQUFJLFNBQVNHLElBQVQsQ0FBY0QsT0FBZCxDQUFKLEVBQTRCO0FBQ3hCLDRCQUFJSixnQkFBZ0JNLEtBQWhCLENBQXNCLENBQXRCLEVBQXlCLENBQXpCLE1BQWdDLElBQXBDLEVBQTBDO0FBQ3RDZixtQ0FBT0EsT0FBTyxDQUFkO0FBQ0FJLDBDQUFjLDBCQUFlSixJQUFmLEVBQXFCSCxPQUFPUSxLQUFQLENBQWFsQixHQUFsQyxDQUFkO0FBQ0g7QUFDREMsK0JBQU80QixJQUFQLENBQVlsQyxRQUFaLEVBQXNCO0FBQ2xCbUMsa0NBQU1yQixJQURZO0FBRWxCc0Isc0NBQVVwQyxRQUZRO0FBR2xCa0Isa0NBQU1BLElBSFk7QUFJbEJFLGlDQUFLQSxNQUFNRSxZQUFZZSxPQUFaLENBQW9CTixPQUFwQixDQUpPO0FBS2xCTyxxQ0FBU3JDLEdBTFM7QUFNbEJzQywwQ0FBYyxNQUNSakIsWUFBWWtCLE9BQVosQ0FBb0JULE9BQXBCLEVBQTZCLGdCQUFNVSxPQUFOLENBQWNWLE9BQWQsQ0FBN0IsQ0FEUSxHQUVSLElBRlEsR0FHUixnQkFBTVcsSUFBTixDQUFXekMsR0FBWDtBQVRZLHlCQUF0Qjs7QUFZQVMsK0JBQU9DLHlCQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0osU0F2Q0Q7QUF3Q0gsS0EvQ3lDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJxdWFsaWZpZWQtaGVhZGluZ3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHF1YWxpZmllZC1oZWFkaW5ncyDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIEhlYWRpbmdzIHNob3VsZCBub3QgYmUgcXVhbGlmaWVkXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctcXVhbGlmaWVkLWhlYWRpbmdzXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdxdWFsaWZpZWQtaGVhZGluZ3MnO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ0hlYWRpbmdzIHNob3VsZCBub3QgYmUgcXVhbGlmaWVkIChuYW1lc3BhY2VkKSc7XG5cbi8qKlxuICogY3NzIOe7hOWQiOeahOato+WImeWMuemFjVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT01CSU5BVE9SUyA9IC9bXFxzPit+XSsvZztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLndhbGtSdWxlcyhydWxlID0+IHtcbiAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7c2VsZWN0b3IsIHNvdXJjZX0gPSBydWxlO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3JHcm91cCA9IHNlbGVjdG9yLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBsZXQgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgY29uc3QgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbjtcbiAgICAgICAgICAgIGxldCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0b3JHcm91cC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9ySW5Hcm91cCA9IHNlbGVjdG9yR3JvdXBbaV0gfHwgJyc7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBzZWxlY3RvckluR3JvdXAuc3BsaXQoUEFUVEVSTl9DT01CSU5BVE9SUyk7XG5cbiAgICAgICAgICAgICAgICAvLyDot7Pov4fnrKzkuIDkuKrvvIznrKzkuIDkuKrmmK8gaFsxLTZdIOaYr+WQiOazleeahFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAxLCBzZWdtZW50TGVuID0gc2VnbWVudHMubGVuZ3RoOyBqIDwgc2VnbWVudExlbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKC9oWzEtNl0vLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvckluR3JvdXAuc2xpY2UoMCwgMSkgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wgKyBsaW5lQ29udGVudC5pbmRleE9mKHNlZ21lbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2Uoc2VnbWVudCwgY2hhbGsubWFnZW50YShzZWdtZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==