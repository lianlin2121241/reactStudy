'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'require-before-space';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file require-before-space 的检测逻辑
 *       `{` 对应 003: [强制] `选择器` 与 `{` 之间必须包含空格。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Must contain spaces before the `{`';

var arrayProto = Array.prototype;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        arrayProto.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {
            css.walkRules(function (rule) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                // 只有 { 时，才能用 between 处理，其他符号的 require-before-space 规则还未实现
                if (rule.raws.between === '' && realRuleVal.indexOf('{') !== -1) {
                    var source = rule.source;
                    var line = source.start.line;
                    var col = source.start.column + rule.selector.length;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';
                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        errorChar: '{',
                        line: line,
                        col: col,
                        message: MSG,
                        colorMessage: '`' + lineContent.replace('{', _chalk2.default.magenta('{')) + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3JlcXVpcmUtYmVmb3JlLXNwYWNlLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiTVNHIiwiYXJyYXlQcm90byIsIkFycmF5IiwicHJvdG90eXBlIiwiY2hlY2siLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJydWxlVmFsIiwib3B0cyIsInJlYWxSdWxlVmFsIiwicHVzaCIsImlzQXJyYXkiLCJsZW5ndGgiLCJ3YWxrUnVsZXMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJydWxlIiwicmF3cyIsImJldHdlZW4iLCJpbmRleE9mIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwiY29sIiwiY29sdW1uIiwic2VsZWN0b3IiLCJsaW5lQ29udGVudCIsImlucHV0Iiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsImVycm9yQ2hhciIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJyZXBsYWNlIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFNQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxzQkFBakI7O0FBRUE7Ozs7OztBQW5CQTs7Ozs7O0FBeUJBLElBQU1DLE1BQU0sb0NBQVo7O0FBRUEsSUFBTUMsYUFBYUMsTUFBTUMsU0FBekI7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZU4sUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNPLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQU1DLFVBQVVDLEtBQUtELE9BQXJCO0FBQ0EsWUFBTUUsY0FBYyxFQUFwQjtBQUNBVCxtQkFBV1UsSUFBWCxDQUFnQlQsTUFBTVUsT0FBTixDQUFjSixPQUFkLElBQXlCLE9BQXpCLEdBQW1DLE1BQW5ELEVBQTJERSxXQUEzRCxFQUF3RUYsT0FBeEU7O0FBRUEsWUFBSUUsWUFBWUcsTUFBaEIsRUFBd0I7QUFDcEJQLGdCQUFJUSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsb0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DUCxLQUFLUSxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVEO0FBQ0Esb0JBQUlDLEtBQUtDLElBQUwsQ0FBVUMsT0FBVixLQUFzQixFQUF0QixJQUE0QlYsWUFBWVcsT0FBWixDQUFvQixHQUFwQixNQUE2QixDQUFDLENBQTlELEVBQWlFO0FBQzdELHdCQUFNQyxTQUFTSixLQUFLSSxNQUFwQjtBQUNBLHdCQUFNQyxPQUFPRCxPQUFPRSxLQUFQLENBQWFELElBQTFCO0FBQ0Esd0JBQU1FLE1BQU1ILE9BQU9FLEtBQVAsQ0FBYUUsTUFBYixHQUFzQlIsS0FBS1MsUUFBTCxDQUFjZCxNQUFoRDtBQUNBLHdCQUFNZSxjQUFjLDBCQUFlTCxJQUFmLEVBQXFCRCxPQUFPTyxLQUFQLENBQWF2QixHQUFsQyxLQUEwQyxFQUE5RDtBQUNBQywyQkFBT3VCLElBQVAsQ0FBWS9CLFFBQVosRUFBc0I7QUFDbEJnQyw4QkFBTWIsSUFEWTtBQUVsQmMsa0NBQVVqQyxRQUZRO0FBR2xCa0MsbUNBQVcsR0FITztBQUlsQlYsOEJBQU1BLElBSlk7QUFLbEJFLDZCQUFLQSxHQUxhO0FBTWxCUyxpQ0FBU2xDLEdBTlM7QUFPbEJtQyxzQ0FBYyxNQUNSUCxZQUFZUSxPQUFaLENBQ0UsR0FERixFQUVFLGdCQUFNQyxPQUFOLENBQWMsR0FBZCxDQUZGLENBRFEsR0FLUixJQUxRLEdBTVIsZ0JBQU1DLElBQU4sQ0FBV3RDLEdBQVg7QUFiWSxxQkFBdEI7QUFlQWUsMkJBQU9DLHlCQUFQO0FBQ0g7QUFDSixhQTVCRDtBQTZCSDtBQUNKLEtBckN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoicmVxdWlyZS1iZWZvcmUtc3BhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHJlcXVpcmUtYmVmb3JlLXNwYWNlIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgYHtgIOWvueW6lCAwMDM6IFvlvLrliLZdIGDpgInmi6nlmahgIOS4jiBge2Ag5LmL6Ze05b+F6aG75YyF5ZCr56m65qC844CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdyZXF1aXJlLWJlZm9yZS1zcGFjZSc7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnTXVzdCBjb250YWluIHNwYWNlcyBiZWZvcmUgdGhlIGB7YCc7XG5cbmNvbnN0IGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IHJ1bGVWYWwgPSBvcHRzLnJ1bGVWYWw7XG4gICAgICAgIGNvbnN0IHJlYWxSdWxlVmFsID0gW107XG4gICAgICAgIGFycmF5UHJvdG8ucHVzaFtBcnJheS5pc0FycmF5KHJ1bGVWYWwpID8gJ2FwcGx5JyA6ICdjYWxsJ10ocmVhbFJ1bGVWYWwsIHJ1bGVWYWwpO1xuXG4gICAgICAgIGlmIChyZWFsUnVsZVZhbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIOWPquaciSB7IOaXtu+8jOaJjeiDveeUqCBiZXR3ZWVuIOWkhOeQhu+8jOWFtuS7luespuWPt+eahCByZXF1aXJlLWJlZm9yZS1zcGFjZSDop4TliJnov5jmnKrlrp7njrBcbiAgICAgICAgICAgICAgICBpZiAocnVsZS5yYXdzLmJldHdlZW4gPT09ICcnICYmIHJlYWxSdWxlVmFsLmluZGV4T2YoJ3snKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gcnVsZS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbiArIHJ1bGUuc2VsZWN0b3IubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogcnVsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2hhcjogJ3snLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGsubWFnZW50YSgneycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==