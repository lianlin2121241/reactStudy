'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'bulletproof-font-face'; /**
                                         * @file bulletproof-font-face 的检测逻辑
                                         *       Rule: Use the bulletproof @font-face syntax to avoid 404's in old IE
                                         *       (http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax)
                                         *       https://github.com/CSSLint/csslint/wiki/Bulletproof-font-face
                                         * @author ielgnaw(wuji0223@gmail.com)
                                         */

var PATTERN = /^\s?url\(['"].+\.eot\?.*['"]\)\s*format\(['"]embedded-opentype['"]\)[\s\S]*$/i;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = '@font-face declaration doesn\'t follow the fontspring bulletproof syntax';

var firstSrc = true;
var failedDecl = false;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {
            css.walkAtRules(function (atRule) {
                if (atRule.name !== 'font-face') {
                    return;
                }

                firstSrc = true;
                failedDecl = false;

                atRule.walkDecls(function (decl) {
                    if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                        return;
                    }

                    var prop = decl.prop,
                        value = decl.value;


                    if (prop === 'src') {
                        if (!value.match(PATTERN) && firstSrc) {
                            failedDecl = decl;
                            firstSrc = false;
                        } else if (value.match(PATTERN) && !firstSrc) {
                            failedDecl = false;
                        }
                    }
                });

                if (failedDecl) {
                    var source = failedDecl.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);
                    var col = source.start.column;
                    result.warn(RULENAME, {
                        node: atRule,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: '`' + lineContent + '` ' + MSG,
                        colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(MSG)
                    });

                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2J1bGxldHByb29mLWZvbnQtZmFjZS5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIlBBVFRFUk4iLCJNU0ciLCJmaXJzdFNyYyIsImZhaWxlZERlY2wiLCJjaGVjayIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa0F0UnVsZXMiLCJhdFJ1bGUiLCJuYW1lIiwid2Fsa0RlY2xzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwicHJvcCIsImRlY2wiLCJ2YWx1ZSIsIm1hdGNoIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsImNvbCIsImNvbHVtbiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZW5kIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLHVCQUFqQixDLENBbkJBOzs7Ozs7OztBQXFCQSxJQUFNQyxVQUFVLCtFQUFoQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSwwRUFBWjs7QUFFQSxJQUFJQyxXQUFXLElBQWY7QUFDQSxJQUFJQyxhQUFhLEtBQWpCOztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRLGtCQUFRQyxNQUFSLENBQWVOLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDTyxHQUFELEVBQU1DLE1BQU4sRUFBaUI7O0FBRWIsWUFBSUMsS0FBS0MsT0FBVCxFQUFrQjtBQUNkSCxnQkFBSUksV0FBSixDQUFnQixrQkFBVTtBQUN0QixvQkFBSUMsT0FBT0MsSUFBUCxLQUFnQixXQUFwQixFQUFpQztBQUM3QjtBQUNIOztBQUVEViwyQkFBVyxJQUFYO0FBQ0FDLDZCQUFhLEtBQWI7O0FBRUFRLHVCQUFPRSxTQUFQLENBQWlCLGdCQUFRO0FBQ3JCLHdCQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ1AsS0FBS1EsUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFIb0Isd0JBS2RDLElBTGMsR0FLQ0MsSUFMRCxDQUtkRCxJQUxjO0FBQUEsd0JBS1JFLEtBTFEsR0FLQ0QsSUFMRCxDQUtSQyxLQUxROzs7QUFPckIsd0JBQUlGLFNBQVMsS0FBYixFQUFvQjtBQUNoQiw0QkFBSSxDQUFDRSxNQUFNQyxLQUFOLENBQVlwQixPQUFaLENBQUQsSUFBeUJFLFFBQTdCLEVBQXVDO0FBQ25DQyx5Q0FBYWUsSUFBYjtBQUNBaEIsdUNBQVcsS0FBWDtBQUNILHlCQUhELE1BSUssSUFBSWlCLE1BQU1DLEtBQU4sQ0FBWXBCLE9BQVosS0FBd0IsQ0FBQ0UsUUFBN0IsRUFBdUM7QUFDeENDLHlDQUFhLEtBQWI7QUFDSDtBQUNKO0FBQ0osaUJBaEJEOztBQWtCQSxvQkFBSUEsVUFBSixFQUFnQjtBQUNaLHdCQUFNa0IsU0FBU2xCLFdBQVdrQixNQUExQjtBQUNBLHdCQUFNQyxPQUFPRCxPQUFPRSxLQUFQLENBQWFELElBQTFCO0FBQ0Esd0JBQU1FLGNBQWMsMEJBQWVGLElBQWYsRUFBcUJELE9BQU9JLEtBQVAsQ0FBYW5CLEdBQWxDLENBQXBCO0FBQ0Esd0JBQU1vQixNQUFNTCxPQUFPRSxLQUFQLENBQWFJLE1BQXpCO0FBQ0FwQiwyQkFBT3FCLElBQVAsQ0FBWTdCLFFBQVosRUFBc0I7QUFDbEI4Qiw4QkFBTWxCLE1BRFk7QUFFbEJtQixrQ0FBVS9CLFFBRlE7QUFHbEJ1Qiw4QkFBTUEsSUFIWTtBQUlsQkksNkJBQUtBLEdBSmE7QUFLbEJLLGlDQUFTLE1BQ0hQLFdBREcsR0FFSCxJQUZHLEdBR0h2QixHQVJZO0FBU2xCK0Isc0NBQWMsTUFDUix5Q0FDRVIsV0FERixFQUNlRSxHQURmLEVBQ29CTCxPQUFPWSxHQUFQLENBQVdOLE1BRC9CLENBRFEsR0FJUixJQUpRLEdBS1IsZ0JBQU1PLElBQU4sQ0FBV2pDLEdBQVg7QUFkWSxxQkFBdEI7O0FBaUJBYSwyQkFBT0MseUJBQVA7QUFDSDtBQUNKLGFBbEREO0FBbURIO0FBQ0osS0F4RHlDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJidWxsZXRwcm9vZi1mb250LWZhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGJ1bGxldHByb29mLWZvbnQtZmFjZSDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIFJ1bGU6IFVzZSB0aGUgYnVsbGV0cHJvb2YgQGZvbnQtZmFjZSBzeW50YXggdG8gYXZvaWQgNDA0J3MgaW4gb2xkIElFXG4gKiAgICAgICAoaHR0cDovL3d3dy5mb250c3ByaW5nLmNvbS9ibG9nL3RoZS1uZXctYnVsbGV0cHJvb2YtZm9udC1mYWNlLXN5bnRheClcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9DU1NMaW50L2Nzc2xpbnQvd2lraS9CdWxsZXRwcm9vZi1mb250LWZhY2VcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50LCBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdidWxsZXRwcm9vZi1mb250LWZhY2UnO1xuXG5jb25zdCBQQVRURVJOID0gL15cXHM/dXJsXFwoWydcIl0uK1xcLmVvdFxcPy4qWydcIl1cXClcXHMqZm9ybWF0XFwoWydcIl1lbWJlZGRlZC1vcGVudHlwZVsnXCJdXFwpW1xcc1xcU10qJC9pO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ0Bmb250LWZhY2UgZGVjbGFyYXRpb24gZG9lc25cXCd0IGZvbGxvdyB0aGUgZm9udHNwcmluZyBidWxsZXRwcm9vZiBzeW50YXgnO1xuXG5sZXQgZmlyc3RTcmMgPSB0cnVlO1xubGV0IGZhaWxlZERlY2wgPSBmYWxzZTtcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAob3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICBjc3Mud2Fsa0F0UnVsZXMoYXRSdWxlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYXRSdWxlLm5hbWUgIT09ICdmb250LWZhY2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmaXJzdFNyYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZmFpbGVkRGVjbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgYXRSdWxlLndhbGtEZWNscyhkZWNsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtwcm9wLCB2YWx1ZX0gPSBkZWNsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3JjJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZS5tYXRjaChQQVRURVJOKSAmJiBmaXJzdFNyYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZERlY2wgPSBkZWNsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0U3JjID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZS5tYXRjaChQQVRURVJOKSAmJiAhZmlyc3RTcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsZWREZWNsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChmYWlsZWREZWNsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGZhaWxlZERlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW47XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBhdFJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbmdlQ29sb3JCeVN0YXJ0QW5kRW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LCBjb2wsIHNvdXJjZS5lbmQuY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuIl19