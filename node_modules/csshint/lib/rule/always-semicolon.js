'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'always-semicolon';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
/**
 * @file always-semicolon 的检测逻辑
 *       012: [强制] 属性定义后必须以分号结尾。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Attribute definition must end with a semicolon';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            if (rule.raws.semicolon) {
                return;
            }

            var lastProp = rule.nodes[rule.nodes.length - 1];
            if (lastProp && lastProp.type !== 'comment') {
                var source = lastProp.source;
                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';

                var value = lastProp.important ? lastProp.value + (lastProp.important ? lastProp.important : ' !important') : lastProp.value;

                var colorStr = lastProp.prop + lastProp.raws.between + value;
                var col = source.start.column + colorStr.length;

                result.warn(RULENAME, {
                    node: rule,
                    ruleName: RULENAME,
                    line: line,
                    col: col,
                    message: MSG,
                    colorMessage: '`' + lineContent.replace(colorStr, _chalk2.default.magenta(colorStr)) + '` ' + _chalk2.default.grey(MSG)
                });
                global.CSSHINT_INVALID_ALL_COUNT++;
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Fsd2F5cy1zZW1pY29sb24uanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJNU0ciLCJjaGVjayIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa1J1bGVzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwicnVsZSIsInJhd3MiLCJzZW1pY29sb24iLCJsYXN0UHJvcCIsIm5vZGVzIiwibGVuZ3RoIiwidHlwZSIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJ2YWx1ZSIsImltcG9ydGFudCIsImNvbG9yU3RyIiwicHJvcCIsImJldHdlZW4iLCJjb2wiLCJjb2x1bW4iLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsInJlcGxhY2UiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLGtCQUFqQjs7QUFFQTs7Ozs7O0FBbkJBOzs7Ozs7QUF5QkEsSUFBTUMsTUFBTSxnREFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSCxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ksR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSSxDQUFDQyxLQUFLQyxPQUFWLEVBQW1CO0FBQ2Y7QUFDSDs7QUFFREgsWUFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCLGdCQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRCxnQkFBSUMsS0FBS0MsSUFBTCxDQUFVQyxTQUFkLEVBQXlCO0FBQ3JCO0FBQ0g7O0FBRUQsZ0JBQU1DLFdBQVdILEtBQUtJLEtBQUwsQ0FBV0osS0FBS0ksS0FBTCxDQUFXQyxNQUFYLEdBQW9CLENBQS9CLENBQWpCO0FBQ0EsZ0JBQUlGLFlBQVlBLFNBQVNHLElBQVQsS0FBa0IsU0FBbEMsRUFBNkM7QUFDekMsb0JBQU1DLFNBQVNKLFNBQVNJLE1BQXhCO0FBQ0Esb0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSxvQkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhbkIsR0FBbEMsS0FBMEMsRUFBOUQ7O0FBRUEsb0JBQU1vQixRQUFRVCxTQUFTVSxTQUFULEdBQ1JWLFNBQVNTLEtBQVQsSUFBa0JULFNBQVNVLFNBQVQsR0FBcUJWLFNBQVNVLFNBQTlCLEdBQTBDLGFBQTVELENBRFEsR0FFUlYsU0FBU1MsS0FGZjs7QUFJQSxvQkFBTUUsV0FBV1gsU0FBU1ksSUFBVCxHQUFnQlosU0FBU0YsSUFBVCxDQUFjZSxPQUE5QixHQUF3Q0osS0FBekQ7QUFDQSxvQkFBTUssTUFBTVYsT0FBT0UsS0FBUCxDQUFhUyxNQUFiLEdBQXNCSixTQUFTVCxNQUEzQzs7QUFFQVosdUJBQU8wQixJQUFQLENBQVkvQixRQUFaLEVBQXNCO0FBQ2xCZ0MsMEJBQU1wQixJQURZO0FBRWxCcUIsOEJBQVVqQyxRQUZRO0FBR2xCb0IsMEJBQU1BLElBSFk7QUFJbEJTLHlCQUFLQSxHQUphO0FBS2xCSyw2QkFBU2pDLEdBTFM7QUFNbEJrQyxrQ0FBYyxNQUNSYixZQUFZYyxPQUFaLENBQ0VWLFFBREYsRUFFRSxnQkFBTVcsT0FBTixDQUFjWCxRQUFkLENBRkYsQ0FEUSxHQUtSLElBTFEsR0FNUixnQkFBTVksSUFBTixDQUFXckMsR0FBWDtBQVpZLGlCQUF0QjtBQWNBUSx1QkFBT0MseUJBQVA7QUFDSDtBQUNKLFNBdENEO0FBdUNILEtBN0N5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiYWx3YXlzLXNlbWljb2xvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgYWx3YXlzLXNlbWljb2xvbiDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDAxMjogW+W8uuWItl0g5bGe5oCn5a6a5LmJ5ZCO5b+F6aG75Lul5YiG5Y+357uT5bC+44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdhbHdheXMtc2VtaWNvbG9uJztcblxuLyoqXG4gKiDplJnor6/kv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdBdHRyaWJ1dGUgZGVmaW5pdGlvbiBtdXN0IGVuZCB3aXRoIGEgc2VtaWNvbG9uJztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJ1bGUucmF3cy5zZW1pY29sb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGxhc3RQcm9wID0gcnVsZS5ub2Rlc1tydWxlLm5vZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGxhc3RQcm9wICYmIGxhc3RQcm9wLnR5cGUgIT09ICdjb21tZW50Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGxhc3RQcm9wLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKSB8fCAnJztcblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbGFzdFByb3AuaW1wb3J0YW50XG4gICAgICAgICAgICAgICAgICAgID8gbGFzdFByb3AudmFsdWUgKyAobGFzdFByb3AuaW1wb3J0YW50ID8gbGFzdFByb3AuaW1wb3J0YW50IDogJyAhaW1wb3J0YW50JylcbiAgICAgICAgICAgICAgICAgICAgOiBsYXN0UHJvcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yU3RyID0gbGFzdFByb3AucHJvcCArIGxhc3RQcm9wLnJhd3MuYmV0d2VlbiArIHZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW4gKyBjb2xvclN0ci5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiBydWxlLFxuICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JTdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGsubWFnZW50YShjb2xvclN0cilcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4pO1xuIl19