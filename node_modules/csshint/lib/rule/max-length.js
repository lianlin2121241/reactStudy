'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file max-length 的检测逻辑
 *       006: [强制] 每行不得超过 `120` 个字符，除非单行不可分割。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'max-length';

/**
 * 匹配 css 属性值的 url(...);
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_URI = /url\(["']?([^\)"']+)["']?\)/i;

var excludeLines = [];

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            excludeLines = [];

            var MSG = 'Each line must not be greater than ' + opts.ruleVal + ' characters';

            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            // 排除掉 background-image: 2px 2px url(data:image/gif;base64,.....); 的情况
            css.walkDecls(function (decl) {
                var value = decl.value;
                if (PATTERN_URI.test(value)) {
                    excludeLines.push(decl.source.start.line);
                }
            });

            var lines = css.source.input.css.split(/\n/);

            for (var i = 0, len = lines.length; i < len; i++) {
                if (lines[i].length > opts.ruleVal && excludeLines.indexOf(i + 1) === -1) {
                    result.warn(RULENAME, {
                        node: css,
                        ruleName: RULENAME,
                        line: i + 1,
                        message: MSG,
                        colorMessage: _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            }
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL21heC1sZW5ndGguanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJQQVRURVJOX1VSSSIsImV4Y2x1ZGVMaW5lcyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJNU0ciLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJ3YWxrRGVjbHMiLCJ2YWx1ZSIsImRlY2wiLCJ0ZXN0IiwicHVzaCIsInNvdXJjZSIsInN0YXJ0IiwibGluZSIsImxpbmVzIiwiaW5wdXQiLCJzcGxpdCIsImkiLCJsZW4iLCJsZW5ndGgiLCJpbmRleE9mIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7OztBQVRBOzs7Ozs7QUFlQSxJQUFNQSxXQUFXLFlBQWpCOztBQUVBOzs7Ozs7QUFNQSxJQUFNQyxjQUFjLDhCQUFwQjs7QUFFQSxJQUFJQyxlQUFlLEVBQW5COztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRLGtCQUFRQyxNQUFSLENBQWVKLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDSyxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDYixZQUFJQyxLQUFLQyxPQUFULEVBQWtCOztBQUVkTiwyQkFBZSxFQUFmOztBQUVBLGdCQUFNTyxNQUFNLHdDQUF3Q0YsS0FBS0MsT0FBN0MsR0FBdUQsYUFBbkU7O0FBRUEsZ0JBQUlFLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVEO0FBQ0FQLGdCQUFJUSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsb0JBQU1DLFFBQVFDLEtBQUtELEtBQW5CO0FBQ0Esb0JBQUliLFlBQVllLElBQVosQ0FBaUJGLEtBQWpCLENBQUosRUFBNkI7QUFDekJaLGlDQUFhZSxJQUFiLENBQWtCRixLQUFLRyxNQUFMLENBQVlDLEtBQVosQ0FBa0JDLElBQXBDO0FBQ0g7QUFDSixhQUxEOztBQU9BLGdCQUFNQyxRQUFRaEIsSUFBSWEsTUFBSixDQUFXSSxLQUFYLENBQWlCakIsR0FBakIsQ0FBcUJrQixLQUFyQixDQUEyQixJQUEzQixDQUFkOztBQUVBLGlCQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxNQUFNSixNQUFNSyxNQUE1QixFQUFvQ0YsSUFBSUMsR0FBeEMsRUFBNkNELEdBQTdDLEVBQWtEO0FBQzlDLG9CQUFJSCxNQUFNRyxDQUFOLEVBQVNFLE1BQVQsR0FBa0JuQixLQUFLQyxPQUF2QixJQUNHTixhQUFheUIsT0FBYixDQUFxQkgsSUFBSSxDQUF6QixNQUFnQyxDQUFDLENBRHhDLEVBRUU7QUFDRWxCLDJCQUFPc0IsSUFBUCxDQUFZNUIsUUFBWixFQUFzQjtBQUNsQjZCLDhCQUFNeEIsR0FEWTtBQUVsQnlCLGtDQUFVOUIsUUFGUTtBQUdsQm9CLDhCQUFNSSxJQUFJLENBSFE7QUFJbEJPLGlDQUFTdEIsR0FKUztBQUtsQnVCLHNDQUFjLGdCQUFNQyxJQUFOLENBQVd4QixHQUFYO0FBTEkscUJBQXRCO0FBT0FDLDJCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSjtBQUNKLEtBckN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoibWF4LWxlbmd0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgbWF4LWxlbmd0aCDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDAwNjogW+W8uuWItl0g5q+P6KGM5LiN5b6X6LaF6L+HIGAxMjBgIOS4quWtl+espu+8jOmZpOmdnuWNleihjOS4jeWPr+WIhuWJsuOAglxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdtYXgtbGVuZ3RoJztcblxuLyoqXG4gKiDljLnphY0gY3NzIOWxnuaAp+WAvOeahCB1cmwoLi4uKTtcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fVVJJID0gL3VybFxcKFtcIiddPyhbXlxcKVwiJ10rKVtcIiddP1xcKS9pO1xuXG5sZXQgZXhjbHVkZUxpbmVzID0gW107XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChvcHRzLnJ1bGVWYWwpIHtcblxuICAgICAgICAgICAgZXhjbHVkZUxpbmVzID0gW107XG5cbiAgICAgICAgICAgIGNvbnN0IE1TRyA9ICdFYWNoIGxpbmUgbXVzdCBub3QgYmUgZ3JlYXRlciB0aGFuICcgKyBvcHRzLnJ1bGVWYWwgKyAnIGNoYXJhY3RlcnMnO1xuXG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g5o6S6Zmk5o6JIGJhY2tncm91bmQtaW1hZ2U6IDJweCAycHggdXJsKGRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCwuLi4uLik7IOeahOaDheWGtVxuICAgICAgICAgICAgY3NzLndhbGtEZWNscyhkZWNsID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRlY2wudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKFBBVFRFUk5fVVJJLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVMaW5lcy5wdXNoKGRlY2wuc291cmNlLnN0YXJ0LmxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IGNzcy5zb3VyY2UuaW5wdXQuY3NzLnNwbGl0KC9cXG4vKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVzW2ldLmxlbmd0aCA+IG9wdHMucnVsZVZhbFxuICAgICAgICAgICAgICAgICAgICAmJiBleGNsdWRlTGluZXMuaW5kZXhPZihpICsgMSkgPT09IC0xXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBjc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=