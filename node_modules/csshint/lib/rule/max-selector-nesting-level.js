'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'max-selector-nesting-level';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file max-selector-nesting-level 的检测逻辑
 *       014: [建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COMBINATORS = /[\s>+~]+/g;

/**
 * 获取错误信息
 *
 * @param {number} level 层级数量
 *
 * @return {string} 错误信息
 */
var getMsg = function getMsg(level) {
    return '' + 'A nested hierarchy selector should be no more than ' + level + ' levels';
};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal || isNaN(opts.ruleVal)) {
            return;
        }

        var msg = getMsg(opts.ruleVal);

        css.walkRules(function (rule) {
            var selector = rule.selector;
            var selectorGroup = selector.split(',');

            for (var i = 0, len = selectorGroup.length; i < len; i++) {
                var selectorInGroup = selectorGroup[i] || '';

                // 去掉 attr 选择器
                selectorInGroup = selectorInGroup.replace(/\[.+?\](?::[^\s>+~\.#\[]+)?/g, '');

                // 先去掉 selectorInGroup 的前后空格，如果有空格，那么 segments 的第一个 item 是空，但是会增加 length
                var segments = selectorInGroup.replace(/^[\s\xa0\u3000]+|[\u3000\xa0\s]+$/g, '').split(PATTERN_COMBINATORS);

                if (segments.length > opts.ruleVal) {
                    var newLineMatch = selectorInGroup.match(/\n/g);
                    var extraLine = 0;
                    if (newLineMatch) {
                        extraLine += newLineMatch.length;
                    }

                    var source = rule.source;
                    var line = source.start.line + extraLine;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);

                    // 这里去掉 \n 是为了变色
                    selectorInGroup = selectorInGroup.replace(/\n/g, '');

                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        line: line,
                        message: msg,
                        colorMessage: '`' + lineContent.replace(selectorInGroup, _chalk2.default.magenta(selectorInGroup)) + '` ' + _chalk2.default.grey(msg)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL21heC1zZWxlY3Rvci1uZXN0aW5nLWxldmVsLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiUEFUVEVSTl9DT01CSU5BVE9SUyIsImdldE1zZyIsImxldmVsIiwiY2hlY2siLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsImlzTmFOIiwibXNnIiwid2Fsa1J1bGVzIiwic2VsZWN0b3IiLCJydWxlIiwic2VsZWN0b3JHcm91cCIsInNwbGl0IiwiaSIsImxlbiIsImxlbmd0aCIsInNlbGVjdG9ySW5Hcm91cCIsInJlcGxhY2UiLCJzZWdtZW50cyIsIm5ld0xpbmVNYXRjaCIsIm1hdGNoIiwiZXh0cmFMaW5lIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwibWFnZW50YSIsImdyZXkiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsNEJBQWpCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxzQkFBc0IsV0FBNUI7O0FBRUE7Ozs7Ozs7QUFPQSxJQUFNQyxTQUFTLFNBQVRBLE1BQVM7QUFBQSxXQUNYLEtBQ00scURBRE4sR0FFTUMsS0FGTixHQUdNLFNBSks7QUFBQSxDQUFmOztBQU1BOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRLGtCQUFRQyxNQUFSLENBQWVMLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDTSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7O0FBRWIsWUFBSSxDQUFDQyxLQUFLQyxPQUFOLElBQWlCQyxNQUFNRixLQUFLQyxPQUFYLENBQXJCLEVBQTBDO0FBQ3RDO0FBQ0g7O0FBRUQsWUFBTUUsTUFBTVQsT0FBT00sS0FBS0MsT0FBWixDQUFaOztBQUVBSCxZQUFJTSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQU1DLFdBQVdDLEtBQUtELFFBQXRCO0FBQ0EsZ0JBQU1FLGdCQUFnQkYsU0FBU0csS0FBVCxDQUFlLEdBQWYsQ0FBdEI7O0FBRUEsaUJBQUssSUFBSUMsSUFBSSxDQUFSLEVBQVdDLE1BQU1ILGNBQWNJLE1BQXBDLEVBQTRDRixJQUFJQyxHQUFoRCxFQUFxREQsR0FBckQsRUFBMEQ7QUFDdEQsb0JBQUlHLGtCQUFrQkwsY0FBY0UsQ0FBZCxLQUFvQixFQUExQzs7QUFFQTtBQUNBRyxrQ0FBa0JBLGdCQUFnQkMsT0FBaEIsQ0FBd0IsOEJBQXhCLEVBQXdELEVBQXhELENBQWxCOztBQUVBO0FBQ0Esb0JBQU1DLFdBQVdGLGdCQUFnQkMsT0FBaEIsQ0FBd0Isb0NBQXhCLEVBQThELEVBQTlELEVBQWtFTCxLQUFsRSxDQUNiZixtQkFEYSxDQUFqQjs7QUFJQSxvQkFBSXFCLFNBQVNILE1BQVQsR0FBa0JYLEtBQUtDLE9BQTNCLEVBQW9DO0FBQ2hDLHdCQUFNYyxlQUFlSCxnQkFBZ0JJLEtBQWhCLENBQXNCLEtBQXRCLENBQXJCO0FBQ0Esd0JBQUlDLFlBQVksQ0FBaEI7QUFDQSx3QkFBSUYsWUFBSixFQUFrQjtBQUNkRSxxQ0FBYUYsYUFBYUosTUFBMUI7QUFDSDs7QUFFRCx3QkFBTU8sU0FBU1osS0FBS1ksTUFBcEI7QUFDQSx3QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUFiLEdBQW9CRixTQUFqQztBQUNBLHdCQUFNSSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCRCxPQUFPSSxLQUFQLENBQWF4QixHQUFsQyxDQUFwQjs7QUFFQTtBQUNBYyxzQ0FBa0JBLGdCQUFnQkMsT0FBaEIsQ0FBd0IsS0FBeEIsRUFBK0IsRUFBL0IsQ0FBbEI7O0FBRUFkLDJCQUFPd0IsSUFBUCxDQUFZL0IsUUFBWixFQUFzQjtBQUNsQmdDLDhCQUFNbEIsSUFEWTtBQUVsQm1CLGtDQUFVakMsUUFGUTtBQUdsQjJCLDhCQUFNQSxJQUhZO0FBSWxCTyxpQ0FBU3ZCLEdBSlM7QUFLbEJ3QixzQ0FBYyxNQUNSTixZQUFZUixPQUFaLENBQW9CRCxlQUFwQixFQUFxQyxnQkFBTWdCLE9BQU4sQ0FBY2hCLGVBQWQsQ0FBckMsQ0FEUSxHQUVSLElBRlEsR0FHUixnQkFBTWlCLElBQU4sQ0FBVzFCLEdBQVg7QUFSWSxxQkFBdEI7QUFVQTJCLDJCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSixTQTFDRDtBQTJDSCxLQXBEeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6Im1heC1zZWxlY3Rvci1uZXN0aW5nLWxldmVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBtYXgtc2VsZWN0b3ItbmVzdGluZy1sZXZlbCDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDAxNDogW+W7uuiurl0g6YCJ5oup5Zmo55qE5bWM5aWX5bGC57qn5bqU5LiN5aSn5LqOIDMg57qn77yM5L2N572u6Z2g5ZCO55qE6ZmQ5a6a5p2h5Lu25bqU5bC95Y+v6IO957K+56Gu44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdtYXgtc2VsZWN0b3ItbmVzdGluZy1sZXZlbCc7XG5cbi8qKlxuICogY3NzIOe7hOWQiOeahOato+WImeWMuemFjVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT01CSU5BVE9SUyA9IC9bXFxzPit+XSsvZztcblxuLyoqXG4gKiDojrflj5bplJnor6/kv6Hmga9cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbGV2ZWwg5bGC57qn5pWw6YePXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSDplJnor6/kv6Hmga9cbiAqL1xuY29uc3QgZ2V0TXNnID0gbGV2ZWwgPT5cbiAgICAnJ1xuICAgICAgICArICdBIG5lc3RlZCBoaWVyYXJjaHkgc2VsZWN0b3Igc2hvdWxkIGJlIG5vIG1vcmUgdGhhbiAnXG4gICAgICAgICsgbGV2ZWxcbiAgICAgICAgKyAnIGxldmVscyc7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG5cbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwgfHwgaXNOYU4ob3B0cy5ydWxlVmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbXNnID0gZ2V0TXNnKG9wdHMucnVsZVZhbCk7XG5cbiAgICAgICAgY3NzLndhbGtSdWxlcyhydWxlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gcnVsZS5zZWxlY3RvcjtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yR3JvdXAgPSBzZWxlY3Rvci5zcGxpdCgnLCcpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0b3JHcm91cC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RvckluR3JvdXAgPSBzZWxlY3Rvckdyb3VwW2ldIHx8ICcnO1xuXG4gICAgICAgICAgICAgICAgLy8g5Y675o6JIGF0dHIg6YCJ5oup5ZmoXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JJbkdyb3VwID0gc2VsZWN0b3JJbkdyb3VwLnJlcGxhY2UoL1xcWy4rP1xcXSg/OjpbXlxccz4rflxcLiNcXFtdKyk/L2csICcnKTtcblxuICAgICAgICAgICAgICAgIC8vIOWFiOWOu+aOiSBzZWxlY3RvckluR3JvdXAg55qE5YmN5ZCO56m65qC877yM5aaC5p6c5pyJ56m65qC877yM6YKj5LmIIHNlZ21lbnRzIOeahOesrOS4gOS4qiBpdGVtIOaYr+epuu+8jOS9huaYr+S8muWinuWKoCBsZW5ndGhcbiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50cyA9IHNlbGVjdG9ySW5Hcm91cC5yZXBsYWNlKC9eW1xcc1xceGEwXFx1MzAwMF0rfFtcXHUzMDAwXFx4YTBcXHNdKyQvZywgJycpLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICBQQVRURVJOX0NPTUJJTkFUT1JTXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiBvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3TGluZU1hdGNoID0gc2VsZWN0b3JJbkdyb3VwLm1hdGNoKC9cXG4vZyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBleHRyYUxpbmUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3TGluZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYUxpbmUgKz0gbmV3TGluZU1hdGNoLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHJ1bGUuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmUgKyBleHRyYUxpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g6L+Z6YeM5Y675o6JIFxcbiDmmK/kuLrkuoblj5joibJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JJbkdyb3VwID0gc2VsZWN0b3JJbkdyb3VwLnJlcGxhY2UoL1xcbi9nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbXNnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2Uoc2VsZWN0b3JJbkdyb3VwLCBjaGFsay5tYWdlbnRhKHNlbGVjdG9ySW5Hcm91cCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KG1zZylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4pO1xuIl19