'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'disallow-important';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file disallow-important 的检测逻辑
 *       019: [建议] 尽量不使用 `!important` 声明。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Try not to use the `important` statement';

/**
 * 记录行号的临时变量，例如
 * color:red !important;height: 100px !important;
 * 这段 css ，希望的是这一行只报一次 !important 的错误，这一次把这一行里面的 !important 全部高亮
 *
 * @type {number}
 */
var lineCache = 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            lineCache = 0;

            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }
                if (decl.important) {
                    var source = decl.source;
                    var line = source.start.line;

                    // lineCache === line 时，说明是同一行的，那么就不报了
                    if (lineCache !== line) {
                        lineCache = line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(/!important/gi, _chalk2.default.magenta('!important')) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Rpc2FsbG93LWltcG9ydGFudC5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImxpbmVDYWNoZSIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJkZWNsIiwiaW1wb3J0YW50Iiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwicmVwbGFjZSIsIm1hZ2VudGEiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsb0JBQWpCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxNQUFNLDBDQUFaOztBQUVBOzs7Ozs7O0FBT0EsSUFBSUMsWUFBWSxDQUFoQjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSUMsS0FBS0MsT0FBVCxFQUFrQjs7QUFFZE4sd0JBQVksQ0FBWjs7QUFFQUcsZ0JBQUlJLFNBQUosQ0FBYyxnQkFBUTtBQUNsQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NKLEtBQUtLLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7QUFDRCxvQkFBSUMsS0FBS0MsU0FBVCxFQUFvQjtBQUNoQix3QkFBTUMsU0FBU0YsS0FBS0UsTUFBcEI7QUFDQSx3QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjs7QUFFQTtBQUNBLHdCQUFJZCxjQUFjYyxJQUFsQixFQUF3QjtBQUNwQmQsb0NBQVljLElBQVo7QUFDQSw0QkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhZCxHQUFsQyxLQUEwQyxFQUE5RDtBQUNBQywrQkFBT2MsSUFBUCxDQUFZcEIsUUFBWixFQUFzQjtBQUNsQnFCLGtDQUFNUixJQURZO0FBRWxCUyxzQ0FBVXRCLFFBRlE7QUFHbEJnQixrQ0FBTUEsSUFIWTtBQUlsQk8scUNBQVN0QixHQUpTO0FBS2xCdUIsMENBQWMsTUFDUk4sWUFBWU8sT0FBWixDQUNFLGNBREYsRUFFRSxnQkFBTUMsT0FBTixDQUFjLFlBQWQsQ0FGRixDQURRLEdBS1IsSUFMUSxHQU1SLGdCQUFNQyxJQUFOLENBQVcxQixHQUFYO0FBWFkseUJBQXRCO0FBYUFTLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSixhQTVCRDtBQTZCSDtBQUNKLEtBcEN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiZGlzYWxsb3ctaW1wb3J0YW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBkaXNhbGxvdy1pbXBvcnRhbnQg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMTk6IFvlu7rorq5dIOWwvemHj+S4jeS9v+eUqCBgIWltcG9ydGFudGAg5aOw5piO44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdkaXNhbGxvdy1pbXBvcnRhbnQnO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ1RyeSBub3QgdG8gdXNlIHRoZSBgaW1wb3J0YW50YCBzdGF0ZW1lbnQnO1xuXG4vKipcbiAqIOiusOW9leihjOWPt+eahOS4tOaXtuWPmOmHj++8jOS+i+WmglxuICogY29sb3I6cmVkICFpbXBvcnRhbnQ7aGVpZ2h0OiAxMDBweCAhaW1wb3J0YW50O1xuICog6L+Z5q61IGNzcyDvvIzluIzmnJvnmoTmmK/ov5nkuIDooYzlj6rmiqXkuIDmrKEgIWltcG9ydGFudCDnmoTplJnor6/vvIzov5nkuIDmrKHmiorov5nkuIDooYzph4zpnaLnmoQgIWltcG9ydGFudCDlhajpg6jpq5jkuq5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5sZXQgbGluZUNhY2hlID0gMDtcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKG9wdHMucnVsZVZhbCkge1xuXG4gICAgICAgICAgICBsaW5lQ2FjaGUgPSAwO1xuXG4gICAgICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRlY2wuaW1wb3J0YW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbGluZUNhY2hlID09PSBsaW5lIOaXtu+8jOivtOaYjuaYr+WQjOS4gOihjOeahO+8jOmCo+S5iOWwseS4jeaKpeS6hlxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZUNhY2hlICE9PSBsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ2FjaGUgPSBsaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyFpbXBvcnRhbnQvZ2ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFsay5tYWdlbnRhKCchaW1wb3J0YW50JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==