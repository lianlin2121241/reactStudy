'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'text-indent';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file text-indent 的检测逻辑
 *       Checks for text indent less than -99px
 *       https://github.com/CSSLint/csslint/wiki/Disallow-negative-text-indent
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = '' + 'Negative text-indent doesn\'t work well with RTL.' + 'If you use text-indent for image replacement explicitly set direction for that item to ltr';

var textIndentDecl = void 0;
var direction = void 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {

            textIndentDecl = false;
            direction = 'inherit';

            rule.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }
                var prop = decl.prop;
                var value = (0, _util.getPropertyValue)(decl.value);

                if (prop === 'text-indent' && value[0].value < -99) {
                    textIndentDecl = decl;
                } else if (prop === 'direction' && value.value === 'ltr') {
                    direction = 'ltr';
                }
            });

            if (textIndentDecl && direction !== 'ltr') {
                var source = textIndentDecl.source;
                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);
                var col = source.start.column;
                result.warn(RULENAME, {
                    node: rule,
                    ruleName: RULENAME,
                    line: line,
                    col: col,
                    message: MSG,
                    colorMessage: '`' + lineContent.replace(textIndentDecl.prop, _chalk2.default.magenta(textIndentDecl.prop)) + '` ' + _chalk2.default.grey(MSG)
                });
                global.CSSHINT_INVALID_ALL_COUNT++;
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3RleHQtaW5kZW50LmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiTVNHIiwidGV4dEluZGVudERlY2wiLCJkaXJlY3Rpb24iLCJjaGVjayIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa1J1bGVzIiwicnVsZSIsIndhbGtEZWNscyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsInByb3AiLCJkZWNsIiwidmFsdWUiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sIiwiY29sdW1uIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJyZXBsYWNlIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxhQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sS0FDTixtREFETSxHQUVOLDRGQUZOOztBQUlBLElBQUlDLHVCQUFKO0FBQ0EsSUFBSUMsa0JBQUo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZUwsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNNLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUksQ0FBQ0MsS0FBS0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBRURILFlBQUlJLFNBQUosQ0FBYyxnQkFBUTs7QUFFbEJSLDZCQUFpQixLQUFqQjtBQUNBQyx3QkFBWSxTQUFaOztBQUVBUSxpQkFBS0MsU0FBTCxDQUFlLGdCQUFRO0FBQ25CLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ04sS0FBS08sUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDtBQUNELG9CQUFNQyxPQUFPQyxLQUFLRCxJQUFsQjtBQUNBLG9CQUFNRSxRQUFRLDRCQUFpQkQsS0FBS0MsS0FBdEIsQ0FBZDs7QUFFQSxvQkFBSUYsU0FBUyxhQUFULElBQTBCRSxNQUFNLENBQU4sRUFBU0EsS0FBVCxHQUFpQixDQUFDLEVBQWhELEVBQW9EO0FBQ2hEaEIscUNBQWlCZSxJQUFqQjtBQUNILGlCQUZELE1BR0ssSUFBSUQsU0FBUyxXQUFULElBQXdCRSxNQUFNQSxLQUFOLEtBQWdCLEtBQTVDLEVBQW1EO0FBQ3BEZixnQ0FBWSxLQUFaO0FBQ0g7QUFDSixhQWJEOztBQWVBLGdCQUFJRCxrQkFBa0JDLGNBQWMsS0FBcEMsRUFBMkM7QUFDdkMsb0JBQU1nQixTQUFTakIsZUFBZWlCLE1BQTlCO0FBQ0Esb0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSxvQkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhakIsR0FBbEMsQ0FBcEI7QUFDQSxvQkFBTWtCLE1BQU1MLE9BQU9FLEtBQVAsQ0FBYUksTUFBekI7QUFDQWxCLHVCQUFPbUIsSUFBUCxDQUFZMUIsUUFBWixFQUFzQjtBQUNsQjJCLDBCQUFNaEIsSUFEWTtBQUVsQmlCLDhCQUFVNUIsUUFGUTtBQUdsQm9CLDBCQUFNQSxJQUhZO0FBSWxCSSx5QkFBS0EsR0FKYTtBQUtsQkssNkJBQVM1QixHQUxTO0FBTWxCNkIsa0NBQWMsTUFDUlIsWUFBWVMsT0FBWixDQUNFN0IsZUFBZWMsSUFEakIsRUFFRSxnQkFBTWdCLE9BQU4sQ0FBYzlCLGVBQWVjLElBQTdCLENBRkYsQ0FEUSxHQUtSLElBTFEsR0FNUixnQkFBTWlCLElBQU4sQ0FBV2hDLEdBQVg7QUFaWSxpQkFBdEI7QUFjQVksdUJBQU9DLHlCQUFQO0FBQ0g7QUFDSixTQXpDRDtBQTBDSCxLQWhEeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6InRleHQtaW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSB0ZXh0LWluZGVudCDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIENoZWNrcyBmb3IgdGV4dCBpbmRlbnQgbGVzcyB0aGFuIC05OXB4XG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctbmVnYXRpdmUtdGV4dC1pbmRlbnRcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50LCBnZXRQcm9wZXJ0eVZhbHVlfSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ3RleHQtaW5kZW50JztcblxuLyoqXG4gKiDplJnor6/nmoTkv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICcnXG4gICAgKyAnTmVnYXRpdmUgdGV4dC1pbmRlbnQgZG9lc25cXCd0IHdvcmsgd2VsbCB3aXRoIFJUTC4nXG4gICAgKyAnSWYgeW91IHVzZSB0ZXh0LWluZGVudCBmb3IgaW1hZ2UgcmVwbGFjZW1lbnQgZXhwbGljaXRseSBzZXQgZGlyZWN0aW9uIGZvciB0aGF0IGl0ZW0gdG8gbHRyJztcblxubGV0IHRleHRJbmRlbnREZWNsO1xubGV0IGRpcmVjdGlvbjtcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG5cbiAgICAgICAgICAgIHRleHRJbmRlbnREZWNsID0gZmFsc2U7XG4gICAgICAgICAgICBkaXJlY3Rpb24gPSAnaW5oZXJpdCc7XG5cbiAgICAgICAgICAgIHJ1bGUud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IGRlY2wucHJvcDtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGdldFByb3BlcnR5VmFsdWUoZGVjbC52YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3RleHQtaW5kZW50JyAmJiB2YWx1ZVswXS52YWx1ZSA8IC05OSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0SW5kZW50RGVjbCA9IGRlY2w7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3AgPT09ICdkaXJlY3Rpb24nICYmIHZhbHVlLnZhbHVlID09PSAnbHRyJykge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAnbHRyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRleHRJbmRlbnREZWNsICYmIGRpcmVjdGlvbiAhPT0gJ2x0cicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSB0ZXh0SW5kZW50RGVjbC5zb3VyY2U7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbjtcbiAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiBydWxlLFxuICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEluZGVudERlY2wucHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFsay5tYWdlbnRhKHRleHRJbmRlbnREZWNsLnByb3ApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==