'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 匹配 css 表达式的正则
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_EXP = /expression\(/i;

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file disallow-expression 的检测逻辑
 *       050: [强制] 禁止使用 `Expression`。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'disallow-expression';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Disallow use `Expression`';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {
            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var parts = _postcss2.default.list.space(decl.value);
                for (var i = 0, len = parts.length; i < len; i++) {
                    var part = parts[i];
                    if (PATTERN_EXP.test(part)) {
                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        var col = source.start.column + decl.prop.length + decl.raws.between.length;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(/expression/g, _chalk2.default.magenta('expression')) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                        continue;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Rpc2FsbG93LWV4cHJlc3Npb24uanMiXSwibmFtZXMiOlsiUEFUVEVSTl9FWFAiLCJSVUxFTkFNRSIsIk1TRyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJwYXJ0cyIsImxpc3QiLCJzcGFjZSIsImRlY2wiLCJ2YWx1ZSIsImkiLCJsZW4iLCJsZW5ndGgiLCJwYXJ0IiwidGVzdCIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJjb2wiLCJjb2x1bW4iLCJwcm9wIiwicmF3cyIsImJldHdlZW4iLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsInJlcGxhY2UiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxjQUFjLGVBQXBCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxXQUFXLHFCQUFqQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSwyQkFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSCxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ksR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSUMsS0FBS0MsT0FBVCxFQUFrQjtBQUNkSCxnQkFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRCxvQkFBTUMsUUFBUSxrQkFBUUMsSUFBUixDQUFhQyxLQUFiLENBQW1CQyxLQUFLQyxLQUF4QixDQUFkO0FBQ0EscUJBQUssSUFBSUMsSUFBSSxDQUFSLEVBQVdDLE1BQU1OLE1BQU1PLE1BQTVCLEVBQW9DRixJQUFJQyxHQUF4QyxFQUE2Q0QsR0FBN0MsRUFBa0Q7QUFDOUMsd0JBQU1HLE9BQU9SLE1BQU1LLENBQU4sQ0FBYjtBQUNBLHdCQUFJbEIsWUFBWXNCLElBQVosQ0FBaUJELElBQWpCLENBQUosRUFBNEI7QUFDeEIsNEJBQU1FLFNBQVNQLEtBQUtPLE1BQXBCO0FBQ0EsNEJBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSw0QkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhdEIsR0FBbEMsQ0FBcEI7QUFDQSw0QkFBTXVCLE1BQU1MLE9BQU9FLEtBQVAsQ0FBYUksTUFBYixHQUFzQmIsS0FBS2MsSUFBTCxDQUFVVixNQUFoQyxHQUF5Q0osS0FBS2UsSUFBTCxDQUFVQyxPQUFWLENBQWtCWixNQUF2RTtBQUNBZCwrQkFBTzJCLElBQVAsQ0FBWWhDLFFBQVosRUFBc0I7QUFDbEJpQyxrQ0FBTWxCLElBRFk7QUFFbEJtQixzQ0FBVWxDLFFBRlE7QUFHbEJ1QixrQ0FBTUEsSUFIWTtBQUlsQkksaUNBQUtBLEdBSmE7QUFLbEJRLHFDQUFTbEMsR0FMUztBQU1sQm1DLDBDQUFjLE1BQ1JYLFlBQVlZLE9BQVosQ0FBb0IsYUFBcEIsRUFBbUMsZ0JBQU1DLE9BQU4sQ0FBYyxZQUFkLENBQW5DLENBRFEsR0FFUixJQUZRLEdBR1IsZ0JBQU1DLElBQU4sQ0FBV3RDLEdBQVg7QUFUWSx5QkFBdEI7QUFXQVEsK0JBQU9DLHlCQUFQO0FBQ0E7QUFDSDtBQUNKO0FBRUosYUE3QkQ7QUE4Qkg7QUFDSixLQWxDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6ImRpc2FsbG93LWV4cHJlc3Npb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGRpc2FsbG93LWV4cHJlc3Npb24g55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwNTA6IFvlvLrliLZdIOemgeatouS9v+eUqCBgRXhwcmVzc2lvbmDjgIJcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDljLnphY0gY3NzIOihqOi+vuW8j+eahOato+WImVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9FWFAgPSAvZXhwcmVzc2lvblxcKC9pO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnZGlzYWxsb3ctZXhwcmVzc2lvbic7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnRGlzYWxsb3cgdXNlIGBFeHByZXNzaW9uYCc7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gcG9zdGNzcy5saXN0LnNwYWNlKGRlY2wudmFsdWUpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChQQVRURVJOX0VYUC50ZXN0KHBhcnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uICsgZGVjbC5wcm9wLmxlbmd0aCArIGRlY2wucmF3cy5iZXR3ZWVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKC9leHByZXNzaW9uL2csIGNoYWxrLm1hZ2VudGEoJ2V4cHJlc3Npb24nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuIl19