'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'fallback-colors';

/* eslint-disable fecs-valid-map-set */
/**
 * @file fallback-colors 的检测逻辑
 *       For older browsers that don't support RGBA, HSL, or HSLA, provide a fallback color
 *       https://github.com/CSSLint/csslint/wiki/Require-fallback-colors
 * @author ielgnaw(wuji0223@gmail.com)
 */

var propertiesToCheck = {
    'color': 1,
    'background': 1,
    'border-color': 1,
    'border-top-color': 1,
    'border-right-color': 1,
    'border-bottom-color': 1,
    'border-left-color': 1,
    'border': 1,
    'border-top': 1,
    'border-right': 1,
    'border-bottom': 1,
    'border-left': 1,
    'background-color': 1
};
/* eslint-enable fecs-valid-map-set */

var lastProperty = void 0;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = 'For older browsers that don\'t support RGBA, HSL, or HSLA, provide a fallback color';

/**
 * decl 的处理
 *
 * @param {Object} decl postcss 节点对象
 * @param {Object} result postcss result 对象
 */
var declHandler = function declHandler(decl, result) {
    var prop = decl.prop;
    var value = (0, _util.getPropertyValue)(decl.value);

    var len = value.length;
    var i = 0;
    var colorType = '';

    while (i < len) {
        if (value[i].type === 'color') {
            if ('alpha' in value[i] || 'hue' in value[i]) {
                if (/([^\)]+)\(/.test(value[i].text)) {
                    colorType = RegExp.$1.toUpperCase();
                }

                if (!lastProperty || lastProperty.prop !== prop || lastProperty.colorType !== 'compat') {
                    var source = decl.source;
                    var line = source.start.line;
                    var col = source.start.column;
                    var str = 'Fallback ' + prop + ' (hex or RGB) should precede ' + colorType + ' ' + prop;
                    var colorStr = 'Fallback ' + _chalk2.default.magenta(prop) + ' (hex or RGB) should precede ' + _chalk2.default.magenta(colorType) + ' ' + _chalk2.default.magenta(prop);
                    result.warn(RULENAME, {
                        node: decl,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: str + MSG,
                        colorMessage: '`' + colorStr + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            } else {
                decl.colorType = 'compat';
            }
        }
        i++;
    }
};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            lastProperty = null;

            rule.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                if (propertiesToCheck[decl.prop]) {
                    declHandler(decl, result);
                }

                lastProperty = decl;
            });
        });
    };
});
//# sourceMappingURL=data:application/json;base64,