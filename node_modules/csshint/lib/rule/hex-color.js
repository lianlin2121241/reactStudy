'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'hex-color';

/**
 * 匹配 rgb, hsl 颜色表达式的正则
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file hex-color 的检测逻辑
 *       029: [强制] RGB颜色值必须使用十六进制记号形式 `#rrggbb`。不允许使用 `rgb()`。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COLOR_EXP = /(\brgb\b|\bhsl\b)/gi;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = '' + 'Color value must use the sixteen hexadecimal mark forms such as `#RGB`.' + ' Don\'t use RGB、HSL expression';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {

            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var match = null;
                /* eslint-disable no-extra-boolean-cast */
                while (!!(match = PATTERN_COLOR_EXP.exec(decl.value))) {
                    var source = decl.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);
                    var col = source.start.column + decl.prop.length + decl.raws.between.length + match.index;
                    result.warn(RULENAME, {
                        node: decl,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: MSG,
                        colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
                /* eslint-enable no-extra-boolean-cast */
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2hleC1jb2xvci5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIlBBVFRFUk5fQ09MT1JfRVhQIiwiTVNHIiwiY2hlY2siLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtEZWNscyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsIm1hdGNoIiwiZXhlYyIsImRlY2wiLCJ2YWx1ZSIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJjb2wiLCJjb2x1bW4iLCJwcm9wIiwibGVuZ3RoIiwicmF3cyIsImJldHdlZW4iLCJpbmRleCIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZW5kIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLFdBQWpCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxvQkFBb0IscUJBQTFCOztBQUVBOzs7Ozs7QUFNQSxJQUFNQyxNQUFNLEtBQ04seUVBRE0sR0FFTixnQ0FGTjs7QUFJQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCOztBQUViLFlBQUlDLEtBQUtDLE9BQVQsRUFBa0I7O0FBRWRILGdCQUFJSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsb0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVELG9CQUFJQyxRQUFRLElBQVo7QUFDQTtBQUNBLHVCQUFPLENBQUMsRUFBRUEsUUFBUVosa0JBQWtCYSxJQUFsQixDQUF1QkMsS0FBS0MsS0FBNUIsQ0FBVixDQUFSLEVBQXVEO0FBQ25ELHdCQUFNQyxTQUFTRixLQUFLRSxNQUFwQjtBQUNBLHdCQUFNQyxPQUFPRCxPQUFPRSxLQUFQLENBQWFELElBQTFCO0FBQ0Esd0JBQU1FLGNBQWMsMEJBQWVGLElBQWYsRUFBcUJELE9BQU9JLEtBQVAsQ0FBYWhCLEdBQWxDLENBQXBCO0FBQ0Esd0JBQU1pQixNQUFNTCxPQUFPRSxLQUFQLENBQWFJLE1BQWIsR0FBc0JSLEtBQUtTLElBQUwsQ0FBVUMsTUFBaEMsR0FBeUNWLEtBQUtXLElBQUwsQ0FBVUMsT0FBVixDQUFrQkYsTUFBM0QsR0FBb0VaLE1BQU1lLEtBQXRGO0FBQ0F0QiwyQkFBT3VCLElBQVAsQ0FBWTdCLFFBQVosRUFBc0I7QUFDbEI4Qiw4QkFBTWYsSUFEWTtBQUVsQmdCLGtDQUFVL0IsUUFGUTtBQUdsQmtCLDhCQUFNQSxJQUhZO0FBSWxCSSw2QkFBS0EsR0FKYTtBQUtsQlUsaUNBQVM5QixHQUxTO0FBTWxCK0Isc0NBQWMsTUFDUix5Q0FDRWIsV0FERixFQUNlRSxHQURmLEVBQ29CTCxPQUFPaUIsR0FBUCxDQUFXWCxNQUQvQixDQURRLEdBSVIsSUFKUSxHQUtSLGdCQUFNWSxJQUFOLENBQVdqQyxHQUFYO0FBWFkscUJBQXRCO0FBYUFRLDJCQUFPQyx5QkFBUDtBQUNIO0FBQ0Q7QUFDSCxhQTVCRDtBQTZCSDtBQUNKLEtBbkN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiaGV4LWNvbG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBoZXgtY29sb3Ig55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMjk6IFvlvLrliLZdIFJHQuminOiJsuWAvOW/hemhu+S9v+eUqOWNgeWFrei/m+WItuiusOWPt+W9ouW8jyBgI3JyZ2diYmDjgILkuI3lhYHorrjkvb/nlKggYHJnYigpYOOAglxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnQsIGNoYW5nZUNvbG9yQnlTdGFydEFuZEVuZEluZGV4fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ2hleC1jb2xvcic7XG5cbi8qKlxuICog5Yy56YWNIHJnYiwgaHNsIOminOiJsuihqOi+vuW8j+eahOato+WImVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT0xPUl9FWFAgPSAvKFxcYnJnYlxcYnxcXGJoc2xcXGIpL2dpO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJydcbiAgICArICdDb2xvciB2YWx1ZSBtdXN0IHVzZSB0aGUgc2l4dGVlbiBoZXhhZGVjaW1hbCBtYXJrIGZvcm1zIHN1Y2ggYXMgYCNSR0JgLidcbiAgICArICcgRG9uXFwndCB1c2UgUkdC44CBSFNMIGV4cHJlc3Npb24nO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGlmIChvcHRzLnJ1bGVWYWwpIHtcblxuICAgICAgICAgICAgY3NzLndhbGtEZWNscyhkZWNsID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1leHRyYS1ib29sZWFuLWNhc3QgKi9cbiAgICAgICAgICAgICAgICB3aGlsZSAoISEobWF0Y2ggPSBQQVRURVJOX0NPTE9SX0VYUC5leGVjKGRlY2wudmFsdWUpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uICsgZGVjbC5wcm9wLmxlbmd0aCArIGRlY2wucmF3cy5iZXR3ZWVuLmxlbmd0aCArIG1hdGNoLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNvbnRlbnQsIGNvbCwgc291cmNlLmVuZC5jb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0ICovXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=