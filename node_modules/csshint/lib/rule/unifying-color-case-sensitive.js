'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'unifying-color-case-sensitive';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file unifying-color-case-sensitive 的检测逻辑
 *       032: [建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = '' + 'The color value of the small English character. ' + 'If no lower case also need to ensure that the same project to keep the same case';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {
            (function () {

                var source = void 0;
                var line = void 0;
                var lineContent = void 0;
                var col = void 0;

                css.walkDecls(function (decl) {
                    /* jshint maxstatements: 42, maxcomplexity: 12 */
                    if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                        return;
                    }

                    var value = decl.value;

                    if (!/#([a-fA-Z0-9]{3,6})/.test(value) // 排除非 hexColor
                    || /^#([0-9]{6})/.test(value) // 排除 #000000 纯数字的情况
                    ) {
                            return;
                        }

                    var simpleColorStr = RegExp.$1;

                    // 当前这个颜色值里的字母全是小写 #fafafa
                    if (/^([a-z0-9]{3,6})$/.test(simpleColorStr)) {
                        if (global.CSSHINT_HEXCOLOR_CASE_FLAG === undefined) {
                            global.CSSHINT_HEXCOLOR_CASE_FLAG = 0;
                        }

                        // 说明之前已经检测过的颜色值里面的字母应该是大写
                        if (global.CSSHINT_HEXCOLOR_CASE_FLAG === 1) {
                            source = decl.source;
                            line = source.start.line;
                            lineContent = (0, _util.getLineContent)(line, source.input.css);
                            col = source.start.column + decl.prop.length + decl.raws.between.length;
                            var upperCaseMsg = MSG + ', Current project case is UpperCase.';
                            var upperCaseColorMsg = MSG + ', Current project case is ' + _chalk2.default.magenta('UpperCase.');

                            result.warn(RULENAME, {
                                node: decl,
                                ruleName: RULENAME,
                                line: line,
                                col: col,
                                message: upperCaseMsg,
                                colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(upperCaseColorMsg)
                            });

                            global.CSSHINT_INVALID_ALL_COUNT++;
                        }
                    }
                    // 当前这个颜色值里面的字母全是大写 #FAFAFA
                    else if (/^([A-Z0-9]{3,6})$/.test(simpleColorStr)) {
                            if (global.CSSHINT_HEXCOLOR_CASE_FLAG === undefined) {
                                global.CSSHINT_HEXCOLOR_CASE_FLAG = 1;
                            }
                            // 说明之前已经检测过的颜色值里面的字母应该是大写
                            if (global.CSSHINT_HEXCOLOR_CASE_FLAG === 0) {
                                source = decl.source;
                                line = source.start.line;
                                lineContent = (0, _util.getLineContent)(line, source.input.css);
                                col = source.start.column + decl.prop.length + decl.raws.between.length;
                                var lowerCaseMsg = MSG + ', Current project case is LowerCase.';
                                var lowerCaseColorMsg = MSG + ', Current project case is ' + _chalk2.default.magenta('LowerCase.');

                                result.warn(RULENAME, {
                                    node: decl,
                                    ruleName: RULENAME,
                                    line: line,
                                    col: col,
                                    message: lowerCaseMsg,
                                    colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(lowerCaseColorMsg)
                                });

                                global.CSSHINT_INVALID_ALL_COUNT++;
                            }
                        }
                        // 当前这个颜色值里面的字母有大写也有小写 #faFafA
                        else {
                                var str = MSG;
                                var colorStr = MSG;
                                if (global.CSSHINT_HEXCOLOR_CASE_FLAG === 0) {
                                    str += ', Current project case is LowerCase.';
                                    colorStr += ', Current project case is ' + _chalk2.default.magenta('LowerCase.');
                                } else if (global.CSSHINT_HEXCOLOR_CASE_FLAG === 1) {
                                    str += ', Current project case is UpperCase.';
                                    colorStr += ', Current project case is ' + _chalk2.default.magenta('UpperCase.');
                                }
                                source = decl.source;
                                line = source.start.line;
                                lineContent = (0, _util.getLineContent)(line, source.input.css);
                                col = source.start.column + decl.prop.length + decl.raws.between.length;

                                result.warn(RULENAME, {
                                    node: decl,
                                    ruleName: RULENAME,
                                    line: line,
                                    col: col,
                                    message: str,
                                    colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(colorStr)
                                });

                                global.CSSHINT_INVALID_ALL_COUNT++;
                            }
                });
            })();
        }
    };
});
//# sourceMappingURL=data:application/json;base64,