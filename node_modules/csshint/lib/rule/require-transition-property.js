'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'require-transition-property';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file require-transition-property 的检测逻辑
 *       041: [强制] 使用 `transition` 时应指定 `transition-property`。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'When using the `transition`, `transition-property` should be specified';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {

            css.walkDecls(function (decl) {

                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var prop = decl.prop;

                if (prop === 'transition') {
                    var parts = _postcss2.default.list.space(decl.value);
                    if (parts.indexOf('all') > -1) {
                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(/\ball\b/g, _chalk2.default.magenta('all')) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3JlcXVpcmUtdHJhbnNpdGlvbi1wcm9wZXJ0eS5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJwcm9wIiwiZGVjbCIsInBhcnRzIiwibGlzdCIsInNwYWNlIiwidmFsdWUiLCJpbmRleE9mIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwicmVwbGFjZSIsIm1hZ2VudGEiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsNkJBQWpCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxNQUFNLHdFQUFaOztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRLGtCQUFRQyxNQUFSLENBQWVILFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDSSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7O0FBRWIsWUFBSUMsS0FBS0MsT0FBVCxFQUFrQjs7QUFFZEgsZ0JBQUlJLFNBQUosQ0FBYyxnQkFBUTs7QUFFbEIsb0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVELG9CQUFNQyxPQUFPQyxLQUFLRCxJQUFsQjs7QUFFQSxvQkFBSUEsU0FBUyxZQUFiLEVBQTJCO0FBQ3ZCLHdCQUFNRSxRQUFRLGtCQUFRQyxJQUFSLENBQWFDLEtBQWIsQ0FBbUJILEtBQUtJLEtBQXhCLENBQWQ7QUFDQSx3QkFBSUgsTUFBTUksT0FBTixDQUFjLEtBQWQsSUFBdUIsQ0FBQyxDQUE1QixFQUErQjtBQUMzQiw0QkFBTUMsU0FBU04sS0FBS00sTUFBcEI7QUFDQSw0QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjtBQUNBLDRCQUFNRSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCRCxPQUFPSSxLQUFQLENBQWFuQixHQUFsQyxDQUFwQjtBQUNBQywrQkFBT21CLElBQVAsQ0FBWXhCLFFBQVosRUFBc0I7QUFDbEJ5QixrQ0FBTVosSUFEWTtBQUVsQmEsc0NBQVUxQixRQUZRO0FBR2xCb0Isa0NBQU1BLElBSFk7QUFJbEJPLHFDQUFTMUIsR0FKUztBQUtsQjJCLDBDQUFjLE1BQ1JOLFlBQVlPLE9BQVosQ0FBb0IsVUFBcEIsRUFBZ0MsZ0JBQU1DLE9BQU4sQ0FBYyxLQUFkLENBQWhDLENBRFEsR0FFUixJQUZRLEdBR1IsZ0JBQU1DLElBQU4sQ0FBVzlCLEdBQVg7QUFSWSx5QkFBdEI7QUFVQVEsK0JBQU9DLHlCQUFQO0FBQ0g7QUFDSjtBQUNKLGFBM0JEO0FBNEJIO0FBQ0osS0FsQ3lDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJyZXF1aXJlLXRyYW5zaXRpb24tcHJvcGVydHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHJlcXVpcmUtdHJhbnNpdGlvbi1wcm9wZXJ0eSDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDA0MTogW+W8uuWItl0g5L2/55SoIGB0cmFuc2l0aW9uYCDml7blupTmjIflrpogYHRyYW5zaXRpb24tcHJvcGVydHlg44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdyZXF1aXJlLXRyYW5zaXRpb24tcHJvcGVydHknO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ1doZW4gdXNpbmcgdGhlIGB0cmFuc2l0aW9uYCwgYHRyYW5zaXRpb24tcHJvcGVydHlgIHNob3VsZCBiZSBzcGVjaWZpZWQnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGlmIChvcHRzLnJ1bGVWYWwpIHtcblxuICAgICAgICAgICAgY3NzLndhbGtEZWNscyhkZWNsID0+IHtcblxuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gZGVjbC5wcm9wO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb3AgPT09ICd0cmFuc2l0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IHBvc3Rjc3MubGlzdC5zcGFjZShkZWNsLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzLmluZGV4T2YoJ2FsbCcpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKC9cXGJhbGxcXGIvZywgY2hhbGsubWFnZW50YSgnYWxsJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuIl19