'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

var _colors = require('../colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file disallow-named-color 的检测逻辑
 *       031: [强制] 颜色值不允许使用命名色值。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'disallow-named-color';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Color values using named color value is not allowed';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {

            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var parts = _postcss2.default.list.space(decl.value);
                for (var i = 0, len = parts.length; i < len; i++) {
                    var part = parts[i];
                    if (_colors2.default.hasOwnProperty(part)) {
                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        var extraLine = decl.value.indexOf(part) || 0;
                        var col = source.start.column + decl.prop.length + decl.raws.between.length + extraLine;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG,
                            colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Rpc2FsbG93LW5hbWVkLWNvbG9yLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiTVNHIiwiY2hlY2siLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtEZWNscyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsInBhcnRzIiwibGlzdCIsInNwYWNlIiwiZGVjbCIsInZhbHVlIiwiaSIsImxlbiIsImxlbmd0aCIsInBhcnQiLCJoYXNPd25Qcm9wZXJ0eSIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJleHRyYUxpbmUiLCJpbmRleE9mIiwiY29sIiwiY29sdW1uIiwicHJvcCIsInJhd3MiLCJiZXR3ZWVuIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJlbmQiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOztBQUNBOzs7Ozs7QUFFQTs7Ozs7O0FBWkE7Ozs7OztBQWtCQSxJQUFNQSxXQUFXLHNCQUFqQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSxxREFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSCxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ksR0FBRCxFQUFNQyxNQUFOLEVBQWlCOztBQUViLFlBQUlDLEtBQUtDLE9BQVQsRUFBa0I7O0FBRWRILGdCQUFJSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsb0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVELG9CQUFNQyxRQUFRLGtCQUFRQyxJQUFSLENBQWFDLEtBQWIsQ0FBbUJDLEtBQUtDLEtBQXhCLENBQWQ7QUFDQSxxQkFBSyxJQUFJQyxJQUFJLENBQVIsRUFBV0MsTUFBTU4sTUFBTU8sTUFBNUIsRUFBb0NGLElBQUlDLEdBQXhDLEVBQTZDRCxHQUE3QyxFQUFrRDtBQUM5Qyx3QkFBTUcsT0FBT1IsTUFBTUssQ0FBTixDQUFiO0FBQ0Esd0JBQUksaUJBQU9JLGNBQVAsQ0FBc0JELElBQXRCLENBQUosRUFBaUM7QUFDN0IsNEJBQU1FLFNBQVNQLEtBQUtPLE1BQXBCO0FBQ0EsNEJBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSw0QkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhdEIsR0FBbEMsQ0FBcEI7QUFDQSw0QkFBTXVCLFlBQVlaLEtBQUtDLEtBQUwsQ0FBV1ksT0FBWCxDQUFtQlIsSUFBbkIsS0FBNEIsQ0FBOUM7QUFDQSw0QkFBTVMsTUFBTVAsT0FBT0UsS0FBUCxDQUFhTSxNQUFiLEdBQXNCZixLQUFLZ0IsSUFBTCxDQUFVWixNQUFoQyxHQUF5Q0osS0FBS2lCLElBQUwsQ0FBVUMsT0FBVixDQUFrQmQsTUFBM0QsR0FBb0VRLFNBQWhGO0FBQ0F0QiwrQkFBTzZCLElBQVAsQ0FBWWxDLFFBQVosRUFBc0I7QUFDbEJtQyxrQ0FBTXBCLElBRFk7QUFFbEJxQixzQ0FBVXBDLFFBRlE7QUFHbEJ1QixrQ0FBTUEsSUFIWTtBQUlsQk0saUNBQUtBLEdBSmE7QUFLbEJRLHFDQUFTcEMsR0FMUztBQU1sQnFDLDBDQUFjLE1BQ1IseUNBQ0ViLFdBREYsRUFDZUksR0FEZixFQUNvQlAsT0FBT2lCLEdBQVAsQ0FBV1QsTUFEL0IsQ0FEUSxHQUlSLElBSlEsR0FLUixnQkFBTVUsSUFBTixDQUFXdkMsR0FBWDtBQVhZLHlCQUF0QjtBQWFBUSwrQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0osYUE5QkQ7QUErQkg7QUFDSixLQXJDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6ImRpc2FsbG93LW5hbWVkLWNvbG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBkaXNhbGxvdy1uYW1lZC1jb2xvciDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDAzMTogW+W8uuWItl0g6aKc6Imy5YC85LiN5YWB6K645L2/55So5ZG95ZCN6Imy5YC844CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudCwgY2hhbmdlQ29sb3JCeVN0YXJ0QW5kRW5kSW5kZXh9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuLi9jb2xvcnMnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnZGlzYWxsb3ctbmFtZWQtY29sb3InO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ0NvbG9yIHZhbHVlcyB1c2luZyBuYW1lZCBjb2xvciB2YWx1ZSBpcyBub3QgYWxsb3dlZCc7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG5cbiAgICAgICAgaWYgKG9wdHMucnVsZVZhbCkge1xuXG4gICAgICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IHBvc3Rjc3MubGlzdC5zcGFjZShkZWNsLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3JzLmhhc093blByb3BlcnR5KHBhcnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYUxpbmUgPSBkZWNsLnZhbHVlLmluZGV4T2YocGFydCkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW4gKyBkZWNsLnByb3AubGVuZ3RoICsgZGVjbC5yYXdzLmJldHdlZW4ubGVuZ3RoICsgZXh0cmFMaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYW5nZUNvbG9yQnlTdGFydEFuZEVuZEluZGV4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNvbnRlbnQsIGNvbCwgc291cmNlLmVuZC5jb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==