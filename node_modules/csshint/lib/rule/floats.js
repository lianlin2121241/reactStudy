'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file floats 的检测逻辑
 *       Too many floats, you're probably using them for layout. Consider using a grid system instead
 *       https://github.com/CSSLint/csslint/wiki/Disallow-too-many-floats
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'floats';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = '`float` must not be greater than ';

var floatCount = 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal || isNaN(opts.ruleVal)) {
            return;
        }

        floatCount = 0;

        css.walkDecls(function (decl) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var prop = decl.prop,
                value = decl.value;

            if (prop === 'float' && value !== 'none') {
                floatCount++;
            }
        });

        if (floatCount > opts.ruleVal) {
            var str = MSG + opts.ruleVal + ', current file `float` is ' + floatCount;
            result.warn(RULENAME, {
                node: css,
                ruleName: RULENAME,
                message: str,
                colorMessage: _chalk2.default.grey(str)
            });

            global.CSSHINT_INVALID_ALL_COUNT++;
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Zsb2F0cy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImZsb2F0Q291bnQiLCJjaGVjayIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwiaXNOYU4iLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJwcm9wIiwiZGVjbCIsInZhbHVlIiwic3RyIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7OztBQVZBOzs7Ozs7O0FBZ0JBLElBQU1BLFdBQVcsUUFBakI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLE1BQU0sbUNBQVo7O0FBRUEsSUFBSUMsYUFBYSxDQUFqQjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSSxDQUFDQyxLQUFLQyxPQUFOLElBQWlCQyxNQUFNRixLQUFLQyxPQUFYLENBQXJCLEVBQTBDO0FBQ3RDO0FBQ0g7O0FBRUROLHFCQUFhLENBQWI7O0FBRUFHLFlBQUlLLFNBQUosQ0FBYyxnQkFBUTtBQUNsQixnQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NMLEtBQUtNLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBSGlCLGdCQUtYQyxJQUxXLEdBS0lDLElBTEosQ0FLWEQsSUFMVztBQUFBLGdCQUtMRSxLQUxLLEdBS0lELElBTEosQ0FLTEMsS0FMSzs7QUFNbEIsZ0JBQUlGLFNBQVMsT0FBVCxJQUFvQkUsVUFBVSxNQUFsQyxFQUEwQztBQUN0Q2Q7QUFDSDtBQUNKLFNBVEQ7O0FBV0EsWUFBSUEsYUFBYUssS0FBS0MsT0FBdEIsRUFBK0I7QUFDM0IsZ0JBQU1TLE1BQU1oQixNQUFNTSxLQUFLQyxPQUFYLEdBQXFCLDRCQUFyQixHQUFvRE4sVUFBaEU7QUFDQUksbUJBQU9ZLElBQVAsQ0FBWWxCLFFBQVosRUFBc0I7QUFDbEJtQixzQkFBTWQsR0FEWTtBQUVsQmUsMEJBQVVwQixRQUZRO0FBR2xCcUIseUJBQVNKLEdBSFM7QUFJbEJLLDhCQUFjLGdCQUFNQyxJQUFOLENBQVdOLEdBQVg7QUFKSSxhQUF0Qjs7QUFPQU4sbUJBQU9DLHlCQUFQO0FBQ0g7QUFDSixLQTlCeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6ImZsb2F0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgZmxvYXRzIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgVG9vIG1hbnkgZmxvYXRzLCB5b3UncmUgcHJvYmFibHkgdXNpbmcgdGhlbSBmb3IgbGF5b3V0LiBDb25zaWRlciB1c2luZyBhIGdyaWQgc3lzdGVtIGluc3RlYWRcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9DU1NMaW50L2Nzc2xpbnQvd2lraS9EaXNhbGxvdy10b28tbWFueS1mbG9hdHNcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnZmxvYXRzJztcblxuLyoqXG4gKiDplJnor6/nmoTkv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdgZmxvYXRgIG11c3Qgbm90IGJlIGdyZWF0ZXIgdGhhbiAnO1xuXG5sZXQgZmxvYXRDb3VudCA9IDA7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsIHx8IGlzTmFOKG9wdHMucnVsZVZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZsb2F0Q291bnQgPSAwO1xuXG4gICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qge3Byb3AsIHZhbHVlfSA9IGRlY2w7XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2Zsb2F0JyAmJiB2YWx1ZSAhPT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgZmxvYXRDb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZmxvYXRDb3VudCA+IG9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgY29uc3Qgc3RyID0gTVNHICsgb3B0cy5ydWxlVmFsICsgJywgY3VycmVudCBmaWxlIGBmbG9hdGAgaXMgJyArIGZsb2F0Q291bnQ7XG4gICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgIG5vZGU6IGNzcyxcbiAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogc3RyLFxuICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogY2hhbGsuZ3JleShzdHIpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=