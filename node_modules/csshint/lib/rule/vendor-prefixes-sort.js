'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

var _prefixes = require('../prefixes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file vendor-prefixes-sort 的检测逻辑
 *       046: [强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var prefixList = (0, _prefixes.getPrefixList)();

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'vendor-prefixes-sort';

/**
 * 错误信息，带私有前缀的属性按冒号位置对齐
 *
 * @const
 * @type {string}
 */
var COLON_MSG = 'Property with private prefix should be according to the colon position alignment';

/**
 * 错误信息，带私有前缀的属性由长到短排列
 *
 * @const
 * @type {string}
 */
var SHORT_MSG = 'Property with private prefix from long to short arrangement';

var countMap = {};

/**
 * 判断是否是合法的 css 属性名称
 *
 * @param {Object} decl postcss 节点对象
 *
 * @return {boolean} 结果
 */
var isValidVendorProp = function isValidVendorProp(decl) {
    var prop = decl.prop;
    var standardProperty = prop.replace(/^\-(webkit|moz|ms|o)\-/g, '');
    // 标准模式在 prefixList 中，那么如果 propertyName 不在 prefixList 中
    // 即这个属性用错了，例如 -o-animation
    if (prefixList.indexOf(standardProperty) > -1) {
        if (prefixList.indexOf(prop) <= -1) {
            return false;
        }
        // 按选择器分组
        var selector = decl.parent.selector;
        var parent = decl.parent;

        while (parent.type !== 'root') {
            parent = parent.parent || {};
            if (parent.type === 'atrule') {
                selector += '-in-atrule-' + (parent.name || '');
            }
        }

        if (!countMap[selector]) {
            countMap[selector] = {};
        }
        var tmp = countMap[selector];

        if (!tmp[standardProperty]) {
            tmp[standardProperty] = [];
        }
        tmp[standardProperty].push(decl);
    }
    return true;
};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        /* jshint maxstatements: 31, maxcomplexity: 11 */

        if (!opts.ruleVal) {
            return;
        }

        countMap = {};

        css.walkDecls(function (decl) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }
            if (!isValidVendorProp(decl, result)) {
                return;
            }
        });

        /* eslint-disable fecs-use-for-of, fecs-valid-map-set */
        for (var selector in countMap) {
            if (!countMap.hasOwnProperty(selector)) {
                continue;
            }

            for (var j in countMap[selector]) {
                if (!countMap[selector].hasOwnProperty(j)) {
                    continue;
                }
                var maxLength = 0;
                var firstColonIndex = 0;
                for (var i = 0, len = countMap[selector][j].length; i < len; i++) {
                    var item = countMap[selector][j][i];
                    var prop = item.prop;

                    if (countMap[selector][prop.replace(/^\-(webkit|moz|ms|o)\-/g, '')].length <= 1) {
                        continue;
                    }

                    var source = item.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);

                    var length = prop.length;

                    // 第一个
                    if (maxLength === 0) {
                        maxLength = length;
                        firstColonIndex = lineContent.indexOf(':') + 1;
                    }

                    var curColonIndex = lineContent.indexOf(':') + 1;
                    if (firstColonIndex !== curColonIndex) {
                        result.warn(RULENAME, {
                            node: item,
                            ruleName: RULENAME,
                            line: line,
                            message: '`' + lineContent + '` ' + COLON_MSG,
                            colorMessage: '`' + _chalk2.default.magenta(lineContent) + '` ' + _chalk2.default.grey(COLON_MSG)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }

                    if (maxLength < length) {
                        result.warn(RULENAME, {
                            node: item,
                            ruleName: RULENAME,
                            line: line,
                            message: '`' + lineContent + '` ' + SHORT_MSG,
                            colorMessage: '`' + _chalk2.default.magenta(lineContent) + '` ' + _chalk2.default.grey(SHORT_MSG)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        }
        /* eslint-enable fecs-use-for-of, fecs-valid-map-set */
    };
});
//# sourceMappingURL=data:application/json;base64,