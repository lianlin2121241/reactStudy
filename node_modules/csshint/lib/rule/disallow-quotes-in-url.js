'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'disallow-quotes-in-url';

/**
 * 匹配 css 中 url 的正则
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file disallow-quotes-in-url 的检测逻辑
 *       026: [强制] `url()` 函数中的路径不加引号。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_URL = /\burl\s*\((["']?)([^\)]+)\1\)/g;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Path in the `url()` must without the quotes';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            css.walkDecls(function (decl) {

                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var source = decl.source,
                    value = decl.value;

                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);

                var match = null;
                /* eslint-disable no-extra-boolean-cast */
                while (!!(match = PATTERN_URL.exec(value))) {
                    if (match[1]) {
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: lineContent.indexOf(match[0]) + 1,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(match[0], _chalk2.default.magenta(match[0])) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
                /* eslint-enable no-extra-boolean-cast */
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Rpc2FsbG93LXF1b3Rlcy1pbi11cmwuanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJQQVRURVJOX1VSTCIsIk1TRyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJzb3VyY2UiLCJkZWNsIiwidmFsdWUiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwibWF0Y2giLCJleGVjIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsImNvbCIsImluZGV4T2YiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwicmVwbGFjZSIsIm1hZ2VudGEiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsd0JBQWpCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxjQUFjLGdDQUFwQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSw2Q0FBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSUMsS0FBS0MsT0FBVCxFQUFrQjs7QUFFZEgsZ0JBQUlJLFNBQUosQ0FBYyxnQkFBUTs7QUFFbEIsb0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUppQixvQkFNWEMsTUFOVyxHQU1NQyxJQU5OLENBTVhELE1BTlc7QUFBQSxvQkFNSEUsS0FORyxHQU1NRCxJQU5OLENBTUhDLEtBTkc7O0FBT2xCLG9CQUFNQyxPQUFPSCxPQUFPSSxLQUFQLENBQWFELElBQTFCO0FBQ0Esb0JBQU1FLGNBQWMsMEJBQWVGLElBQWYsRUFBcUJILE9BQU9NLEtBQVAsQ0FBYWQsR0FBbEMsQ0FBcEI7O0FBRUEsb0JBQUllLFFBQVEsSUFBWjtBQUNBO0FBQ0EsdUJBQU8sQ0FBQyxFQUFFQSxRQUFRbkIsWUFBWW9CLElBQVosQ0FBaUJOLEtBQWpCLENBQVYsQ0FBUixFQUE0QztBQUN4Qyx3QkFBSUssTUFBTSxDQUFOLENBQUosRUFBYztBQUNWZCwrQkFBT2dCLElBQVAsQ0FBWXRCLFFBQVosRUFBc0I7QUFDbEJ1QixrQ0FBTVQsSUFEWTtBQUVsQlUsc0NBQVV4QixRQUZRO0FBR2xCZ0Isa0NBQU1BLElBSFk7QUFJbEJTLGlDQUFLUCxZQUFZUSxPQUFaLENBQW9CTixNQUFNLENBQU4sQ0FBcEIsSUFBZ0MsQ0FKbkI7QUFLbEJPLHFDQUFTekIsR0FMUztBQU1sQjBCLDBDQUFjLE1BQ1JWLFlBQVlXLE9BQVosQ0FBb0JULE1BQU0sQ0FBTixDQUFwQixFQUE4QixnQkFBTVUsT0FBTixDQUFjVixNQUFNLENBQU4sQ0FBZCxDQUE5QixDQURRLEdBRVIsSUFGUSxHQUdSLGdCQUFNVyxJQUFOLENBQVc3QixHQUFYO0FBVFkseUJBQXRCO0FBV0FRLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDRDtBQUNILGFBN0JEO0FBOEJIO0FBQ0osS0FuQ3lDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJkaXNhbGxvdy1xdW90ZXMtaW4tdXJsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBkaXNhbGxvdy1xdW90ZXMtaW4tdXJsIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgMDI2OiBb5by65Yi2XSBgdXJsKClgIOWHveaVsOS4reeahOi3r+W+hOS4jeWKoOW8leWPt+OAglxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnZGlzYWxsb3ctcXVvdGVzLWluLXVybCc7XG5cbi8qKlxuICog5Yy56YWNIGNzcyDkuK0gdXJsIOeahOato+WImVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9VUkwgPSAvXFxidXJsXFxzKlxcKChbXCInXT8pKFteXFwpXSspXFwxXFwpL2c7XG5cbi8qKlxuICog6ZSZ6K+v5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnUGF0aCBpbiB0aGUgYHVybCgpYCBtdXN0IHdpdGhvdXQgdGhlIHF1b3Rlcyc7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChvcHRzLnJ1bGVWYWwpIHtcblxuICAgICAgICAgICAgY3NzLndhbGtEZWNscyhkZWNsID0+IHtcblxuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7c291cmNlLCB2YWx1ZX0gPSBkZWNsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1leHRyYS1ib29sZWFuLWNhc3QgKi9cbiAgICAgICAgICAgICAgICB3aGlsZSAoISEobWF0Y2ggPSBQQVRURVJOX1VSTC5leGVjKHZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBsaW5lQ29udGVudC5pbmRleE9mKG1hdGNoWzBdKSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShtYXRjaFswXSwgY2hhbGsubWFnZW50YShtYXRjaFswXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0ICovXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=