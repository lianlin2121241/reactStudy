'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'require-number'; /**
                                  * @file require-number 的检测逻辑
                                  *       `font-weight` 对应 039: [强制] `font-weight` 属性必须使用数值方式描述。
                                  *       `line-height` 对应 040: [建议] `line-height` 在定义文本段落时，应使用数值。
                                  * @author ielgnaw(wuji0223@gmail.com)
                                  */

var PATTERN_NUMERIC = /^\d*[\.\d%]*$/;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = ' must be a number value';

var arrayProto = Array.prototype;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        arrayProto.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {

            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var prop = decl.prop;

                if (realRuleVal.indexOf(prop) !== -1) {
                    if (!PATTERN_NUMERIC.test(decl.value)) {
                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        var col = source.start.column + decl.prop.length + decl.raws.between.length;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            errorChar: prop,
                            line: line,
                            col: col,
                            message: prop + MSG,
                            colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(prop + MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3JlcXVpcmUtbnVtYmVyLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiUEFUVEVSTl9OVU1FUklDIiwiTVNHIiwiYXJyYXlQcm90byIsIkFycmF5IiwicHJvdG90eXBlIiwiY2hlY2siLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJydWxlVmFsIiwib3B0cyIsInJlYWxSdWxlVmFsIiwicHVzaCIsImlzQXJyYXkiLCJsZW5ndGgiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJwcm9wIiwiZGVjbCIsImluZGV4T2YiLCJ0ZXN0IiwidmFsdWUiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sIiwiY29sdW1uIiwicmF3cyIsImJldHdlZW4iLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwiZXJyb3JDaGFyIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsImVuZCIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxnQkFBakIsQyxDQWxCQTs7Ozs7OztBQW9CQSxJQUFNQyxrQkFBa0IsZUFBeEI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLE1BQU0seUJBQVo7O0FBRUEsSUFBTUMsYUFBYUMsTUFBTUMsU0FBekI7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZVAsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNRLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFNQyxVQUFVQyxLQUFLRCxPQUFyQjtBQUNBLFlBQU1FLGNBQWMsRUFBcEI7QUFDQVQsbUJBQVdVLElBQVgsQ0FBZ0JULE1BQU1VLE9BQU4sQ0FBY0osT0FBZCxJQUF5QixPQUF6QixHQUFtQyxNQUFuRCxFQUEyREUsV0FBM0QsRUFBd0VGLE9BQXhFOztBQUVBLFlBQUlFLFlBQVlHLE1BQWhCLEVBQXdCOztBQUVwQlAsZ0JBQUlRLFNBQUosQ0FBYyxnQkFBUTtBQUNsQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NQLEtBQUtRLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBRUQsb0JBQU1DLE9BQU9DLEtBQUtELElBQWxCOztBQUVBLG9CQUFJUixZQUFZVSxPQUFaLENBQW9CRixJQUFwQixNQUE4QixDQUFDLENBQW5DLEVBQXNDO0FBQ2xDLHdCQUFJLENBQUNuQixnQkFBZ0JzQixJQUFoQixDQUFxQkYsS0FBS0csS0FBMUIsQ0FBTCxFQUF1QztBQUNuQyw0QkFBTUMsU0FBU0osS0FBS0ksTUFBcEI7QUFDQSw0QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjtBQUNBLDRCQUFNRSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCRCxPQUFPSSxLQUFQLENBQWFyQixHQUFsQyxDQUFwQjtBQUNBLDRCQUFNc0IsTUFBTUwsT0FBT0UsS0FBUCxDQUFhSSxNQUFiLEdBQXNCVixLQUFLRCxJQUFMLENBQVVMLE1BQWhDLEdBQXlDTSxLQUFLVyxJQUFMLENBQVVDLE9BQVYsQ0FBa0JsQixNQUF2RTtBQUNBTiwrQkFBT3lCLElBQVAsQ0FBWWxDLFFBQVosRUFBc0I7QUFDbEJtQyxrQ0FBTWQsSUFEWTtBQUVsQmUsc0NBQVVwQyxRQUZRO0FBR2xCcUMsdUNBQVdqQixJQUhPO0FBSWxCTSxrQ0FBTUEsSUFKWTtBQUtsQkksaUNBQUtBLEdBTGE7QUFNbEJRLHFDQUFTbEIsT0FBT2xCLEdBTkU7QUFPbEJxQywwQ0FBYyxNQUNSLHlDQUNFWCxXQURGLEVBQ2VFLEdBRGYsRUFDb0JMLE9BQU9lLEdBQVAsQ0FBV1QsTUFEL0IsQ0FEUSxHQUlSLElBSlEsR0FLUixnQkFBTVUsSUFBTixDQUFXckIsT0FBT2xCLEdBQWxCO0FBWlkseUJBQXRCO0FBY0FlLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFFSixhQS9CRDtBQWdDSDtBQUNKLEtBMUN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoicmVxdWlyZS1udW1iZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHJlcXVpcmUtbnVtYmVyIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgYGZvbnQtd2VpZ2h0YCDlr7nlupQgMDM5OiBb5by65Yi2XSBgZm9udC13ZWlnaHRgIOWxnuaAp+W/hemhu+S9v+eUqOaVsOWAvOaWueW8j+aPj+i/sOOAglxuICogICAgICAgYGxpbmUtaGVpZ2h0YCDlr7nlupQgMDQwOiBb5bu66K6uXSBgbGluZS1oZWlnaHRgIOWcqOWumuS5ieaWh+acrOauteiQveaXtu+8jOW6lOS9v+eUqOaVsOWAvOOAglxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnQsIGNoYW5nZUNvbG9yQnlTdGFydEFuZEVuZEluZGV4fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ3JlcXVpcmUtbnVtYmVyJztcblxuY29uc3QgUEFUVEVSTl9OVU1FUklDID0gL15cXGQqW1xcLlxcZCVdKiQvO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJyBtdXN0IGJlIGEgbnVtYmVyIHZhbHVlJztcblxuY29uc3QgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcblxuICAgICAgICBjb25zdCBydWxlVmFsID0gb3B0cy5ydWxlVmFsO1xuICAgICAgICBjb25zdCByZWFsUnVsZVZhbCA9IFtdO1xuICAgICAgICBhcnJheVByb3RvLnB1c2hbQXJyYXkuaXNBcnJheShydWxlVmFsKSA/ICdhcHBseScgOiAnY2FsbCddKHJlYWxSdWxlVmFsLCBydWxlVmFsKTtcblxuICAgICAgICBpZiAocmVhbFJ1bGVWYWwubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSBkZWNsLnByb3A7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVhbFJ1bGVWYWwuaW5kZXhPZihwcm9wKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFQQVRURVJOX05VTUVSSUMudGVzdChkZWNsLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gZGVjbC5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbiArIGRlY2wucHJvcC5sZW5ndGggKyBkZWNsLnJhd3MuYmV0d2Vlbi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2hhcjogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHByb3AgKyBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LCBjb2wsIHNvdXJjZS5lbmQuY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShwcm9wICsgTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=