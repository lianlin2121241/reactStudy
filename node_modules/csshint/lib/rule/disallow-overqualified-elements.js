'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'disallow-overqualified-elements';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file disallow-overqualified-elements 的检测逻辑
 *       013: [强制] 如无必要，不得为 `id`、`class` 选择器添加类型选择器进行限定。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COMBINATORS = /[\s>+~,[]+/;

/**
 * css selector 开始字符的正则匹配
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_STARTCHARS = /[\.#\[]+/;

var PATTERN_PERCENT = /^((-|\+)?\d{1,2}(\.\d+)?|100)%$/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Not allowed to add a type selector is limited to ID, class selector';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            css.walkRules(function (rule) {

                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                if (!isNaN(rule.selector) || PATTERN_PERCENT.test(rule.selector)) {
                    return;
                }

                var source = rule.source;
                var line = source.start.line;

                var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';

                var segments = rule.selector.split(PATTERN_COMBINATORS);
                for (var i = 0, len = segments.length; i < len; i++) {
                    var items = segments[i].split(PATTERN_STARTCHARS);
                    if (items[0] !== '' && items.length > 1) {
                        result.warn(RULENAME, {
                            node: rule,
                            ruleName: RULENAME,
                            line: line,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(segments[i], segments[i].replace(items[0], _chalk2.default.magenta(items[0]))) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Rpc2FsbG93LW92ZXJxdWFsaWZpZWQtZWxlbWVudHMuanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJQQVRURVJOX0NPTUJJTkFUT1JTIiwiUEFUVEVSTl9TVEFSVENIQVJTIiwiUEFUVEVSTl9QRVJDRU5UIiwiTVNHIiwiY2hlY2siLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtSdWxlcyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsImlzTmFOIiwicnVsZSIsInNlbGVjdG9yIiwidGVzdCIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJzZWdtZW50cyIsInNwbGl0IiwiaSIsImxlbiIsImxlbmd0aCIsIml0ZW1zIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJyZXBsYWNlIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFNQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxpQ0FBakI7O0FBRUE7Ozs7OztBQW5CQTs7Ozs7O0FBeUJBLElBQU1DLHNCQUFzQixZQUE1Qjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMscUJBQXFCLFVBQTNCOztBQUVBLElBQU1DLGtCQUFrQixpQ0FBeEI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLE1BQU0scUVBQVo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZU4sUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNPLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUlDLEtBQUtDLE9BQVQsRUFBa0I7O0FBRWRILGdCQUFJSSxTQUFKLENBQWMsZ0JBQVE7O0FBRWxCLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRCxvQkFBSSxDQUFDQyxNQUFNQyxLQUFLQyxRQUFYLENBQUQsSUFBeUJkLGdCQUFnQmUsSUFBaEIsQ0FBcUJGLEtBQUtDLFFBQTFCLENBQTdCLEVBQWtFO0FBQzlEO0FBQ0g7O0FBRUQsb0JBQU1FLFNBQVNILEtBQUtHLE1BQXBCO0FBQ0Esb0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7O0FBRUEsb0JBQU1FLGNBQWMsMEJBQWVGLElBQWYsRUFBcUJELE9BQU9JLEtBQVAsQ0FBYWhCLEdBQWxDLEtBQTBDLEVBQTlEOztBQUVBLG9CQUFNaUIsV0FBV1IsS0FBS0MsUUFBTCxDQUFjUSxLQUFkLENBQW9CeEIsbUJBQXBCLENBQWpCO0FBQ0EscUJBQUssSUFBSXlCLElBQUksQ0FBUixFQUFXQyxNQUFNSCxTQUFTSSxNQUEvQixFQUF1Q0YsSUFBSUMsR0FBM0MsRUFBZ0RELEdBQWhELEVBQXFEO0FBQ2pELHdCQUFNRyxRQUFRTCxTQUFTRSxDQUFULEVBQVlELEtBQVosQ0FBa0J2QixrQkFBbEIsQ0FBZDtBQUNBLHdCQUFJMkIsTUFBTSxDQUFOLE1BQWEsRUFBYixJQUFtQkEsTUFBTUQsTUFBTixHQUFlLENBQXRDLEVBQXlDO0FBQ3JDcEIsK0JBQU9zQixJQUFQLENBQVk5QixRQUFaLEVBQXNCO0FBQ2xCK0Isa0NBQU1mLElBRFk7QUFFbEJnQixzQ0FBVWhDLFFBRlE7QUFHbEJvQixrQ0FBTUEsSUFIWTtBQUlsQmEscUNBQVM3QixHQUpTO0FBS2xCOEIsMENBQWMsTUFDUlosWUFBWWEsT0FBWixDQUNFWCxTQUFTRSxDQUFULENBREYsRUFFRUYsU0FBU0UsQ0FBVCxFQUFZUyxPQUFaLENBQW9CTixNQUFNLENBQU4sQ0FBcEIsRUFBOEIsZ0JBQU1PLE9BQU4sQ0FBY1AsTUFBTSxDQUFOLENBQWQsQ0FBOUIsQ0FGRixDQURRLEdBS1IsSUFMUSxHQU1SLGdCQUFNUSxJQUFOLENBQVdqQyxHQUFYO0FBWFkseUJBQXRCO0FBYUFRLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSixhQW5DRDtBQW9DSDtBQUNKLEtBekN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiZGlzYWxsb3ctb3ZlcnF1YWxpZmllZC1lbGVtZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgZGlzYWxsb3ctb3ZlcnF1YWxpZmllZC1lbGVtZW50cyDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDAxMzogW+W8uuWItl0g5aaC5peg5b+F6KaB77yM5LiN5b6X5Li6IGBpZGDjgIFgY2xhc3NgIOmAieaLqeWZqOa3u+WKoOexu+Wei+mAieaLqeWZqOi/m+ihjOmZkOWumuOAglxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnZGlzYWxsb3ctb3ZlcnF1YWxpZmllZC1lbGVtZW50cyc7XG5cbi8qKlxuICogY3NzIOe7hOWQiOeahOato+WImeWMuemFjVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT01CSU5BVE9SUyA9IC9bXFxzPit+LFtdKy87XG5cbi8qKlxuICogY3NzIHNlbGVjdG9yIOW8gOWni+Wtl+espueahOato+WImeWMuemFjVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9TVEFSVENIQVJTID0gL1tcXC4jXFxbXSsvO1xuXG5jb25zdCBQQVRURVJOX1BFUkNFTlQgPSAvXigoLXxcXCspP1xcZHsxLDJ9KFxcLlxcZCspP3wxMDApJSQvO1xuXG4vKipcbiAqIOmUmeivr+S/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ05vdCBhbGxvd2VkIHRvIGFkZCBhIHR5cGUgc2VsZWN0b3IgaXMgbGltaXRlZCB0byBJRCwgY2xhc3Mgc2VsZWN0b3InO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAob3B0cy5ydWxlVmFsKSB7XG5cbiAgICAgICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihydWxlLnNlbGVjdG9yKSB8fCBQQVRURVJOX1BFUkNFTlQudGVzdChydWxlLnNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gcnVsZS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKSB8fCAnJztcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnRzID0gcnVsZS5zZWxlY3Rvci5zcGxpdChQQVRURVJOX0NPTUJJTkFUT1JTKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBzZWdtZW50c1tpXS5zcGxpdChQQVRURVJOX1NUQVJUQ0hBUlMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbXNbMF0gIT09ICcnICYmIGl0ZW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogcnVsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHNbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50c1tpXS5yZXBsYWNlKGl0ZW1zWzBdLCBjaGFsay5tYWdlbnRhKGl0ZW1zWzBdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==