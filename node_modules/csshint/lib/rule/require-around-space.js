'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'require-around-space';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file require-around-space 的检测逻辑
 *       `>`, `+`, `~` 对应 009: [强制] `>`、`+`、`~` 选择器的两边各保留一个空格。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COMBINATORS = /[^\s>+~=]+/g; // 排除 ~=, +=, >=

/**
 * 获取错误信息
 *
 * @param {string} combinator 组合的字符
 *
 * @return {string} 错误信息
 */
var getMsg = function getMsg(combinator) {
    return '' + 'Around the `' + combinator + '` selector will keep a space';
};

var arrayProto = Array.prototype;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        arrayProto.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {
            (function () {

                var invalidList = [];
                css.walkRules(function (rule) {
                    /* jshint maxcomplexity: 11 */
                    var selector = rule.selector;

                    // 排除掉 .aaa:nth-child(4n+1) 这样的选择器
                    selector = selector.replace(/\([\s\S]*?\)/g, '');

                    var segments = selector.split(PATTERN_COMBINATORS);
                    var len = segments.length;

                    for (var i = 0; i < len; i++) {
                        var segment = segments[i];

                        if (!segment) {
                            continue;
                        }

                        var lastChar = segment.slice(-1);
                        var firstChar = segment.slice(0, 1);
                        if (segment) {
                            segment = (0, _util.trim)(segment);
                            if (realRuleVal.indexOf(segment) <= -1) {
                                continue;
                            }

                            if (i === 0) {
                                if (lastChar !== ' ') {
                                    invalidList.push({
                                        invalidChar: segment,
                                        rule: rule
                                    });
                                    continue;
                                }
                            } else if (i === len - 1) {
                                if (firstChar !== ' ') {
                                    invalidList.push({
                                        invalidChar: segment,
                                        rule: rule
                                    });
                                    continue;
                                }
                            } else {
                                if (lastChar !== ' ' || firstChar !== ' ') {
                                    invalidList.push({
                                        invalidChar: segment,
                                        rule: rule
                                    });
                                    continue;
                                }
                            }
                        }
                    }
                });

                invalidList.forEach(function (invalidRule) {
                    var invalidChar = invalidRule.invalidChar,
                        rule = invalidRule.rule;

                    var msg = getMsg(invalidRule.invalidChar);
                    var source = rule.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);
                    var col = lineContent.indexOf(invalidChar);
                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        errorChar: invalidChar,
                        line: line,
                        col: col + 1,
                        message: msg,
                        colorMessage: '`' + lineContent.replace(invalidChar, _chalk2.default.magenta(invalidChar)) + '` ' + _chalk2.default.grey(msg)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                });
            })();
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3JlcXVpcmUtYXJvdW5kLXNwYWNlLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiUEFUVEVSTl9DT01CSU5BVE9SUyIsImdldE1zZyIsImNvbWJpbmF0b3IiLCJhcnJheVByb3RvIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjaGVjayIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsInJ1bGVWYWwiLCJvcHRzIiwicmVhbFJ1bGVWYWwiLCJwdXNoIiwiaXNBcnJheSIsImxlbmd0aCIsImludmFsaWRMaXN0Iiwid2Fsa1J1bGVzIiwic2VsZWN0b3IiLCJydWxlIiwicmVwbGFjZSIsInNlZ21lbnRzIiwic3BsaXQiLCJsZW4iLCJpIiwic2VnbWVudCIsImxhc3RDaGFyIiwic2xpY2UiLCJmaXJzdENoYXIiLCJpbmRleE9mIiwiaW52YWxpZENoYXIiLCJmb3JFYWNoIiwiaW52YWxpZFJ1bGUiLCJtc2ciLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsImVycm9yQ2hhciIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJtYWdlbnRhIiwiZ3JleSIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFNQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxzQkFBakI7O0FBRUE7Ozs7OztBQW5CQTs7Ozs7O0FBeUJBLElBQU1DLHNCQUFzQixhQUE1QixDLENBQTJDOztBQUUzQzs7Ozs7OztBQU9BLElBQU1DLFNBQVMsU0FBVEEsTUFBUztBQUFBLFdBQ1gsS0FDTSxjQUROLEdBRU1DLFVBRk4sR0FHTSw4QkFKSztBQUFBLENBQWY7O0FBTUEsSUFBTUMsYUFBYUMsTUFBTUMsU0FBekI7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZVIs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Qlksc0NBQWMsTUFDUlIsWUFBWWpCLE9BQVosQ0FBb0JVLFdBQXBCLEVBQWlDLGdCQUFNZ0IsT0FBTixDQUFjaEIsV0FBZCxDQUFqQyxDQURRLEdBRVIsSUFGUSxHQUdSLGdCQUFNaUIsSUFBTixDQUFXZCxHQUFYO0FBVlkscUJBQXRCO0FBWUFlLDJCQUFPQyx5QkFBUDtBQUNILGlCQXBCRDtBQTNEb0I7QUFnRnZCO0FBQ0osS0F4RnlDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJyZXF1aXJlLWFyb3VuZC1zcGFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgcmVxdWlyZS1hcm91bmQtc3BhY2Ug55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBgPmAsIGArYCwgYH5gIOWvueW6lCAwMDk6IFvlvLrliLZdIGA+YOOAgWArYOOAgWB+YCDpgInmi6nlmajnmoTkuKTovrnlkITkv53nlZnkuIDkuKrnqbrmoLzjgIJcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50LCB0cmltfSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ3JlcXVpcmUtYXJvdW5kLXNwYWNlJztcblxuLyoqXG4gKiBjc3Mg57uE5ZCI55qE5q2j5YiZ5Yy56YWNXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCBQQVRURVJOX0NPTUJJTkFUT1JTID0gL1teXFxzPit+PV0rL2c7IC8vIOaOkumZpCB+PSwgKz0sID49XG5cbi8qKlxuICog6I635Y+W6ZSZ6K+v5L+h5oGvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbWJpbmF0b3Ig57uE5ZCI55qE5a2X56ymXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSDplJnor6/kv6Hmga9cbiAqL1xuY29uc3QgZ2V0TXNnID0gY29tYmluYXRvciA9PlxuICAgICcnXG4gICAgICAgICsgJ0Fyb3VuZCB0aGUgYCdcbiAgICAgICAgKyBjb21iaW5hdG9yXG4gICAgICAgICsgJ2Agc2VsZWN0b3Igd2lsbCBrZWVwIGEgc3BhY2UnO1xuXG5jb25zdCBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHJ1bGVWYWwgPSBvcHRzLnJ1bGVWYWw7XG4gICAgICAgIGNvbnN0IHJlYWxSdWxlVmFsID0gW107XG4gICAgICAgIGFycmF5UHJvdG8ucHVzaFtBcnJheS5pc0FycmF5KHJ1bGVWYWwpID8gJ2FwcGx5JyA6ICdjYWxsJ10ocmVhbFJ1bGVWYWwsIHJ1bGVWYWwpO1xuXG4gICAgICAgIGlmIChyZWFsUnVsZVZhbC5sZW5ndGgpIHtcblxuICAgICAgICAgICAgY29uc3QgaW52YWxpZExpc3QgPSBbXTtcbiAgICAgICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgLyoganNoaW50IG1heGNvbXBsZXhpdHk6IDExICovXG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdG9yID0gcnVsZS5zZWxlY3RvcjtcblxuICAgICAgICAgICAgICAgIC8vIOaOkumZpOaOiSAuYWFhOm50aC1jaGlsZCg0bisxKSDov5nmoLfnmoTpgInmi6nlmahcbiAgICAgICAgICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoL1xcKFtcXHNcXFNdKj9cXCkvZywgJycpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBzZWxlY3Rvci5zcGxpdChQQVRURVJOX0NPTUJJTkFUT1JTKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW4gPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RDaGFyID0gc2VnbWVudC5zbGljZSgtMSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hhciA9IHNlZ21lbnQuc2xpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdtZW50ID0gdHJpbShzZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWFsUnVsZVZhbC5pbmRleE9mKHNlZ21lbnQpIDw9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RDaGFyICE9PSAnICcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZExpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQ2hhcjogc2VnbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGU6IHJ1bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IGxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RDaGFyICE9PSAnICcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZExpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQ2hhcjogc2VnbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGU6IHJ1bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0Q2hhciAhPT0gJyAnIHx8IGZpcnN0Q2hhciAhPT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRMaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZENoYXI6IHNlZ21lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlOiBydWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaW52YWxpZExpc3QuZm9yRWFjaChpbnZhbGlkUnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qge2ludmFsaWRDaGFyLCBydWxlfSA9IGludmFsaWRSdWxlO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IGdldE1zZyhpbnZhbGlkUnVsZS5pbnZhbGlkQ2hhcik7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gcnVsZS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sID0gbGluZUNvbnRlbnQuaW5kZXhPZihpbnZhbGlkQ2hhcik7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogcnVsZSxcbiAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICBlcnJvckNoYXI6IGludmFsaWRDaGFyLFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCArIDEsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShpbnZhbGlkQ2hhciwgY2hhbGsubWFnZW50YShpbnZhbGlkQ2hhcikpXG4gICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShtc2cpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==