'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'omit-protocol-in-url';

/**
 * 匹配 css 中 url 的正则
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file omit-protocol-in-url 的检测逻辑
 *       027: [建议] `url()` 函数中的绝对路径可省去协议名。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_URL = /\burl\s*\((["']?)([^\)]+)\1\)/g;

/**
 * 匹配 url() 中 path 的协议
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_PROTOCOL = /^((https?|s?ftp|irc[6s]?|git|afp|telnet|smb):\/\/){1}/gi;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Path in the `url()` should remove protocol';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            css.walkDecls(function (decl) {

                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var source = decl.source,
                    value = decl.value;

                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);

                var match = null;
                var matchProtocol = null;

                /* eslint-disable no-extra-boolean-cast */
                while (!!(match = PATTERN_URL.exec(value))) {
                    var url = match[2];

                    // decl.value 相对于 lineContent 的 index
                    var valueIndex = lineContent.indexOf(decl.value);

                    // 相对于 decl.value 的 index
                    var index = valueIndex + match.input.indexOf(url);
                    while (!!(matchProtocol = PATTERN_PROTOCOL.exec(url))) {
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: index + 1,
                            message: MSG,
                            colorMessage: '`' + (0, _util.changeColorByIndex)(lineContent, index, matchProtocol[0]) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
                /* eslint-enable no-extra-boolean-cast */
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL29taXQtcHJvdG9jb2wtaW4tdXJsLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiUEFUVEVSTl9VUkwiLCJQQVRURVJOX1BST1RPQ09MIiwiTVNHIiwiY2hlY2siLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtEZWNscyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsInNvdXJjZSIsImRlY2wiLCJ2YWx1ZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJtYXRjaCIsIm1hdGNoUHJvdG9jb2wiLCJleGVjIiwidXJsIiwidmFsdWVJbmRleCIsImluZGV4T2YiLCJpbmRleCIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJjb2wiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLHNCQUFqQjs7QUFFQTs7Ozs7O0FBbkJBOzs7Ozs7QUF5QkEsSUFBTUMsY0FBYyxnQ0FBcEI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLG1CQUFtQix5REFBekI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLE1BQU0sNENBQVo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZUwsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNNLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUlDLEtBQUtDLE9BQVQsRUFBa0I7O0FBRWRILGdCQUFJSSxTQUFKLENBQWMsZ0JBQVE7O0FBRWxCLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFKaUIsb0JBTVhDLE1BTlcsR0FNTUMsSUFOTixDQU1YRCxNQU5XO0FBQUEsb0JBTUhFLEtBTkcsR0FNTUQsSUFOTixDQU1IQyxLQU5HOztBQU9sQixvQkFBTUMsT0FBT0gsT0FBT0ksS0FBUCxDQUFhRCxJQUExQjtBQUNBLG9CQUFNRSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCSCxPQUFPTSxLQUFQLENBQWFkLEdBQWxDLENBQXBCOztBQUVBLG9CQUFJZSxRQUFRLElBQVo7QUFDQSxvQkFBSUMsZ0JBQWdCLElBQXBCOztBQUVBO0FBQ0EsdUJBQU8sQ0FBQyxFQUFFRCxRQUFRcEIsWUFBWXNCLElBQVosQ0FBaUJQLEtBQWpCLENBQVYsQ0FBUixFQUE0QztBQUN4Qyx3QkFBTVEsTUFBTUgsTUFBTSxDQUFOLENBQVo7O0FBRUE7QUFDQSx3QkFBTUksYUFBYU4sWUFBWU8sT0FBWixDQUFvQlgsS0FBS0MsS0FBekIsQ0FBbkI7O0FBRUE7QUFDQSx3QkFBTVcsUUFBUUYsYUFBYUosTUFBTUQsS0FBTixDQUFZTSxPQUFaLENBQW9CRixHQUFwQixDQUEzQjtBQUNBLDJCQUFPLENBQUMsRUFBRUYsZ0JBQWdCcEIsaUJBQWlCcUIsSUFBakIsQ0FBc0JDLEdBQXRCLENBQWxCLENBQVIsRUFBdUQ7QUFDbkRqQiwrQkFBT3FCLElBQVAsQ0FBWTVCLFFBQVosRUFBc0I7QUFDbEI2QixrQ0FBTWQsSUFEWTtBQUVsQmUsc0NBQVU5QixRQUZRO0FBR2xCaUIsa0NBQU1BLElBSFk7QUFJbEJjLGlDQUFLSixRQUFRLENBSks7QUFLbEJLLHFDQUFTN0IsR0FMUztBQU1sQjhCLDBDQUFjLE1BQ1IsOEJBQW1CZCxXQUFuQixFQUFnQ1EsS0FBaEMsRUFBdUNMLGNBQWMsQ0FBZCxDQUF2QyxDQURRLEdBRVIsSUFGUSxHQUdSLGdCQUFNWSxJQUFOLENBQVcvQixHQUFYO0FBVFkseUJBQXRCO0FBV0FRLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDRDtBQUNILGFBdENEO0FBdUNIO0FBQ0osS0E1Q3lDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJvbWl0LXByb3RvY29sLWluLXVybC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgb21pdC1wcm90b2NvbC1pbi11cmwg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMjc6IFvlu7rorq5dIGB1cmwoKWAg5Ye95pWw5Lit55qE57ud5a+56Lev5b6E5Y+v55yB5Y675Y2P6K6u5ZCN44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudCwgY2hhbmdlQ29sb3JCeUluZGV4fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ29taXQtcHJvdG9jb2wtaW4tdXJsJztcblxuLyoqXG4gKiDljLnphY0gY3NzIOS4rSB1cmwg55qE5q2j5YiZXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCBQQVRURVJOX1VSTCA9IC9cXGJ1cmxcXHMqXFwoKFtcIiddPykoW15cXCldKylcXDFcXCkvZztcblxuLyoqXG4gKiDljLnphY0gdXJsKCkg5LitIHBhdGgg55qE5Y2P6K6uXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCBQQVRURVJOX1BST1RPQ09MID0gL14oKGh0dHBzP3xzP2Z0cHxpcmNbNnNdP3xnaXR8YWZwfHRlbG5ldHxzbWIpOlxcL1xcLyl7MX0vZ2k7XG5cbi8qKlxuICog6ZSZ6K+v5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnUGF0aCBpbiB0aGUgYHVybCgpYCBzaG91bGQgcmVtb3ZlIHByb3RvY29sJztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKG9wdHMucnVsZVZhbCkge1xuXG4gICAgICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHtzb3VyY2UsIHZhbHVlfSA9IGRlY2w7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBtYXRjaFByb3RvY29sID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWV4dHJhLWJvb2xlYW4tY2FzdCAqL1xuICAgICAgICAgICAgICAgIHdoaWxlICghIShtYXRjaCA9IFBBVFRFUk5fVVJMLmV4ZWModmFsdWUpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBtYXRjaFsyXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBkZWNsLnZhbHVlIOebuOWvueS6jiBsaW5lQ29udGVudCDnmoQgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVJbmRleCA9IGxpbmVDb250ZW50LmluZGV4T2YoZGVjbC52YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g55u45a+55LqOIGRlY2wudmFsdWUg55qEIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdmFsdWVJbmRleCArIG1hdGNoLmlucHV0LmluZGV4T2YodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCEhKG1hdGNoUHJvdG9jb2wgPSBQQVRURVJOX1BST1RPQ09MLmV4ZWModXJsKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGluZGV4ICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFuZ2VDb2xvckJ5SW5kZXgobGluZUNvbnRlbnQsIGluZGV4LCBtYXRjaFByb3RvY29sWzBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWV4dHJhLWJvb2xlYW4tY2FzdCAqL1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuIl19