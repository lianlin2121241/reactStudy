'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'unique-headings';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file unique-headings 的检测逻辑
 *       Headings should be defined only once
 *       https://github.com/CSSLint/csslint/wiki/Headings-should-only-be-defined-once
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Headings should be defined only once';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_COMBINATORS = /[\s>+~]+/g;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        var headings = {
            h1: 0,
            h2: 0,
            h3: 0,
            h4: 0,
            h5: 0,
            h6: 0
        };

        css.walkRules(function (rule) {
            /* jshint maxstatements: 26 */
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var selector = rule.selector,
                source = rule.source;

            var selectorGroup = selector.split(',');
            var line = source.start.line;
            var col = source.start.column;
            var lineContent = (0, _util.getLineContent)(line, source.input.css);

            for (var i = 0, len = selectorGroup.length; i < len; i++) {
                var selectorInGroup = selectorGroup[i] || '';
                var segments = selectorInGroup.split(PATTERN_COMBINATORS);
                var segmentLen = segments.length;

                var lastSegment = segments[segmentLen - 1];
                if (!lastSegment.match(':') && headings.hasOwnProperty(lastSegment)) {
                    headings[lastSegment]++;
                    if (headings[lastSegment] > 1) {
                        var newLineMatch = selectorInGroup.match(/\n/g);
                        var extraLine = 0;
                        if (newLineMatch) {
                            extraLine += newLineMatch.length;
                            line = line + extraLine;
                            lineContent = (0, _util.getLineContent)(line, source.input.css);
                            col = col + lineContent.indexOf(lastSegment);
                        } else {
                            col = lineContent.indexOf(lastSegment) + 1;
                        }
                        result.warn(RULENAME, {
                            node: rule,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(lastSegment, _chalk2.default.magenta(lastSegment)) + '` ' + _chalk2.default.grey(MSG)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3VuaXF1ZS1oZWFkaW5ncy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsIlBBVFRFUk5fQ09NQklOQVRPUlMiLCJjaGVjayIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwiaGVhZGluZ3MiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJ3YWxrUnVsZXMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJzZWxlY3RvciIsInJ1bGUiLCJzb3VyY2UiLCJzZWxlY3Rvckdyb3VwIiwic3BsaXQiLCJsaW5lIiwic3RhcnQiLCJjb2wiLCJjb2x1bW4iLCJsaW5lQ29udGVudCIsImlucHV0IiwiaSIsImxlbiIsImxlbmd0aCIsInNlbGVjdG9ySW5Hcm91cCIsInNlZ21lbnRzIiwic2VnbWVudExlbiIsImxhc3RTZWdtZW50IiwibWF0Y2giLCJoYXNPd25Qcm9wZXJ0eSIsIm5ld0xpbmVNYXRjaCIsImV4dHJhTGluZSIsImluZGV4T2YiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsInJlcGxhY2UiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLGlCQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sc0NBQVo7O0FBRUE7Ozs7OztBQU1BLElBQU1DLHNCQUFzQixXQUE1Qjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCOztBQUViLFlBQUksQ0FBQ0MsS0FBS0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBRUQsWUFBTUMsV0FBVztBQUNiQyxnQkFBSSxDQURTO0FBRWJDLGdCQUFJLENBRlM7QUFHYkMsZ0JBQUksQ0FIUztBQUliQyxnQkFBSSxDQUpTO0FBS2JDLGdCQUFJLENBTFM7QUFNYkMsZ0JBQUk7QUFOUyxTQUFqQjs7QUFTQVYsWUFBSVcsU0FBSixDQUFjLGdCQUFRO0FBQ2xCO0FBQ0EsZ0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DWCxLQUFLWSxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUppQixnQkFNWEMsUUFOVyxHQU1TQyxJQU5ULENBTVhELFFBTlc7QUFBQSxnQkFNREUsTUFOQyxHQU1TRCxJQU5ULENBTURDLE1BTkM7O0FBT2xCLGdCQUFNQyxnQkFBZ0JILFNBQVNJLEtBQVQsQ0FBZSxHQUFmLENBQXRCO0FBQ0EsZ0JBQUlDLE9BQU9ILE9BQU9JLEtBQVAsQ0FBYUQsSUFBeEI7QUFDQSxnQkFBSUUsTUFBTUwsT0FBT0ksS0FBUCxDQUFhRSxNQUF2QjtBQUNBLGdCQUFJQyxjQUFjLDBCQUFlSixJQUFmLEVBQXFCSCxPQUFPUSxLQUFQLENBQWF6QixHQUFsQyxDQUFsQjs7QUFFQSxpQkFBSyxJQUFJMEIsSUFBSSxDQUFSLEVBQVdDLE1BQU1ULGNBQWNVLE1BQXBDLEVBQTRDRixJQUFJQyxHQUFoRCxFQUFxREQsR0FBckQsRUFBMEQ7QUFDdEQsb0JBQU1HLGtCQUFrQlgsY0FBY1EsQ0FBZCxLQUFvQixFQUE1QztBQUNBLG9CQUFNSSxXQUFXRCxnQkFBZ0JWLEtBQWhCLENBQXNCdEIsbUJBQXRCLENBQWpCO0FBQ0Esb0JBQU1rQyxhQUFhRCxTQUFTRixNQUE1Qjs7QUFFQSxvQkFBTUksY0FBY0YsU0FBU0MsYUFBYSxDQUF0QixDQUFwQjtBQUNBLG9CQUFJLENBQUNDLFlBQVlDLEtBQVosQ0FBa0IsR0FBbEIsQ0FBRCxJQUEyQjdCLFNBQVM4QixjQUFULENBQXdCRixXQUF4QixDQUEvQixFQUFxRTtBQUNqRTVCLDZCQUFTNEIsV0FBVDtBQUNBLHdCQUFJNUIsU0FBUzRCLFdBQVQsSUFBd0IsQ0FBNUIsRUFBK0I7QUFDM0IsNEJBQU1HLGVBQWVOLGdCQUFnQkksS0FBaEIsQ0FBc0IsS0FBdEIsQ0FBckI7QUFDQSw0QkFBSUcsWUFBWSxDQUFoQjtBQUNBLDRCQUFJRCxZQUFKLEVBQWtCO0FBQ2RDLHlDQUFhRCxhQUFhUCxNQUExQjtBQUNBUixtQ0FBT0EsT0FBT2dCLFNBQWQ7QUFDQVosMENBQWMsMEJBQWVKLElBQWYsRUFBcUJILE9BQU9RLEtBQVAsQ0FBYXpCLEdBQWxDLENBQWQ7QUFDQXNCLGtDQUFNQSxNQUFNRSxZQUFZYSxPQUFaLENBQW9CTCxXQUFwQixDQUFaO0FBQ0gseUJBTEQsTUFNSztBQUNEVixrQ0FBTUUsWUFBWWEsT0FBWixDQUFvQkwsV0FBcEIsSUFBbUMsQ0FBekM7QUFDSDtBQUNEL0IsK0JBQU9xQyxJQUFQLENBQVkzQyxRQUFaLEVBQXNCO0FBQ2xCNEMsa0NBQU12QixJQURZO0FBRWxCd0Isc0NBQVU3QyxRQUZRO0FBR2xCeUIsa0NBQU1BLElBSFk7QUFJbEJFLGlDQUFLQSxHQUphO0FBS2xCbUIscUNBQVM3QyxHQUxTO0FBTWxCOEMsMENBQWMsTUFDUmxCLFlBQVltQixPQUFaLENBQW9CWCxXQUFwQixFQUFpQyxnQkFBTVksT0FBTixDQUFjWixXQUFkLENBQWpDLENBRFEsR0FFUixJQUZRLEdBR1IsZ0JBQU1hLElBQU4sQ0FBV2pELEdBQVg7QUFUWSx5QkFBdEI7O0FBWUFnQiwrQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0o7QUFDSixTQWhERDtBQWlESCxLQWpFeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6InVuaXF1ZS1oZWFkaW5ncy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgdW5pcXVlLWhlYWRpbmdzIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgSGVhZGluZ3Mgc2hvdWxkIGJlIGRlZmluZWQgb25seSBvbmNlXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvSGVhZGluZ3Mtc2hvdWxkLW9ubHktYmUtZGVmaW5lZC1vbmNlXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICd1bmlxdWUtaGVhZGluZ3MnO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ0hlYWRpbmdzIHNob3VsZCBiZSBkZWZpbmVkIG9ubHkgb25jZSc7XG5cbi8qKlxuICogY3NzIOe7hOWQiOeahOato+WImeWMuemFjVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT01CSU5BVE9SUyA9IC9bXFxzPit+XSsvZztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGVhZGluZ3MgPSB7XG4gICAgICAgICAgICBoMTogMCxcbiAgICAgICAgICAgIGgyOiAwLFxuICAgICAgICAgICAgaDM6IDAsXG4gICAgICAgICAgICBoNDogMCxcbiAgICAgICAgICAgIGg1OiAwLFxuICAgICAgICAgICAgaDY6IDBcbiAgICAgICAgfTtcblxuICAgICAgICBjc3Mud2Fsa1J1bGVzKHJ1bGUgPT4ge1xuICAgICAgICAgICAgLyoganNoaW50IG1heHN0YXRlbWVudHM6IDI2ICovXG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qge3NlbGVjdG9yLCBzb3VyY2V9ID0gcnVsZTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yR3JvdXAgPSBzZWxlY3Rvci5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgIGxldCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uO1xuICAgICAgICAgICAgbGV0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWxlY3Rvckdyb3VwLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3JJbkdyb3VwID0gc2VsZWN0b3JHcm91cFtpXSB8fCAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50cyA9IHNlbGVjdG9ySW5Hcm91cC5zcGxpdChQQVRURVJOX0NPTUJJTkFUT1JTKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50TGVuID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFNlZ21lbnQgPSBzZWdtZW50c1tzZWdtZW50TGVuIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKCFsYXN0U2VnbWVudC5tYXRjaCgnOicpICYmIGhlYWRpbmdzLmhhc093blByb3BlcnR5KGxhc3RTZWdtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBoZWFkaW5nc1tsYXN0U2VnbWVudF0rKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRpbmdzW2xhc3RTZWdtZW50XSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xpbmVNYXRjaCA9IHNlbGVjdG9ySW5Hcm91cC5tYXRjaCgvXFxuL2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGV4dHJhTGluZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3TGluZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFMaW5lICs9IG5ld0xpbmVNYXRjaC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmUgKyBleHRyYUxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSBjb2wgKyBsaW5lQ29udGVudC5pbmRleE9mKGxhc3RTZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IGxpbmVDb250ZW50LmluZGV4T2YobGFzdFNlZ21lbnQpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogcnVsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKGxhc3RTZWdtZW50LCBjaGFsay5tYWdlbnRhKGxhc3RTZWdtZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==