'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'ids';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file ids 的检测逻辑
 *       Selectors should not contain IDs
 *       https://github.com/CSSLint/csslint/wiki/Disallow-IDs-in-selectors
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Selectors should not contain IDs';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var selector = rule.selector,
                source = rule.source;

            var selectorGroup = selector.split(',');
            var line = source.start.line;
            var col = source.start.column;
            var lineContent = (0, _util.getLineContent)(line, source.input.css);

            for (var i = 0, len = selectorGroup.length; i < len; i++) {
                var selectorInGroup = selectorGroup[i] || '';
                // 去掉 attr 选择器
                selectorInGroup = selectorInGroup.replace(/\[.+?\](?::[^\s>+~\.#\[]+)?/g, '');
                var match = selectorInGroup.match(/#[^\s>+~\.#\[]+/);
                if (match) {
                    if (selectorInGroup.slice(0, 1) === '\n') {
                        line = line + 1;
                        lineContent = (0, _util.getLineContent)(line, source.input.css);
                        col = col + match.index - 1;
                    } else {
                        col = col + match.index;
                    }
                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: MSG,
                        colorMessage: '`' + lineContent.replace(match[0], _chalk2.default.magenta(match[0])) + '` ' + _chalk2.default.grey(MSG)
                    });
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2lkcy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrUnVsZXMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJzZWxlY3RvciIsInJ1bGUiLCJzb3VyY2UiLCJzZWxlY3Rvckdyb3VwIiwic3BsaXQiLCJsaW5lIiwic3RhcnQiLCJjb2wiLCJjb2x1bW4iLCJsaW5lQ29udGVudCIsImlucHV0IiwiaSIsImxlbiIsImxlbmd0aCIsInNlbGVjdG9ySW5Hcm91cCIsInJlcGxhY2UiLCJtYXRjaCIsInNsaWNlIiwiaW5kZXgiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsIm1hZ2VudGEiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsS0FBakI7O0FBRUE7Ozs7OztBQXBCQTs7Ozs7OztBQTBCQSxJQUFNQyxNQUFNLGtDQUFaOztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRLGtCQUFRQyxNQUFSLENBQWVILFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDSSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7O0FBRWIsWUFBSSxDQUFDQyxLQUFLQyxPQUFWLEVBQW1CO0FBQ2Y7QUFDSDs7QUFFREgsWUFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCLGdCQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFIaUIsZ0JBS1hDLFFBTFcsR0FLU0MsSUFMVCxDQUtYRCxRQUxXO0FBQUEsZ0JBS0RFLE1BTEMsR0FLU0QsSUFMVCxDQUtEQyxNQUxDOztBQU1sQixnQkFBTUMsZ0JBQWdCSCxTQUFTSSxLQUFULENBQWUsR0FBZixDQUF0QjtBQUNBLGdCQUFJQyxPQUFPSCxPQUFPSSxLQUFQLENBQWFELElBQXhCO0FBQ0EsZ0JBQUlFLE1BQU1MLE9BQU9JLEtBQVAsQ0FBYUUsTUFBdkI7QUFDQSxnQkFBSUMsY0FBYywwQkFBZUosSUFBZixFQUFxQkgsT0FBT1EsS0FBUCxDQUFhbEIsR0FBbEMsQ0FBbEI7O0FBRUEsaUJBQUssSUFBSW1CLElBQUksQ0FBUixFQUFXQyxNQUFNVCxjQUFjVSxNQUFwQyxFQUE0Q0YsSUFBSUMsR0FBaEQsRUFBcURELEdBQXJELEVBQTBEO0FBQ3RELG9CQUFJRyxrQkFBa0JYLGNBQWNRLENBQWQsS0FBb0IsRUFBMUM7QUFDQTtBQUNBRyxrQ0FBa0JBLGdCQUFnQkMsT0FBaEIsQ0FBd0IsOEJBQXhCLEVBQXdELEVBQXhELENBQWxCO0FBQ0Esb0JBQU1DLFFBQVFGLGdCQUFnQkUsS0FBaEIsQ0FBc0IsaUJBQXRCLENBQWQ7QUFDQSxvQkFBSUEsS0FBSixFQUFXO0FBQ1Asd0JBQUlGLGdCQUFnQkcsS0FBaEIsQ0FBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsTUFBZ0MsSUFBcEMsRUFBMEM7QUFDdENaLCtCQUFPQSxPQUFPLENBQWQ7QUFDQUksc0NBQWMsMEJBQWVKLElBQWYsRUFBcUJILE9BQU9RLEtBQVAsQ0FBYWxCLEdBQWxDLENBQWQ7QUFDQWUsOEJBQU1BLE1BQU1TLE1BQU1FLEtBQVosR0FBb0IsQ0FBMUI7QUFDSCxxQkFKRCxNQUtLO0FBQ0RYLDhCQUFNQSxNQUFNUyxNQUFNRSxLQUFsQjtBQUNIO0FBQ0R6QiwyQkFBTzBCLElBQVAsQ0FBWS9CLFFBQVosRUFBc0I7QUFDbEJnQyw4QkFBTW5CLElBRFk7QUFFbEJvQixrQ0FBVWpDLFFBRlE7QUFHbEJpQiw4QkFBTUEsSUFIWTtBQUlsQkUsNkJBQUtBLEdBSmE7QUFLbEJlLGlDQUFTakMsR0FMUztBQU1sQmtDLHNDQUFjLE1BQ1JkLFlBQVlNLE9BQVosQ0FBb0JDLE1BQU0sQ0FBTixDQUFwQixFQUE4QixnQkFBTVEsT0FBTixDQUFjUixNQUFNLENBQU4sQ0FBZCxDQUE5QixDQURRLEdBRVIsSUFGUSxHQUdSLGdCQUFNUyxJQUFOLENBQVdwQyxHQUFYO0FBVFkscUJBQXRCO0FBV0g7QUFDSjtBQUNKLFNBdENEO0FBdUNILEtBOUN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiaWRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBpZHMg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBTZWxlY3RvcnMgc2hvdWxkIG5vdCBjb250YWluIElEc1xuICogICAgICAgaHR0cHM6Ly9naXRodWIuY29tL0NTU0xpbnQvY3NzbGludC93aWtpL0Rpc2FsbG93LUlEcy1pbi1zZWxlY3RvcnNcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ2lkcyc7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnU2VsZWN0b3JzIHNob3VsZCBub3QgY29udGFpbiBJRHMnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjc3Mud2Fsa1J1bGVzKHJ1bGUgPT4ge1xuICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHtzZWxlY3Rvciwgc291cmNlfSA9IHJ1bGU7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rvckdyb3VwID0gc2VsZWN0b3Iuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIGxldCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICBsZXQgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbjtcbiAgICAgICAgICAgIGxldCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0b3JHcm91cC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RvckluR3JvdXAgPSBzZWxlY3Rvckdyb3VwW2ldIHx8ICcnO1xuICAgICAgICAgICAgICAgIC8vIOWOu+aOiSBhdHRyIOmAieaLqeWZqFxuICAgICAgICAgICAgICAgIHNlbGVjdG9ySW5Hcm91cCA9IHNlbGVjdG9ySW5Hcm91cC5yZXBsYWNlKC9cXFsuKz9cXF0oPzo6W15cXHM+K35cXC4jXFxbXSspPy9nLCAnJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBzZWxlY3RvckluR3JvdXAubWF0Y2goLyNbXlxccz4rflxcLiNcXFtdKy8pO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JJbkdyb3VwLnNsaWNlKDAsIDEpID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IGNvbCArIG1hdGNoLmluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IGNvbCArIG1hdGNoLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBydWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UobWF0Y2hbMF0sIGNoYWxrLm1hZ2VudGEobWF0Y2hbMF0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==