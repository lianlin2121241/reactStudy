'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'duplicate-background-images';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file duplicate-background-images 的检测逻辑
 *       Every background-image should be unique. Use a common class for e.g. sprites
 *       https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-background-images
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Every background-image should be unique. Use a common class for e.g. sprites';

/**
 * 匹配 css 中 url 的正则
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_URL = /\burl\s*\((["']?)([^\)]+)\1\)/g;

var stack = {};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        stack = {};

        css.walkDecls(function (decl) {

            var prop = decl.prop;
            if (prop.match(/background/i)) {
                var value = decl.value;
                var match = null;
                /* eslint-disable no-extra-boolean-cast */
                while (!!(match = PATTERN_URL.exec(value))) {
                    if (typeof stack[match[2]] === 'undefined') {
                        stack[match[2]] = decl;
                    } else {
                        var str = 'Background image `' + match[2] + '` was used multiple times, first declared at line ' + stack[match[2]].source.start.line + ', col ' + stack[match[2]].source.start.column + '. ' + MSG;

                        var colorStr = 'Background image `' + _chalk2.default.magenta(match[2]) + '` was used multiple times, first declared at line ' + stack[match[2]].source.start.line + ', col ' + stack[match[2]].source.start.column + '. ' + _chalk2.default.grey(MSG);

                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        var col = lineContent.indexOf(match[2]) + 1;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: str,
                            colorMessage: colorStr
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
                /* eslint-enable no-extra-boolean-cast */
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2R1cGxpY2F0ZS1iYWNrZ3JvdW5kLWltYWdlcy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsIlBBVFRFUk5fVVJMIiwic3RhY2siLCJjaGVjayIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa0RlY2xzIiwicHJvcCIsImRlY2wiLCJtYXRjaCIsInZhbHVlIiwiZXhlYyIsInN0ciIsInNvdXJjZSIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImNvbG9yU3RyIiwibWFnZW50YSIsImdyZXkiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sIiwiaW5kZXhPZiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLDZCQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sOEVBQVo7O0FBRUE7Ozs7OztBQU1BLElBQU1DLGNBQWMsZ0NBQXBCOztBQUVBLElBQUlDLFFBQVEsRUFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUSxrQkFBUUMsTUFBUixDQUFlTCxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ00sR0FBRCxFQUFNQyxNQUFOLEVBQWlCOztBQUViLFlBQUksQ0FBQ0MsS0FBS0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBRUROLGdCQUFRLEVBQVI7O0FBRUFHLFlBQUlJLFNBQUosQ0FBYyxnQkFBUTs7QUFFbEIsZ0JBQUlDLE9BQU9DLEtBQUtELElBQWhCO0FBQ0EsZ0JBQUlBLEtBQUtFLEtBQUwsQ0FBVyxhQUFYLENBQUosRUFBK0I7QUFDM0Isb0JBQU1DLFFBQVFGLEtBQUtFLEtBQW5CO0FBQ0Esb0JBQUlELFFBQVEsSUFBWjtBQUNBO0FBQ0EsdUJBQU8sQ0FBQyxFQUFFQSxRQUFRWCxZQUFZYSxJQUFaLENBQWlCRCxLQUFqQixDQUFWLENBQVIsRUFBNEM7QUFDeEMsd0JBQUksT0FBT1gsTUFBTVUsTUFBTSxDQUFOLENBQU4sQ0FBUCxLQUEyQixXQUEvQixFQUE0QztBQUN4Q1YsOEJBQU1VLE1BQU0sQ0FBTixDQUFOLElBQWtCRCxJQUFsQjtBQUNILHFCQUZELE1BR0s7QUFDRCw0QkFBTUksTUFBTSx1QkFDTkgsTUFBTSxDQUFOLENBRE0sR0FFTixvREFGTSxHQUdOVixNQUFNVSxNQUFNLENBQU4sQ0FBTixFQUFnQkksTUFBaEIsQ0FBdUJDLEtBQXZCLENBQTZCQyxJQUh2QixHQUlOLFFBSk0sR0FLTmhCLE1BQU1VLE1BQU0sQ0FBTixDQUFOLEVBQWdCSSxNQUFoQixDQUF1QkMsS0FBdkIsQ0FBNkJFLE1BTHZCLEdBTU4sSUFOTSxHQU9ObkIsR0FQTjs7QUFTQSw0QkFBTW9CLFdBQVcsdUJBQ1gsZ0JBQU1DLE9BQU4sQ0FBY1QsTUFBTSxDQUFOLENBQWQsQ0FEVyxHQUVYLG9EQUZXLEdBR1hWLE1BQU1VLE1BQU0sQ0FBTixDQUFOLEVBQWdCSSxNQUFoQixDQUF1QkMsS0FBdkIsQ0FBNkJDLElBSGxCLEdBSVgsUUFKVyxHQUtYaEIsTUFBTVUsTUFBTSxDQUFOLENBQU4sRUFBZ0JJLE1BQWhCLENBQXVCQyxLQUF2QixDQUE2QkUsTUFMbEIsR0FNWCxJQU5XLEdBT1gsZ0JBQU1HLElBQU4sQ0FBV3RCLEdBQVgsQ0FQTjs7QUFTQSw0QkFBTWdCLFNBQVNMLEtBQUtLLE1BQXBCO0FBQ0EsNEJBQU1FLE9BQU9GLE9BQU9DLEtBQVAsQ0FBYUMsSUFBMUI7QUFDQSw0QkFBTUssY0FBYywwQkFBZUwsSUFBZixFQUFxQkYsT0FBT1EsS0FBUCxDQUFhbkIsR0FBbEMsQ0FBcEI7QUFDQSw0QkFBTW9CLE1BQU1GLFlBQVlHLE9BQVosQ0FBb0JkLE1BQU0sQ0FBTixDQUFwQixJQUFnQyxDQUE1QztBQUNBTiwrQkFBT3FCLElBQVAsQ0FBWTVCLFFBQVosRUFBc0I7QUFDbEI2QixrQ0FBTWpCLElBRFk7QUFFbEJrQixzQ0FBVTlCLFFBRlE7QUFHbEJtQixrQ0FBTUEsSUFIWTtBQUlsQk8saUNBQUtBLEdBSmE7QUFLbEJLLHFDQUFTZixHQUxTO0FBTWxCZ0IsMENBQWNYO0FBTkkseUJBQXRCO0FBUUFZLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDRDtBQUNIO0FBQ0osU0EvQ0Q7QUFnREgsS0F6RHlDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJkdXBsaWNhdGUtYmFja2dyb3VuZC1pbWFnZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGR1cGxpY2F0ZS1iYWNrZ3JvdW5kLWltYWdlcyDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIEV2ZXJ5IGJhY2tncm91bmQtaW1hZ2Ugc2hvdWxkIGJlIHVuaXF1ZS4gVXNlIGEgY29tbW9uIGNsYXNzIGZvciBlLmcuIHNwcml0ZXNcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9DU1NMaW50L2Nzc2xpbnQvd2lraS9EaXNhbGxvdy1kdXBsaWNhdGUtYmFja2dyb3VuZC1pbWFnZXNcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ2R1cGxpY2F0ZS1iYWNrZ3JvdW5kLWltYWdlcyc7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnRXZlcnkgYmFja2dyb3VuZC1pbWFnZSBzaG91bGQgYmUgdW5pcXVlLiBVc2UgYSBjb21tb24gY2xhc3MgZm9yIGUuZy4gc3ByaXRlcyc7XG5cbi8qKlxuICog5Yy56YWNIGNzcyDkuK0gdXJsIOeahOato+WImVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9VUkwgPSAvXFxidXJsXFxzKlxcKChbXCInXT8pKFteXFwpXSspXFwxXFwpL2c7XG5cbmxldCBzdGFjayA9IHt9O1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzdGFjayA9IHt9O1xuXG4gICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG5cbiAgICAgICAgICAgIGxldCBwcm9wID0gZGVjbC5wcm9wO1xuICAgICAgICAgICAgaWYgKHByb3AubWF0Y2goL2JhY2tncm91bmQvaSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRlY2wudmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1leHRyYS1ib29sZWFuLWNhc3QgKi9cbiAgICAgICAgICAgICAgICB3aGlsZSAoISEobWF0Y2ggPSBQQVRURVJOX1VSTC5leGVjKHZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGFja1ttYXRjaFsyXV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFja1ttYXRjaFsyXV0gPSBkZWNsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyID0gJ0JhY2tncm91bmQgaW1hZ2UgYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIG1hdGNoWzJdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCB3YXMgdXNlZCBtdWx0aXBsZSB0aW1lcywgZmlyc3QgZGVjbGFyZWQgYXQgbGluZSAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzdGFja1ttYXRjaFsyXV0uc291cmNlLnN0YXJ0LmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcsIGNvbCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzdGFja1ttYXRjaFsyXV0uc291cmNlLnN0YXJ0LmNvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJy4gJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgTVNHO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xvclN0ciA9ICdCYWNrZ3JvdW5kIGltYWdlIGAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5tYWdlbnRhKG1hdGNoWzJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2Agd2FzIHVzZWQgbXVsdGlwbGUgdGltZXMsIGZpcnN0IGRlY2xhcmVkIGF0IGxpbmUgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgc3RhY2tbbWF0Y2hbMl1dLnNvdXJjZS5zdGFydC5saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnLCBjb2wgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgc3RhY2tbbWF0Y2hbMl1dLnNvdXJjZS5zdGFydC5jb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcuICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gZGVjbC5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gbGluZUNvbnRlbnQuaW5kZXhPZihtYXRjaFsyXSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHN0cixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6IGNvbG9yU3RyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1leHRyYS1ib29sZWFuLWNhc3QgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==