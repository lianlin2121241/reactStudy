'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

'use strict';

/**
 * 规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file zero-unit 的检测逻辑
 *       028: [强制] 长度为 `0` 时须省略单位。 (也只有长度单位可省)
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'zero-unit';

/**
 * css 长度单位集合
 * https://developer.mozilla.org/en-US/docs/Web/CSS/length
 *
 * @const
 * @type {Array}
 */
var LENGTH_UNITS = [
// Relative length units
'em', 'ex', 'ch', 'rem', // Font-relative lengths
'vh', 'vw', 'vmin', 'vmax', // Viewport-percentage lengths
// Absolute length units
'px', 'mm', 'cm', 'in', 'pt', 'pc'];

/**
 * 数字正则
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_NUMERIC = /\d+[\.\d]*/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Values of 0 shouldn\'t have units specified';

/**
 * 行号的缓存，防止同一行多次报错
 *
 * @type {number}
 */
var lineCache = 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
            return;
        }

        lineCache = 0;

        css.walkDecls(function (decl) {
            var parts = _postcss2.default.list.space(decl.value);
            for (var i = 0, len = parts.length; i < len; i++) {
                var part = parts[i];
                var numericVal = parseFloat(part);

                if (numericVal === 0) {
                    var unit = part.replace(PATTERN_NUMERIC, '');
                    var source = decl.source;
                    var line = source.start.line;

                    if (LENGTH_UNITS.indexOf(unit) > -1 && lineCache !== line) {
                        lineCache = line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: source.start.column + decl.prop.length + decl.raws.between.length,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(decl.value, _chalk2.default.magenta(decl.value)) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3plcm8tdW5pdC5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIkxFTkdUSF9VTklUUyIsIlBBVFRFUk5fTlVNRVJJQyIsIk1TRyIsImxpbmVDYWNoZSIsImNoZWNrIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJ3YWxrRGVjbHMiLCJwYXJ0cyIsImxpc3QiLCJzcGFjZSIsImRlY2wiLCJ2YWx1ZSIsImkiLCJsZW4iLCJsZW5ndGgiLCJwYXJ0IiwibnVtZXJpY1ZhbCIsInBhcnNlRmxvYXQiLCJ1bml0IiwicmVwbGFjZSIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImluZGV4T2YiLCJsaW5lQ29udGVudCIsImlucHV0Iiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsImNvbCIsImNvbHVtbiIsInByb3AiLCJyYXdzIiwiYmV0d2VlbiIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOztBQUVBOzs7Ozs7QUFiQTs7Ozs7O0FBbUJBLElBQU1BLFdBQVcsV0FBakI7O0FBRUE7Ozs7Ozs7QUFPQSxJQUFNQyxlQUFlO0FBQ2pCO0FBQ0EsSUFGaUIsRUFFWCxJQUZXLEVBRUwsSUFGSyxFQUVDLEtBRkQsRUFFUTtBQUN6QixJQUhpQixFQUdYLElBSFcsRUFHTCxNQUhLLEVBR0csTUFISCxFQUdXO0FBQzVCO0FBQ0EsSUFMaUIsRUFLWCxJQUxXLEVBS0wsSUFMSyxFQUtDLElBTEQsRUFLTyxJQUxQLEVBS2EsSUFMYixDQUFyQjs7QUFRQTs7Ozs7O0FBTUEsSUFBTUMsa0JBQWtCLFlBQXhCOztBQUVBOzs7Ozs7QUFNQSxJQUFNQyxNQUFNLDZDQUFaOztBQUVBOzs7OztBQUtBLElBQUlDLFlBQVksQ0FBaEI7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVEsa0JBQVFDLE1BQVIsQ0FBZU4sUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNPLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUksQ0FBQ0MsS0FBS0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBRUQsWUFBSUMsT0FBT0MseUJBQVAsSUFBb0NILEtBQUtJLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBRURULG9CQUFZLENBQVo7O0FBRUFHLFlBQUlPLFNBQUosQ0FBYyxnQkFBUTtBQUNsQixnQkFBTUMsUUFBUSxrQkFBUUMsSUFBUixDQUFhQyxLQUFiLENBQW1CQyxLQUFLQyxLQUF4QixDQUFkO0FBQ0EsaUJBQUssSUFBSUMsSUFBSSxDQUFSLEVBQVdDLE1BQU1OLE1BQU1PLE1BQTVCLEVBQW9DRixJQUFJQyxHQUF4QyxFQUE2Q0QsR0FBN0MsRUFBa0Q7QUFDOUMsb0JBQU1HLE9BQU9SLE1BQU1LLENBQU4sQ0FBYjtBQUNBLG9CQUFNSSxhQUFhQyxXQUFXRixJQUFYLENBQW5COztBQUVBLG9CQUFJQyxlQUFlLENBQW5CLEVBQXNCO0FBQ2xCLHdCQUFNRSxPQUFPSCxLQUFLSSxPQUFMLENBQWF6QixlQUFiLEVBQThCLEVBQTlCLENBQWI7QUFDQSx3QkFBTTBCLFNBQVNWLEtBQUtVLE1BQXBCO0FBQ0Esd0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7O0FBRUEsd0JBQUk1QixhQUFhOEIsT0FBYixDQUFxQkwsSUFBckIsSUFBNkIsQ0FBQyxDQUE5QixJQUFtQ3RCLGNBQWN5QixJQUFyRCxFQUEyRDtBQUN2RHpCLG9DQUFZeUIsSUFBWjtBQUNBLDRCQUFNRyxjQUFjLDBCQUFlSCxJQUFmLEVBQXFCRCxPQUFPSyxLQUFQLENBQWExQixHQUFsQyxDQUFwQjtBQUNBQywrQkFBTzBCLElBQVAsQ0FBWWxDLFFBQVosRUFBc0I7QUFDbEJtQyxrQ0FBTWpCLElBRFk7QUFFbEJrQixzQ0FBVXBDLFFBRlE7QUFHbEI2QixrQ0FBTUEsSUFIWTtBQUlsQlEsaUNBQUtULE9BQU9FLEtBQVAsQ0FBYVEsTUFBYixHQUFzQnBCLEtBQUtxQixJQUFMLENBQVVqQixNQUFoQyxHQUF5Q0osS0FBS3NCLElBQUwsQ0FBVUMsT0FBVixDQUFrQm5CLE1BSjlDO0FBS2xCb0IscUNBQVN2QyxHQUxTO0FBTWxCd0MsMENBQWMsTUFDUlgsWUFBWUwsT0FBWixDQUNFVCxLQUFLQyxLQURQLEVBRUUsZ0JBQU15QixPQUFOLENBQWMxQixLQUFLQyxLQUFuQixDQUZGLENBRFEsR0FLUixJQUxRLEdBTVIsZ0JBQU0wQixJQUFOLENBQVcxQyxHQUFYO0FBWlkseUJBQXRCO0FBY0FRLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSjtBQUNKLFNBaENEO0FBaUNILEtBN0N5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiemVyby11bml0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSB6ZXJvLXVuaXQg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMjg6IFvlvLrliLZdIOmVv+W6puS4uiBgMGAg5pe26aG755yB55Wl5Y2V5L2N44CCICjkuZ/lj6rmnInplb/luqbljZXkvY3lj6/nnIEpXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiDop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ3plcm8tdW5pdCc7XG5cbi8qKlxuICogY3NzIOmVv+W6puWNleS9jembhuWQiFxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xlbmd0aFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge0FycmF5fVxuICovXG5jb25zdCBMRU5HVEhfVU5JVFMgPSBbXG4gICAgLy8gUmVsYXRpdmUgbGVuZ3RoIHVuaXRzXG4gICAgJ2VtJywgJ2V4JywgJ2NoJywgJ3JlbScsIC8vIEZvbnQtcmVsYXRpdmUgbGVuZ3Roc1xuICAgICd2aCcsICd2dycsICd2bWluJywgJ3ZtYXgnLCAvLyBWaWV3cG9ydC1wZXJjZW50YWdlIGxlbmd0aHNcbiAgICAvLyBBYnNvbHV0ZSBsZW5ndGggdW5pdHNcbiAgICAncHgnLCAnbW0nLCAnY20nLCAnaW4nLCAncHQnLCAncGMnXG5dO1xuXG4vKipcbiAqIOaVsOWtl+ato+WImVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9OVU1FUklDID0gL1xcZCtbXFwuXFxkXSovO1xuXG4vKipcbiAqIOmUmeivr+S/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ1ZhbHVlcyBvZiAwIHNob3VsZG5cXCd0IGhhdmUgdW5pdHMgc3BlY2lmaWVkJztcblxuLyoqXG4gKiDooYzlj7fnmoTnvJPlrZjvvIzpmLLmraLlkIzkuIDooYzlpJrmrKHmiqXplJlcbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5sZXQgbGluZUNhY2hlID0gMDtcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsaW5lQ2FjaGUgPSAwO1xuXG4gICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IHBvc3Rjc3MubGlzdC5zcGFjZShkZWNsLnZhbHVlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1lcmljVmFsID0gcGFyc2VGbG9hdChwYXJ0KTtcblxuICAgICAgICAgICAgICAgIGlmIChudW1lcmljVmFsID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVuaXQgPSBwYXJ0LnJlcGxhY2UoUEFUVEVSTl9OVU1FUklDLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKExFTkdUSF9VTklUUy5pbmRleE9mKHVuaXQpID4gLTEgJiYgbGluZUNhY2hlICE9PSBsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ2FjaGUgPSBsaW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6IHNvdXJjZS5zdGFydC5jb2x1bW4gKyBkZWNsLnByb3AubGVuZ3RoICsgZGVjbC5yYXdzLmJldHdlZW4ubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbGsubWFnZW50YShkZWNsLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4pO1xuIl19